
lab2-garland.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006104  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002a4  080062b4  080062b4  000162b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006558  08006558  0002038c  2**0
                  CONTENTS
  4 .ARM          00000008  08006558  08006558  00016558  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006560  08006560  0002038c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006560  08006560  00016560  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006564  08006564  00016564  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000038c  20000000  08006568  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002038c  2**0
                  CONTENTS
 10 .bss          000009b8  2000038c  2000038c  0002038c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000d44  20000d44  0002038c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002038c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009dd3  00000000  00000000  000203bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001a7b  00000000  00000000  0002a18f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000007b0  00000000  00000000  0002bc10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000720  00000000  00000000  0002c3c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022910  00000000  00000000  0002cae0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00009ee4  00000000  00000000  0004f3f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cfaf4  00000000  00000000  000592d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00128dc8  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002e38  00000000  00000000  00128e18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000038c 	.word	0x2000038c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800629c 	.word	0x0800629c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000390 	.word	0x20000390
 80001ec:	0800629c 	.word	0x0800629c

080001f0 <strcmp>:
 80001f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001f8:	2a01      	cmp	r2, #1
 80001fa:	bf28      	it	cs
 80001fc:	429a      	cmpcs	r2, r3
 80001fe:	d0f7      	beq.n	80001f0 <strcmp>
 8000200:	1ad0      	subs	r0, r2, r3
 8000202:	4770      	bx	lr

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr
	...

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b974 	b.w	80005c0 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468e      	mov	lr, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14d      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4694      	mov	ip, r2
 8000302:	d969      	bls.n	80003d8 <__udivmoddi4+0xe8>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b152      	cbz	r2, 8000320 <__udivmoddi4+0x30>
 800030a:	fa01 f302 	lsl.w	r3, r1, r2
 800030e:	f1c2 0120 	rsb	r1, r2, #32
 8000312:	fa20 f101 	lsr.w	r1, r0, r1
 8000316:	fa0c fc02 	lsl.w	ip, ip, r2
 800031a:	ea41 0e03 	orr.w	lr, r1, r3
 800031e:	4094      	lsls	r4, r2
 8000320:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000324:	0c21      	lsrs	r1, r4, #16
 8000326:	fbbe f6f8 	udiv	r6, lr, r8
 800032a:	fa1f f78c 	uxth.w	r7, ip
 800032e:	fb08 e316 	mls	r3, r8, r6, lr
 8000332:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000336:	fb06 f107 	mul.w	r1, r6, r7
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 30ff 	add.w	r0, r6, #4294967295
 8000346:	f080 811f 	bcs.w	8000588 <__udivmoddi4+0x298>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 811c 	bls.w	8000588 <__udivmoddi4+0x298>
 8000350:	3e02      	subs	r6, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a5b      	subs	r3, r3, r1
 8000356:	b2a4      	uxth	r4, r4
 8000358:	fbb3 f0f8 	udiv	r0, r3, r8
 800035c:	fb08 3310 	mls	r3, r8, r0, r3
 8000360:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000364:	fb00 f707 	mul.w	r7, r0, r7
 8000368:	42a7      	cmp	r7, r4
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x92>
 800036c:	eb1c 0404 	adds.w	r4, ip, r4
 8000370:	f100 33ff 	add.w	r3, r0, #4294967295
 8000374:	f080 810a 	bcs.w	800058c <__udivmoddi4+0x29c>
 8000378:	42a7      	cmp	r7, r4
 800037a:	f240 8107 	bls.w	800058c <__udivmoddi4+0x29c>
 800037e:	4464      	add	r4, ip
 8000380:	3802      	subs	r0, #2
 8000382:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000386:	1be4      	subs	r4, r4, r7
 8000388:	2600      	movs	r6, #0
 800038a:	b11d      	cbz	r5, 8000394 <__udivmoddi4+0xa4>
 800038c:	40d4      	lsrs	r4, r2
 800038e:	2300      	movs	r3, #0
 8000390:	e9c5 4300 	strd	r4, r3, [r5]
 8000394:	4631      	mov	r1, r6
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d909      	bls.n	80003b2 <__udivmoddi4+0xc2>
 800039e:	2d00      	cmp	r5, #0
 80003a0:	f000 80ef 	beq.w	8000582 <__udivmoddi4+0x292>
 80003a4:	2600      	movs	r6, #0
 80003a6:	e9c5 0100 	strd	r0, r1, [r5]
 80003aa:	4630      	mov	r0, r6
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	fab3 f683 	clz	r6, r3
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	d14a      	bne.n	8000450 <__udivmoddi4+0x160>
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d302      	bcc.n	80003c4 <__udivmoddi4+0xd4>
 80003be:	4282      	cmp	r2, r0
 80003c0:	f200 80f9 	bhi.w	80005b6 <__udivmoddi4+0x2c6>
 80003c4:	1a84      	subs	r4, r0, r2
 80003c6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ca:	2001      	movs	r0, #1
 80003cc:	469e      	mov	lr, r3
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	d0e0      	beq.n	8000394 <__udivmoddi4+0xa4>
 80003d2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003d6:	e7dd      	b.n	8000394 <__udivmoddi4+0xa4>
 80003d8:	b902      	cbnz	r2, 80003dc <__udivmoddi4+0xec>
 80003da:	deff      	udf	#255	; 0xff
 80003dc:	fab2 f282 	clz	r2, r2
 80003e0:	2a00      	cmp	r2, #0
 80003e2:	f040 8092 	bne.w	800050a <__udivmoddi4+0x21a>
 80003e6:	eba1 010c 	sub.w	r1, r1, ip
 80003ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ee:	fa1f fe8c 	uxth.w	lr, ip
 80003f2:	2601      	movs	r6, #1
 80003f4:	0c20      	lsrs	r0, r4, #16
 80003f6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003fa:	fb07 1113 	mls	r1, r7, r3, r1
 80003fe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000402:	fb0e f003 	mul.w	r0, lr, r3
 8000406:	4288      	cmp	r0, r1
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x12c>
 800040a:	eb1c 0101 	adds.w	r1, ip, r1
 800040e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x12a>
 8000414:	4288      	cmp	r0, r1
 8000416:	f200 80cb 	bhi.w	80005b0 <__udivmoddi4+0x2c0>
 800041a:	4643      	mov	r3, r8
 800041c:	1a09      	subs	r1, r1, r0
 800041e:	b2a4      	uxth	r4, r4
 8000420:	fbb1 f0f7 	udiv	r0, r1, r7
 8000424:	fb07 1110 	mls	r1, r7, r0, r1
 8000428:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800042c:	fb0e fe00 	mul.w	lr, lr, r0
 8000430:	45a6      	cmp	lr, r4
 8000432:	d908      	bls.n	8000446 <__udivmoddi4+0x156>
 8000434:	eb1c 0404 	adds.w	r4, ip, r4
 8000438:	f100 31ff 	add.w	r1, r0, #4294967295
 800043c:	d202      	bcs.n	8000444 <__udivmoddi4+0x154>
 800043e:	45a6      	cmp	lr, r4
 8000440:	f200 80bb 	bhi.w	80005ba <__udivmoddi4+0x2ca>
 8000444:	4608      	mov	r0, r1
 8000446:	eba4 040e 	sub.w	r4, r4, lr
 800044a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800044e:	e79c      	b.n	800038a <__udivmoddi4+0x9a>
 8000450:	f1c6 0720 	rsb	r7, r6, #32
 8000454:	40b3      	lsls	r3, r6
 8000456:	fa22 fc07 	lsr.w	ip, r2, r7
 800045a:	ea4c 0c03 	orr.w	ip, ip, r3
 800045e:	fa20 f407 	lsr.w	r4, r0, r7
 8000462:	fa01 f306 	lsl.w	r3, r1, r6
 8000466:	431c      	orrs	r4, r3
 8000468:	40f9      	lsrs	r1, r7
 800046a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800046e:	fa00 f306 	lsl.w	r3, r0, r6
 8000472:	fbb1 f8f9 	udiv	r8, r1, r9
 8000476:	0c20      	lsrs	r0, r4, #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fb09 1118 	mls	r1, r9, r8, r1
 8000480:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000484:	fb08 f00e 	mul.w	r0, r8, lr
 8000488:	4288      	cmp	r0, r1
 800048a:	fa02 f206 	lsl.w	r2, r2, r6
 800048e:	d90b      	bls.n	80004a8 <__udivmoddi4+0x1b8>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f108 3aff 	add.w	sl, r8, #4294967295
 8000498:	f080 8088 	bcs.w	80005ac <__udivmoddi4+0x2bc>
 800049c:	4288      	cmp	r0, r1
 800049e:	f240 8085 	bls.w	80005ac <__udivmoddi4+0x2bc>
 80004a2:	f1a8 0802 	sub.w	r8, r8, #2
 80004a6:	4461      	add	r1, ip
 80004a8:	1a09      	subs	r1, r1, r0
 80004aa:	b2a4      	uxth	r4, r4
 80004ac:	fbb1 f0f9 	udiv	r0, r1, r9
 80004b0:	fb09 1110 	mls	r1, r9, r0, r1
 80004b4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004bc:	458e      	cmp	lr, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x1e2>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004c8:	d26c      	bcs.n	80005a4 <__udivmoddi4+0x2b4>
 80004ca:	458e      	cmp	lr, r1
 80004cc:	d96a      	bls.n	80005a4 <__udivmoddi4+0x2b4>
 80004ce:	3802      	subs	r0, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004d6:	fba0 9402 	umull	r9, r4, r0, r2
 80004da:	eba1 010e 	sub.w	r1, r1, lr
 80004de:	42a1      	cmp	r1, r4
 80004e0:	46c8      	mov	r8, r9
 80004e2:	46a6      	mov	lr, r4
 80004e4:	d356      	bcc.n	8000594 <__udivmoddi4+0x2a4>
 80004e6:	d053      	beq.n	8000590 <__udivmoddi4+0x2a0>
 80004e8:	b15d      	cbz	r5, 8000502 <__udivmoddi4+0x212>
 80004ea:	ebb3 0208 	subs.w	r2, r3, r8
 80004ee:	eb61 010e 	sbc.w	r1, r1, lr
 80004f2:	fa01 f707 	lsl.w	r7, r1, r7
 80004f6:	fa22 f306 	lsr.w	r3, r2, r6
 80004fa:	40f1      	lsrs	r1, r6
 80004fc:	431f      	orrs	r7, r3
 80004fe:	e9c5 7100 	strd	r7, r1, [r5]
 8000502:	2600      	movs	r6, #0
 8000504:	4631      	mov	r1, r6
 8000506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800050a:	f1c2 0320 	rsb	r3, r2, #32
 800050e:	40d8      	lsrs	r0, r3
 8000510:	fa0c fc02 	lsl.w	ip, ip, r2
 8000514:	fa21 f303 	lsr.w	r3, r1, r3
 8000518:	4091      	lsls	r1, r2
 800051a:	4301      	orrs	r1, r0
 800051c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000520:	fa1f fe8c 	uxth.w	lr, ip
 8000524:	fbb3 f0f7 	udiv	r0, r3, r7
 8000528:	fb07 3610 	mls	r6, r7, r0, r3
 800052c:	0c0b      	lsrs	r3, r1, #16
 800052e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000532:	fb00 f60e 	mul.w	r6, r0, lr
 8000536:	429e      	cmp	r6, r3
 8000538:	fa04 f402 	lsl.w	r4, r4, r2
 800053c:	d908      	bls.n	8000550 <__udivmoddi4+0x260>
 800053e:	eb1c 0303 	adds.w	r3, ip, r3
 8000542:	f100 38ff 	add.w	r8, r0, #4294967295
 8000546:	d22f      	bcs.n	80005a8 <__udivmoddi4+0x2b8>
 8000548:	429e      	cmp	r6, r3
 800054a:	d92d      	bls.n	80005a8 <__udivmoddi4+0x2b8>
 800054c:	3802      	subs	r0, #2
 800054e:	4463      	add	r3, ip
 8000550:	1b9b      	subs	r3, r3, r6
 8000552:	b289      	uxth	r1, r1
 8000554:	fbb3 f6f7 	udiv	r6, r3, r7
 8000558:	fb07 3316 	mls	r3, r7, r6, r3
 800055c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000560:	fb06 f30e 	mul.w	r3, r6, lr
 8000564:	428b      	cmp	r3, r1
 8000566:	d908      	bls.n	800057a <__udivmoddi4+0x28a>
 8000568:	eb1c 0101 	adds.w	r1, ip, r1
 800056c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000570:	d216      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000572:	428b      	cmp	r3, r1
 8000574:	d914      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000576:	3e02      	subs	r6, #2
 8000578:	4461      	add	r1, ip
 800057a:	1ac9      	subs	r1, r1, r3
 800057c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000580:	e738      	b.n	80003f4 <__udivmoddi4+0x104>
 8000582:	462e      	mov	r6, r5
 8000584:	4628      	mov	r0, r5
 8000586:	e705      	b.n	8000394 <__udivmoddi4+0xa4>
 8000588:	4606      	mov	r6, r0
 800058a:	e6e3      	b.n	8000354 <__udivmoddi4+0x64>
 800058c:	4618      	mov	r0, r3
 800058e:	e6f8      	b.n	8000382 <__udivmoddi4+0x92>
 8000590:	454b      	cmp	r3, r9
 8000592:	d2a9      	bcs.n	80004e8 <__udivmoddi4+0x1f8>
 8000594:	ebb9 0802 	subs.w	r8, r9, r2
 8000598:	eb64 0e0c 	sbc.w	lr, r4, ip
 800059c:	3801      	subs	r0, #1
 800059e:	e7a3      	b.n	80004e8 <__udivmoddi4+0x1f8>
 80005a0:	4646      	mov	r6, r8
 80005a2:	e7ea      	b.n	800057a <__udivmoddi4+0x28a>
 80005a4:	4620      	mov	r0, r4
 80005a6:	e794      	b.n	80004d2 <__udivmoddi4+0x1e2>
 80005a8:	4640      	mov	r0, r8
 80005aa:	e7d1      	b.n	8000550 <__udivmoddi4+0x260>
 80005ac:	46d0      	mov	r8, sl
 80005ae:	e77b      	b.n	80004a8 <__udivmoddi4+0x1b8>
 80005b0:	3b02      	subs	r3, #2
 80005b2:	4461      	add	r1, ip
 80005b4:	e732      	b.n	800041c <__udivmoddi4+0x12c>
 80005b6:	4630      	mov	r0, r6
 80005b8:	e709      	b.n	80003ce <__udivmoddi4+0xde>
 80005ba:	4464      	add	r4, ip
 80005bc:	3802      	subs	r0, #2
 80005be:	e742      	b.n	8000446 <__udivmoddi4+0x156>

080005c0 <__aeabi_idiv0>:
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop

080005c4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b08a      	sub	sp, #40	; 0x28
 80005c8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ca:	f107 0314 	add.w	r3, r7, #20
 80005ce:	2200      	movs	r2, #0
 80005d0:	601a      	str	r2, [r3, #0]
 80005d2:	605a      	str	r2, [r3, #4]
 80005d4:	609a      	str	r2, [r3, #8]
 80005d6:	60da      	str	r2, [r3, #12]
 80005d8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005da:	2300      	movs	r3, #0
 80005dc:	613b      	str	r3, [r7, #16]
 80005de:	4b2e      	ldr	r3, [pc, #184]	; (8000698 <MX_GPIO_Init+0xd4>)
 80005e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005e2:	4a2d      	ldr	r2, [pc, #180]	; (8000698 <MX_GPIO_Init+0xd4>)
 80005e4:	f043 0304 	orr.w	r3, r3, #4
 80005e8:	6313      	str	r3, [r2, #48]	; 0x30
 80005ea:	4b2b      	ldr	r3, [pc, #172]	; (8000698 <MX_GPIO_Init+0xd4>)
 80005ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ee:	f003 0304 	and.w	r3, r3, #4
 80005f2:	613b      	str	r3, [r7, #16]
 80005f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80005f6:	2300      	movs	r3, #0
 80005f8:	60fb      	str	r3, [r7, #12]
 80005fa:	4b27      	ldr	r3, [pc, #156]	; (8000698 <MX_GPIO_Init+0xd4>)
 80005fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fe:	4a26      	ldr	r2, [pc, #152]	; (8000698 <MX_GPIO_Init+0xd4>)
 8000600:	f043 0308 	orr.w	r3, r3, #8
 8000604:	6313      	str	r3, [r2, #48]	; 0x30
 8000606:	4b24      	ldr	r3, [pc, #144]	; (8000698 <MX_GPIO_Init+0xd4>)
 8000608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060a:	f003 0308 	and.w	r3, r3, #8
 800060e:	60fb      	str	r3, [r7, #12]
 8000610:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000612:	2300      	movs	r3, #0
 8000614:	60bb      	str	r3, [r7, #8]
 8000616:	4b20      	ldr	r3, [pc, #128]	; (8000698 <MX_GPIO_Init+0xd4>)
 8000618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800061a:	4a1f      	ldr	r2, [pc, #124]	; (8000698 <MX_GPIO_Init+0xd4>)
 800061c:	f043 0301 	orr.w	r3, r3, #1
 8000620:	6313      	str	r3, [r2, #48]	; 0x30
 8000622:	4b1d      	ldr	r3, [pc, #116]	; (8000698 <MX_GPIO_Init+0xd4>)
 8000624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000626:	f003 0301 	and.w	r3, r3, #1
 800062a:	60bb      	str	r3, [r7, #8]
 800062c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800062e:	2300      	movs	r3, #0
 8000630:	607b      	str	r3, [r7, #4]
 8000632:	4b19      	ldr	r3, [pc, #100]	; (8000698 <MX_GPIO_Init+0xd4>)
 8000634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000636:	4a18      	ldr	r2, [pc, #96]	; (8000698 <MX_GPIO_Init+0xd4>)
 8000638:	f043 0302 	orr.w	r3, r3, #2
 800063c:	6313      	str	r3, [r2, #48]	; 0x30
 800063e:	4b16      	ldr	r3, [pc, #88]	; (8000698 <MX_GPIO_Init+0xd4>)
 8000640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000642:	f003 0302 	and.w	r3, r3, #2
 8000646:	607b      	str	r3, [r7, #4]
 8000648:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD1_Pin|LD2_Pin|LD3_Pin, GPIO_PIN_RESET);
 800064a:	2200      	movs	r2, #0
 800064c:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8000650:	4812      	ldr	r0, [pc, #72]	; (800069c <MX_GPIO_Init+0xd8>)
 8000652:	f001 fc65 	bl	8001f20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_Pin;
 8000656:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800065a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800065c:	2300      	movs	r3, #0
 800065e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000660:	2300      	movs	r3, #0
 8000662:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTN_GPIO_Port, &GPIO_InitStruct);
 8000664:	f107 0314 	add.w	r3, r7, #20
 8000668:	4619      	mov	r1, r3
 800066a:	480d      	ldr	r0, [pc, #52]	; (80006a0 <MX_GPIO_Init+0xdc>)
 800066c:	f001 fa94 	bl	8001b98 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD2_Pin|LD3_Pin;
 8000670:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000674:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000676:	2301      	movs	r3, #1
 8000678:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800067a:	2300      	movs	r3, #0
 800067c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800067e:	2300      	movs	r3, #0
 8000680:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000682:	f107 0314 	add.w	r3, r7, #20
 8000686:	4619      	mov	r1, r3
 8000688:	4804      	ldr	r0, [pc, #16]	; (800069c <MX_GPIO_Init+0xd8>)
 800068a:	f001 fa85 	bl	8001b98 <HAL_GPIO_Init>

}
 800068e:	bf00      	nop
 8000690:	3728      	adds	r7, #40	; 0x28
 8000692:	46bd      	mov	sp, r7
 8000694:	bd80      	pop	{r7, pc}
 8000696:	bf00      	nop
 8000698:	40023800 	.word	0x40023800
 800069c:	40020c00 	.word	0x40020c00
 80006a0:	40020800 	.word	0x40020800

080006a4 <set_green_led>:
extern void initialise_monitor_handles(void);

bool flag = true;
bool pred_flag = true;

void set_green_led(bool on) { HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, on ? GPIO_PIN_SET : GPIO_PIN_RESET); }
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b082      	sub	sp, #8
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	4603      	mov	r3, r0
 80006ac:	71fb      	strb	r3, [r7, #7]
 80006ae:	79fb      	ldrb	r3, [r7, #7]
 80006b0:	461a      	mov	r2, r3
 80006b2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006b6:	4803      	ldr	r0, [pc, #12]	; (80006c4 <set_green_led+0x20>)
 80006b8:	f001 fc32 	bl	8001f20 <HAL_GPIO_WritePin>
 80006bc:	bf00      	nop
 80006be:	3708      	adds	r7, #8
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bd80      	pop	{r7, pc}
 80006c4:	40020c00 	.word	0x40020c00

080006c8 <set_yellow_led>:

void set_yellow_led(bool on) { HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, on ? GPIO_PIN_SET : GPIO_PIN_RESET); }
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b082      	sub	sp, #8
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	4603      	mov	r3, r0
 80006d0:	71fb      	strb	r3, [r7, #7]
 80006d2:	79fb      	ldrb	r3, [r7, #7]
 80006d4:	461a      	mov	r2, r3
 80006d6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006da:	4803      	ldr	r0, [pc, #12]	; (80006e8 <set_yellow_led+0x20>)
 80006dc:	f001 fc20 	bl	8001f20 <HAL_GPIO_WritePin>
 80006e0:	bf00      	nop
 80006e2:	3708      	adds	r7, #8
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd80      	pop	{r7, pc}
 80006e8:	40020c00 	.word	0x40020c00

080006ec <set_red_led>:

void set_red_led(bool on) { HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, on ? GPIO_PIN_SET : GPIO_PIN_RESET); }
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b082      	sub	sp, #8
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	4603      	mov	r3, r0
 80006f4:	71fb      	strb	r3, [r7, #7]
 80006f6:	79fb      	ldrb	r3, [r7, #7]
 80006f8:	461a      	mov	r2, r3
 80006fa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80006fe:	4803      	ldr	r0, [pc, #12]	; (800070c <set_red_led+0x20>)
 8000700:	f001 fc0e 	bl	8001f20 <HAL_GPIO_WritePin>
 8000704:	bf00      	nop
 8000706:	3708      	adds	r7, #8
 8000708:	46bd      	mov	sp, r7
 800070a:	bd80      	pop	{r7, pc}
 800070c:	40020c00 	.word	0x40020c00

08000710 <is_btn_clicked>:

uint32_t last_pressed_time = 0;

int is_btn_clicked() {
 8000710:	b580      	push	{r7, lr}
 8000712:	af00      	add	r7, sp, #0
	// GPIO_PIN_RESET means pressed
	if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_15) == GPIO_PIN_RESET && HAL_GetTick() - last_pressed_time > 500) {
 8000714:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000718:	480d      	ldr	r0, [pc, #52]	; (8000750 <is_btn_clicked+0x40>)
 800071a:	f001 fbe9 	bl	8001ef0 <HAL_GPIO_ReadPin>
 800071e:	4603      	mov	r3, r0
 8000720:	2b00      	cmp	r3, #0
 8000722:	d112      	bne.n	800074a <is_btn_clicked+0x3a>
 8000724:	f001 f84a 	bl	80017bc <HAL_GetTick>
 8000728:	4602      	mov	r2, r0
 800072a:	4b0a      	ldr	r3, [pc, #40]	; (8000754 <is_btn_clicked+0x44>)
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	1ad3      	subs	r3, r2, r3
 8000730:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000734:	d909      	bls.n	800074a <is_btn_clicked+0x3a>
		last_pressed_time = HAL_GetTick();
 8000736:	f001 f841 	bl	80017bc <HAL_GetTick>
 800073a:	4603      	mov	r3, r0
 800073c:	4a05      	ldr	r2, [pc, #20]	; (8000754 <is_btn_clicked+0x44>)
 800073e:	6013      	str	r3, [r2, #0]
		printf("Button pressed\n");
 8000740:	4805      	ldr	r0, [pc, #20]	; (8000758 <is_btn_clicked+0x48>)
 8000742:	f004 f913 	bl	800496c <puts>
		return 1;
 8000746:	2301      	movs	r3, #1
 8000748:	e000      	b.n	800074c <is_btn_clicked+0x3c>
	} else return 0;
 800074a:	2300      	movs	r3, #0
}
 800074c:	4618      	mov	r0, r3
 800074e:	bd80      	pop	{r7, pc}
 8000750:	40020800 	.word	0x40020800
 8000754:	200003a8 	.word	0x200003a8
 8000758:	080062b4 	.word	0x080062b4

0800075c <set_no_one_led>:

void set_no_one_led() {
 800075c:	b580      	push	{r7, lr}
 800075e:	af00      	add	r7, sp, #0
	set_green_led(false);
 8000760:	2000      	movs	r0, #0
 8000762:	f7ff ff9f 	bl	80006a4 <set_green_led>
	set_yellow_led(false);
 8000766:	2000      	movs	r0, #0
 8000768:	f7ff ffae 	bl	80006c8 <set_yellow_led>
	set_red_led(false);
 800076c:	2000      	movs	r0, #0
 800076e:	f7ff ffbd 	bl	80006ec <set_red_led>
}
 8000772:	bf00      	nop
 8000774:	bd80      	pop	{r7, pc}
	...

08000778 <garland_modes>:
uint32_t current_led_number = 0;
uint8_t MODES_COUNT = 4;
bool remaining_timeouts_input = false;
uint8_t prev_mode_n = 5;

void garland_modes(void){
 8000778:	b580      	push	{r7, lr}
 800077a:	b082      	sub	sp, #8
 800077c:	af00      	add	r7, sp, #0
			current_time = HAL_GetTick();
 800077e:	f001 f81d 	bl	80017bc <HAL_GetTick>
 8000782:	4603      	mov	r3, r0
 8000784:	4a66      	ldr	r2, [pc, #408]	; (8000920 <garland_modes+0x1a8>)
 8000786:	6013      	str	r3, [r2, #0]

		  	  if (is_btn_clicked()) {
 8000788:	f7ff ffc2 	bl	8000710 <is_btn_clicked>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	d03e      	beq.n	8000810 <garland_modes+0x98>
		  		  pred_led_numbers[current_mode] = current_led_number;
 8000792:	4b64      	ldr	r3, [pc, #400]	; (8000924 <garland_modes+0x1ac>)
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	4a64      	ldr	r2, [pc, #400]	; (8000928 <garland_modes+0x1b0>)
 8000798:	6812      	ldr	r2, [r2, #0]
 800079a:	4964      	ldr	r1, [pc, #400]	; (800092c <garland_modes+0x1b4>)
 800079c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		  		  current_mode = (current_mode + 1) % MODES_COUNT;
 80007a0:	4b60      	ldr	r3, [pc, #384]	; (8000924 <garland_modes+0x1ac>)
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	3301      	adds	r3, #1
 80007a6:	4a62      	ldr	r2, [pc, #392]	; (8000930 <garland_modes+0x1b8>)
 80007a8:	7812      	ldrb	r2, [r2, #0]
 80007aa:	fbb3 f1f2 	udiv	r1, r3, r2
 80007ae:	fb01 f202 	mul.w	r2, r1, r2
 80007b2:	1a9b      	subs	r3, r3, r2
 80007b4:	4a5b      	ldr	r2, [pc, #364]	; (8000924 <garland_modes+0x1ac>)
 80007b6:	6013      	str	r3, [r2, #0]
		  		  current_delay = modes[current_mode].states[pred_led_numbers[current_mode]].timeout;
 80007b8:	4b5a      	ldr	r3, [pc, #360]	; (8000924 <garland_modes+0x1ac>)
 80007ba:	681a      	ldr	r2, [r3, #0]
 80007bc:	4b59      	ldr	r3, [pc, #356]	; (8000924 <garland_modes+0x1ac>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	495a      	ldr	r1, [pc, #360]	; (800092c <garland_modes+0x1b4>)
 80007c2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80007c6:	485b      	ldr	r0, [pc, #364]	; (8000934 <garland_modes+0x1bc>)
 80007c8:	00d9      	lsls	r1, r3, #3
 80007ca:	4613      	mov	r3, r2
 80007cc:	011b      	lsls	r3, r3, #4
 80007ce:	4413      	add	r3, r2
 80007d0:	009b      	lsls	r3, r3, #2
 80007d2:	440b      	add	r3, r1
 80007d4:	4403      	add	r3, r0
 80007d6:	3308      	adds	r3, #8
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	4a57      	ldr	r2, [pc, #348]	; (8000938 <garland_modes+0x1c0>)
 80007dc:	6013      	str	r3, [r2, #0]
		  		  current_led_number = pred_led_numbers[current_mode];
 80007de:	4b51      	ldr	r3, [pc, #324]	; (8000924 <garland_modes+0x1ac>)
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	4a52      	ldr	r2, [pc, #328]	; (800092c <garland_modes+0x1b4>)
 80007e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007e8:	4a4f      	ldr	r2, [pc, #316]	; (8000928 <garland_modes+0x1b0>)
 80007ea:	6013      	str	r3, [r2, #0]

		  		  printf("current_mode - %d\n", current_mode);
 80007ec:	4b4d      	ldr	r3, [pc, #308]	; (8000924 <garland_modes+0x1ac>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	4619      	mov	r1, r3
 80007f2:	4852      	ldr	r0, [pc, #328]	; (800093c <garland_modes+0x1c4>)
 80007f4:	f004 f834 	bl	8004860 <iprintf>
		  		  printf("current_delay - %d\n", current_delay);
 80007f8:	4b4f      	ldr	r3, [pc, #316]	; (8000938 <garland_modes+0x1c0>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	4619      	mov	r1, r3
 80007fe:	4850      	ldr	r0, [pc, #320]	; (8000940 <garland_modes+0x1c8>)
 8000800:	f004 f82e 	bl	8004860 <iprintf>
		  		  printf("current_led_number - %d\n", current_led_number);
 8000804:	4b48      	ldr	r3, [pc, #288]	; (8000928 <garland_modes+0x1b0>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	4619      	mov	r1, r3
 800080a:	484e      	ldr	r0, [pc, #312]	; (8000944 <garland_modes+0x1cc>)
 800080c:	f004 f828 	bl	8004860 <iprintf>
		  	  }

		  	  if (current_time - start_time >= current_delay) {
 8000810:	4b43      	ldr	r3, [pc, #268]	; (8000920 <garland_modes+0x1a8>)
 8000812:	681a      	ldr	r2, [r3, #0]
 8000814:	4b4c      	ldr	r3, [pc, #304]	; (8000948 <garland_modes+0x1d0>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	1ad2      	subs	r2, r2, r3
 800081a:	4b47      	ldr	r3, [pc, #284]	; (8000938 <garland_modes+0x1c0>)
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	429a      	cmp	r2, r3
 8000820:	d37b      	bcc.n	800091a <garland_modes+0x1a2>
		  		  int modes_count = modes[current_mode].light_states_count;
 8000822:	4b40      	ldr	r3, [pc, #256]	; (8000924 <garland_modes+0x1ac>)
 8000824:	681a      	ldr	r2, [r3, #0]
 8000826:	4943      	ldr	r1, [pc, #268]	; (8000934 <garland_modes+0x1bc>)
 8000828:	4613      	mov	r3, r2
 800082a:	011b      	lsls	r3, r3, #4
 800082c:	4413      	add	r3, r2
 800082e:	009b      	lsls	r3, r3, #2
 8000830:	440b      	add	r3, r1
 8000832:	781b      	ldrb	r3, [r3, #0]
 8000834:	607b      	str	r3, [r7, #4]
		  		  if (modes_count <= current_led_number || modes_count < 0) return;
 8000836:	687a      	ldr	r2, [r7, #4]
 8000838:	4b3b      	ldr	r3, [pc, #236]	; (8000928 <garland_modes+0x1b0>)
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	429a      	cmp	r2, r3
 800083e:	d96b      	bls.n	8000918 <garland_modes+0x1a0>
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	2b00      	cmp	r3, #0
 8000844:	db68      	blt.n	8000918 <garland_modes+0x1a0>
		  		  if (modes[current_mode].states[current_led_number].color == LED_NO_ONE) {
 8000846:	4b37      	ldr	r3, [pc, #220]	; (8000924 <garland_modes+0x1ac>)
 8000848:	681a      	ldr	r2, [r3, #0]
 800084a:	4b37      	ldr	r3, [pc, #220]	; (8000928 <garland_modes+0x1b0>)
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	4839      	ldr	r0, [pc, #228]	; (8000934 <garland_modes+0x1bc>)
 8000850:	00d9      	lsls	r1, r3, #3
 8000852:	4613      	mov	r3, r2
 8000854:	011b      	lsls	r3, r3, #4
 8000856:	4413      	add	r3, r2
 8000858:	009b      	lsls	r3, r3, #2
 800085a:	440b      	add	r3, r1
 800085c:	4403      	add	r3, r0
 800085e:	3304      	adds	r3, #4
 8000860:	781b      	ldrb	r3, [r3, #0]
 8000862:	2b00      	cmp	r3, #0
 8000864:	d102      	bne.n	800086c <garland_modes+0xf4>
		  				 set_no_one_led();
 8000866:	f7ff ff79 	bl	800075c <set_no_one_led>
 800086a:	e03c      	b.n	80008e6 <garland_modes+0x16e>
		  		  }
		  		  else if (modes[current_mode].states[current_led_number].color == LED_RED) {
 800086c:	4b2d      	ldr	r3, [pc, #180]	; (8000924 <garland_modes+0x1ac>)
 800086e:	681a      	ldr	r2, [r3, #0]
 8000870:	4b2d      	ldr	r3, [pc, #180]	; (8000928 <garland_modes+0x1b0>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	482f      	ldr	r0, [pc, #188]	; (8000934 <garland_modes+0x1bc>)
 8000876:	00d9      	lsls	r1, r3, #3
 8000878:	4613      	mov	r3, r2
 800087a:	011b      	lsls	r3, r3, #4
 800087c:	4413      	add	r3, r2
 800087e:	009b      	lsls	r3, r3, #2
 8000880:	440b      	add	r3, r1
 8000882:	4403      	add	r3, r0
 8000884:	3304      	adds	r3, #4
 8000886:	781b      	ldrb	r3, [r3, #0]
 8000888:	2b01      	cmp	r3, #1
 800088a:	d109      	bne.n	80008a0 <garland_modes+0x128>
		  			  	 set_green_led(false);
 800088c:	2000      	movs	r0, #0
 800088e:	f7ff ff09 	bl	80006a4 <set_green_led>
		  			  	 set_yellow_led(false);
 8000892:	2000      	movs	r0, #0
 8000894:	f7ff ff18 	bl	80006c8 <set_yellow_led>
		  				 set_red_led(true);
 8000898:	2001      	movs	r0, #1
 800089a:	f7ff ff27 	bl	80006ec <set_red_led>
 800089e:	e022      	b.n	80008e6 <garland_modes+0x16e>
		  		  }
		  		  else if (modes[current_mode].states[current_led_number].color == LED_GREEN) {
 80008a0:	4b20      	ldr	r3, [pc, #128]	; (8000924 <garland_modes+0x1ac>)
 80008a2:	681a      	ldr	r2, [r3, #0]
 80008a4:	4b20      	ldr	r3, [pc, #128]	; (8000928 <garland_modes+0x1b0>)
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	4822      	ldr	r0, [pc, #136]	; (8000934 <garland_modes+0x1bc>)
 80008aa:	00d9      	lsls	r1, r3, #3
 80008ac:	4613      	mov	r3, r2
 80008ae:	011b      	lsls	r3, r3, #4
 80008b0:	4413      	add	r3, r2
 80008b2:	009b      	lsls	r3, r3, #2
 80008b4:	440b      	add	r3, r1
 80008b6:	4403      	add	r3, r0
 80008b8:	3304      	adds	r3, #4
 80008ba:	781b      	ldrb	r3, [r3, #0]
 80008bc:	2b02      	cmp	r3, #2
 80008be:	d109      	bne.n	80008d4 <garland_modes+0x15c>
		  			  	 set_red_led(false);
 80008c0:	2000      	movs	r0, #0
 80008c2:	f7ff ff13 	bl	80006ec <set_red_led>
		  			  	 set_yellow_led(false);
 80008c6:	2000      	movs	r0, #0
 80008c8:	f7ff fefe 	bl	80006c8 <set_yellow_led>
		  				 set_green_led(true);
 80008cc:	2001      	movs	r0, #1
 80008ce:	f7ff fee9 	bl	80006a4 <set_green_led>
 80008d2:	e008      	b.n	80008e6 <garland_modes+0x16e>
		  		  }
		  		  else {
		  			  	 set_red_led(false);
 80008d4:	2000      	movs	r0, #0
 80008d6:	f7ff ff09 	bl	80006ec <set_red_led>
		  			  	 set_green_led(false);
 80008da:	2000      	movs	r0, #0
 80008dc:	f7ff fee2 	bl	80006a4 <set_green_led>
		  				 set_yellow_led(true);
 80008e0:	2001      	movs	r0, #1
 80008e2:	f7ff fef1 	bl	80006c8 <set_yellow_led>
		  		  }
		  		  current_led_number = (current_led_number + 1) % modes[current_mode].light_states_count;
 80008e6:	4b10      	ldr	r3, [pc, #64]	; (8000928 <garland_modes+0x1b0>)
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	1c5a      	adds	r2, r3, #1
 80008ec:	4b0d      	ldr	r3, [pc, #52]	; (8000924 <garland_modes+0x1ac>)
 80008ee:	6819      	ldr	r1, [r3, #0]
 80008f0:	4810      	ldr	r0, [pc, #64]	; (8000934 <garland_modes+0x1bc>)
 80008f2:	460b      	mov	r3, r1
 80008f4:	011b      	lsls	r3, r3, #4
 80008f6:	440b      	add	r3, r1
 80008f8:	009b      	lsls	r3, r3, #2
 80008fa:	4403      	add	r3, r0
 80008fc:	781b      	ldrb	r3, [r3, #0]
 80008fe:	fbb2 f1f3 	udiv	r1, r2, r3
 8000902:	fb01 f303 	mul.w	r3, r1, r3
 8000906:	1ad3      	subs	r3, r2, r3
 8000908:	4a07      	ldr	r2, [pc, #28]	; (8000928 <garland_modes+0x1b0>)
 800090a:	6013      	str	r3, [r2, #0]
		  		  start_time = HAL_GetTick();
 800090c:	f000 ff56 	bl	80017bc <HAL_GetTick>
 8000910:	4603      	mov	r3, r0
 8000912:	4a0d      	ldr	r2, [pc, #52]	; (8000948 <garland_modes+0x1d0>)
 8000914:	6013      	str	r3, [r2, #0]
 8000916:	e000      	b.n	800091a <garland_modes+0x1a2>
		  		  if (modes_count <= current_led_number || modes_count < 0) return;
 8000918:	bf00      	nop
		  	  }
}
 800091a:	3708      	adds	r7, #8
 800091c:	46bd      	mov	sp, r7
 800091e:	bd80      	pop	{r7, pc}
 8000920:	20000414 	.word	0x20000414
 8000924:	2000041c 	.word	0x2000041c
 8000928:	20000420 	.word	0x20000420
 800092c:	200003f0 	.word	0x200003f0
 8000930:	20000224 	.word	0x20000224
 8000934:	20000004 	.word	0x20000004
 8000938:	20000418 	.word	0x20000418
 800093c:	080062c4 	.word	0x080062c4
 8000940:	080062d8 	.word	0x080062d8
 8000944:	080062ec 	.word	0x080062ec
 8000948:	20000410 	.word	0x20000410

0800094c <buf_init>:
};
typedef struct RingBuffer RingBuffer;
static RingBuffer buf_transmit;
static RingBuffer buf_receive;

static void buf_init(RingBuffer *buf) {
 800094c:	b480      	push	{r7}
 800094e:	b083      	sub	sp, #12
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
  buf->head = 0;
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	2200      	movs	r2, #0
 8000958:	f883 2400 	strb.w	r2, [r3, #1024]	; 0x400
  buf->tail = 0;
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	2200      	movs	r2, #0
 8000960:	f883 2401 	strb.w	r2, [r3, #1025]	; 0x401
  buf->empty = true;
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	2201      	movs	r2, #1
 8000968:	f883 2402 	strb.w	r2, [r3, #1026]	; 0x402
}
 800096c:	bf00      	nop
 800096e:	370c      	adds	r7, #12
 8000970:	46bd      	mov	sp, r7
 8000972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000976:	4770      	bx	lr

08000978 <buf_push>:

static void buf_push(RingBuffer* buf, char* el) {
 8000978:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800097c:	b084      	sub	sp, #16
 800097e:	af00      	add	r7, sp, #0
 8000980:	6078      	str	r0, [r7, #4]
 8000982:	6039      	str	r1, [r7, #0]
	pred_flag = flag;
 8000984:	4b23      	ldr	r3, [pc, #140]	; (8000a14 <buf_push+0x9c>)
 8000986:	781a      	ldrb	r2, [r3, #0]
 8000988:	4b23      	ldr	r3, [pc, #140]	; (8000a18 <buf_push+0xa0>)
 800098a:	701a      	strb	r2, [r3, #0]
	flag = false;
 800098c:	4b21      	ldr	r3, [pc, #132]	; (8000a14 <buf_push+0x9c>)
 800098e:	2200      	movs	r2, #0
 8000990:	701a      	strb	r2, [r3, #0]
	  uint64_t size = strlen(el);
 8000992:	6838      	ldr	r0, [r7, #0]
 8000994:	f7ff fc36 	bl	8000204 <strlen>
 8000998:	4603      	mov	r3, r0
 800099a:	2200      	movs	r2, #0
 800099c:	469a      	mov	sl, r3
 800099e:	4693      	mov	fp, r2
 80009a0:	e9c7 ab02 	strd	sl, fp, [r7, #8]
	  if (buf->head + size > BUF_SIZE) {
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	f893 3400 	ldrb.w	r3, [r3, #1024]	; 0x400
 80009aa:	b2db      	uxtb	r3, r3
 80009ac:	2200      	movs	r2, #0
 80009ae:	4698      	mov	r8, r3
 80009b0:	4691      	mov	r9, r2
 80009b2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80009b6:	eb18 0402 	adds.w	r4, r8, r2
 80009ba:	eb49 0503 	adc.w	r5, r9, r3
 80009be:	f240 4301 	movw	r3, #1025	; 0x401
 80009c2:	429c      	cmp	r4, r3
 80009c4:	f175 0300 	sbcs.w	r3, r5, #0
 80009c8:	d303      	bcc.n	80009d2 <buf_push+0x5a>
	    buf->head = 0;
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	2200      	movs	r2, #0
 80009ce:	f883 2400 	strb.w	r2, [r3, #1024]	; 0x400
	  }

	  strcpy(&buf->data[buf->head], el);
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	f893 3400 	ldrb.w	r3, [r3, #1024]	; 0x400
 80009d8:	461a      	mov	r2, r3
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	4413      	add	r3, r2
 80009de:	6839      	ldr	r1, [r7, #0]
 80009e0:	4618      	mov	r0, r3
 80009e2:	f004 f86c 	bl	8004abe <strcpy>
	  buf->head += size;
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	f893 2400 	ldrb.w	r2, [r3, #1024]	; 0x400
 80009ec:	7a3b      	ldrb	r3, [r7, #8]
 80009ee:	4413      	add	r3, r2
 80009f0:	b2da      	uxtb	r2, r3
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	f883 2400 	strb.w	r2, [r3, #1024]	; 0x400

	  if (buf->head == BUF_SIZE) {
	    buf->head = 0;
	  }

	  buf->empty = false;
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	2200      	movs	r2, #0
 80009fc:	f883 2402 	strb.w	r2, [r3, #1026]	; 0x402
	flag = pred_flag;
 8000a00:	4b05      	ldr	r3, [pc, #20]	; (8000a18 <buf_push+0xa0>)
 8000a02:	781a      	ldrb	r2, [r3, #0]
 8000a04:	4b03      	ldr	r3, [pc, #12]	; (8000a14 <buf_push+0x9c>)
 8000a06:	701a      	strb	r2, [r3, #0]
}
 8000a08:	bf00      	nop
 8000a0a:	3710      	adds	r7, #16
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8000a12:	bf00      	nop
 8000a14:	20000000 	.word	0x20000000
 8000a18:	20000001 	.word	0x20000001

08000a1c <buf_pop>:


static bool buf_pop(RingBuffer *buf, /* out */ char *el) {
 8000a1c:	b5b0      	push	{r4, r5, r7, lr}
 8000a1e:	b084      	sub	sp, #16
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
 8000a24:	6039      	str	r1, [r7, #0]
	pred_flag = flag;
 8000a26:	4b22      	ldr	r3, [pc, #136]	; (8000ab0 <buf_pop+0x94>)
 8000a28:	781a      	ldrb	r2, [r3, #0]
 8000a2a:	4b22      	ldr	r3, [pc, #136]	; (8000ab4 <buf_pop+0x98>)
 8000a2c:	701a      	strb	r2, [r3, #0]
		flag = false;
 8000a2e:	4b20      	ldr	r3, [pc, #128]	; (8000ab0 <buf_pop+0x94>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	701a      	strb	r2, [r3, #0]
  if (buf->empty) {
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	f893 3402 	ldrb.w	r3, [r3, #1026]	; 0x402
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d001      	beq.n	8000a42 <buf_pop+0x26>
    return false;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	e032      	b.n	8000aa8 <buf_pop+0x8c>
  }
  uint64_t size = strlen(&buf->data[buf->tail]);
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	f893 3401 	ldrb.w	r3, [r3, #1025]	; 0x401
 8000a48:	461a      	mov	r2, r3
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	4413      	add	r3, r2
 8000a4e:	4618      	mov	r0, r3
 8000a50:	f7ff fbd8 	bl	8000204 <strlen>
 8000a54:	4603      	mov	r3, r0
 8000a56:	2200      	movs	r2, #0
 8000a58:	461c      	mov	r4, r3
 8000a5a:	4615      	mov	r5, r2
 8000a5c:	e9c7 4502 	strd	r4, r5, [r7, #8]

  strcpy(el, &buf->data[buf->tail]);
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	f893 3401 	ldrb.w	r3, [r3, #1025]	; 0x401
 8000a66:	461a      	mov	r2, r3
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	4413      	add	r3, r2
 8000a6c:	4619      	mov	r1, r3
 8000a6e:	6838      	ldr	r0, [r7, #0]
 8000a70:	f004 f825 	bl	8004abe <strcpy>
  buf->tail += size;
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	f893 2401 	ldrb.w	r2, [r3, #1025]	; 0x401
 8000a7a:	7a3b      	ldrb	r3, [r7, #8]
 8000a7c:	4413      	add	r3, r2
 8000a7e:	b2da      	uxtb	r2, r3
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	f883 2401 	strb.w	r2, [r3, #1025]	; 0x401
 // TODO: почему \0?
  if (buf->tail == BUF_SIZE) {
    buf->tail = 0;
  }

  if (buf->tail == buf->head) {
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	f893 2401 	ldrb.w	r2, [r3, #1025]	; 0x401
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	f893 3400 	ldrb.w	r3, [r3, #1024]	; 0x400
 8000a92:	429a      	cmp	r2, r3
 8000a94:	d103      	bne.n	8000a9e <buf_pop+0x82>
    buf->empty = true;
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	2201      	movs	r2, #1
 8000a9a:	f883 2402 	strb.w	r2, [r3, #1026]	; 0x402
  }
  flag = pred_flag;
 8000a9e:	4b05      	ldr	r3, [pc, #20]	; (8000ab4 <buf_pop+0x98>)
 8000aa0:	781a      	ldrb	r2, [r3, #0]
 8000aa2:	4b03      	ldr	r3, [pc, #12]	; (8000ab0 <buf_pop+0x94>)
 8000aa4:	701a      	strb	r2, [r3, #0]

  return true;
 8000aa6:	2301      	movs	r3, #1
}
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	3710      	adds	r7, #16
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bdb0      	pop	{r4, r5, r7, pc}
 8000ab0:	20000000 	.word	0x20000000
 8000ab4:	20000001 	.word	0x20000001

08000ab8 <enable_interrupt>:
    uint32_t pmask;
};
typedef struct InterruptStatus InterruptStatus;
static InterruptStatus interrupt_status;

void enable_interrupt(InterruptStatus* status) {
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b082      	sub	sp, #8
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
	HAL_UART_Abort(&huart6);
 8000ac0:	4807      	ldr	r0, [pc, #28]	; (8000ae0 <enable_interrupt+0x28>)
 8000ac2:	f002 f895 	bl	8002bf0 <HAL_UART_Abort>
	HAL_UART_Abort_IT(&huart6);
 8000ac6:	4806      	ldr	r0, [pc, #24]	; (8000ae0 <enable_interrupt+0x28>)
 8000ac8:	f002 f97e 	bl	8002dc8 <HAL_UART_Abort_IT>
	HAL_NVIC_EnableIRQ(USART6_IRQn);
 8000acc:	2047      	movs	r0, #71	; 0x47
 8000ace:	f000 ff9c 	bl	8001a0a <HAL_NVIC_EnableIRQ>
	status->interrupt_enable = true;
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	2201      	movs	r2, #1
 8000ad6:	701a      	strb	r2, [r3, #0]
}
 8000ad8:	bf00      	nop
 8000ada:	3708      	adds	r7, #8
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bd80      	pop	{r7, pc}
 8000ae0:	20000c40 	.word	0x20000c40

08000ae4 <disable_interrupt>:

void disable_interrupt(InterruptStatus* status) {
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b082      	sub	sp, #8
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
	HAL_UART_Abort(&huart6);
 8000aec:	4807      	ldr	r0, [pc, #28]	; (8000b0c <disable_interrupt+0x28>)
 8000aee:	f002 f87f 	bl	8002bf0 <HAL_UART_Abort>
	HAL_UART_Abort_IT(&huart6);
 8000af2:	4806      	ldr	r0, [pc, #24]	; (8000b0c <disable_interrupt+0x28>)
 8000af4:	f002 f968 	bl	8002dc8 <HAL_UART_Abort_IT>
	HAL_NVIC_DisableIRQ(USART6_IRQn);
 8000af8:	2047      	movs	r0, #71	; 0x47
 8000afa:	f000 ff94 	bl	8001a26 <HAL_NVIC_DisableIRQ>
	status->interrupt_enable = false;
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	2200      	movs	r2, #0
 8000b02:	701a      	strb	r2, [r3, #0]
}
 8000b04:	bf00      	nop
 8000b06:	3708      	adds	r7, #8
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	20000c40 	.word	0x20000c40

08000b10 <transmit_uart>:

bool transmit_busy = false;

void transmit_uart(InterruptStatus* status, char* buf, size_t siz) {
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b084      	sub	sp, #16
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	60f8      	str	r0, [r7, #12]
 8000b18:	60b9      	str	r1, [r7, #8]
 8000b1a:	607a      	str	r2, [r7, #4]
	if (status->interrupt_enable) {
 8000b1c:	68fb      	ldr	r3, [r7, #12]
 8000b1e:	781b      	ldrb	r3, [r3, #0]
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d013      	beq.n	8000b4c <transmit_uart+0x3c>
		if (transmit_busy) {
 8000b24:	4b14      	ldr	r3, [pc, #80]	; (8000b78 <transmit_uart+0x68>)
 8000b26:	781b      	ldrb	r3, [r3, #0]
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d004      	beq.n	8000b36 <transmit_uart+0x26>
			buf_push(&buf_transmit, buf);
 8000b2c:	68b9      	ldr	r1, [r7, #8]
 8000b2e:	4813      	ldr	r0, [pc, #76]	; (8000b7c <transmit_uart+0x6c>)
 8000b30:	f7ff ff22 	bl	8000978 <buf_push>
		pred_flag = flag;
			flag = false;
		HAL_UART_Transmit(&huart6, buf, siz, 100);
		flag = pred_flag;
	}
}
 8000b34:	e01c      	b.n	8000b70 <transmit_uart+0x60>
			transmit_busy = true;
 8000b36:	4b10      	ldr	r3, [pc, #64]	; (8000b78 <transmit_uart+0x68>)
 8000b38:	2201      	movs	r2, #1
 8000b3a:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit_IT(&huart6, buf, siz);
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	b29b      	uxth	r3, r3
 8000b40:	461a      	mov	r2, r3
 8000b42:	68b9      	ldr	r1, [r7, #8]
 8000b44:	480e      	ldr	r0, [pc, #56]	; (8000b80 <transmit_uart+0x70>)
 8000b46:	f001 ffde 	bl	8002b06 <HAL_UART_Transmit_IT>
}
 8000b4a:	e011      	b.n	8000b70 <transmit_uart+0x60>
		pred_flag = flag;
 8000b4c:	4b0d      	ldr	r3, [pc, #52]	; (8000b84 <transmit_uart+0x74>)
 8000b4e:	781a      	ldrb	r2, [r3, #0]
 8000b50:	4b0d      	ldr	r3, [pc, #52]	; (8000b88 <transmit_uart+0x78>)
 8000b52:	701a      	strb	r2, [r3, #0]
			flag = false;
 8000b54:	4b0b      	ldr	r3, [pc, #44]	; (8000b84 <transmit_uart+0x74>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&huart6, buf, siz, 100);
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	b29a      	uxth	r2, r3
 8000b5e:	2364      	movs	r3, #100	; 0x64
 8000b60:	68b9      	ldr	r1, [r7, #8]
 8000b62:	4807      	ldr	r0, [pc, #28]	; (8000b80 <transmit_uart+0x70>)
 8000b64:	f001 fe9b 	bl	800289e <HAL_UART_Transmit>
		flag = pred_flag;
 8000b68:	4b07      	ldr	r3, [pc, #28]	; (8000b88 <transmit_uart+0x78>)
 8000b6a:	781a      	ldrb	r2, [r3, #0]
 8000b6c:	4b05      	ldr	r3, [pc, #20]	; (8000b84 <transmit_uart+0x74>)
 8000b6e:	701a      	strb	r2, [r3, #0]
}
 8000b70:	bf00      	nop
 8000b72:	3710      	adds	r7, #16
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bd80      	pop	{r7, pc}
 8000b78:	20000c38 	.word	0x20000c38
 8000b7c:	20000428 	.word	0x20000428
 8000b80:	20000c40 	.word	0x20000c40
 8000b84:	20000000 	.word	0x20000000
 8000b88:	20000001 	.word	0x20000001

08000b8c <receive_uart>:

char el;
bool pred_it = false;

void receive_uart(InterruptStatus* status) {
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b084      	sub	sp, #16
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
	if (status->interrupt_enable) {
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	781b      	ldrb	r3, [r3, #0]
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d005      	beq.n	8000ba8 <receive_uart+0x1c>
		HAL_UART_Receive_IT(&huart6, (uint8_t*) &el, sizeof(char));
 8000b9c:	2201      	movs	r2, #1
 8000b9e:	4920      	ldr	r1, [pc, #128]	; (8000c20 <receive_uart+0x94>)
 8000ba0:	4820      	ldr	r0, [pc, #128]	; (8000c24 <receive_uart+0x98>)
 8000ba2:	f001 fff5 	bl	8002b90 <HAL_UART_Receive_IT>
 8000ba6:	e037      	b.n	8000c18 <receive_uart+0x8c>
	}
	else {
		HAL_StatusTypeDef stat = HAL_UART_Receive(&huart6, &el, sizeof(char), 0);
 8000ba8:	2300      	movs	r3, #0
 8000baa:	2201      	movs	r2, #1
 8000bac:	491c      	ldr	r1, [pc, #112]	; (8000c20 <receive_uart+0x94>)
 8000bae:	481d      	ldr	r0, [pc, #116]	; (8000c24 <receive_uart+0x98>)
 8000bb0:	f001 ff07 	bl	80029c2 <HAL_UART_Receive>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	73fb      	strb	r3, [r7, #15]
		 switch (stat) {
 8000bb8:	7bfb      	ldrb	r3, [r7, #15]
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d005      	beq.n	8000bca <receive_uart+0x3e>
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	db2a      	blt.n	8000c18 <receive_uart+0x8c>
 8000bc2:	3b01      	subs	r3, #1
 8000bc4:	2b02      	cmp	r3, #2
 8000bc6:	d827      	bhi.n	8000c18 <receive_uart+0x8c>
		    break;
		  }
		  case HAL_ERROR:
		  case HAL_BUSY:
		  case HAL_TIMEOUT:
		    return;
 8000bc8:	e026      	b.n	8000c18 <receive_uart+0x8c>
		    if (el != '\r') {
 8000bca:	4b15      	ldr	r3, [pc, #84]	; (8000c20 <receive_uart+0x94>)
 8000bcc:	781b      	ldrb	r3, [r3, #0]
 8000bce:	2b0d      	cmp	r3, #13
 8000bd0:	d009      	beq.n	8000be6 <receive_uart+0x5a>
				buf_push(&buf_receive, &el);
 8000bd2:	4913      	ldr	r1, [pc, #76]	; (8000c20 <receive_uart+0x94>)
 8000bd4:	4814      	ldr	r0, [pc, #80]	; (8000c28 <receive_uart+0x9c>)
 8000bd6:	f7ff fecf 	bl	8000978 <buf_push>
				transmit_uart(&interrupt_status, &el, 1);
 8000bda:	2201      	movs	r2, #1
 8000bdc:	4910      	ldr	r1, [pc, #64]	; (8000c20 <receive_uart+0x94>)
 8000bde:	4813      	ldr	r0, [pc, #76]	; (8000c2c <receive_uart+0xa0>)
 8000be0:	f7ff ff96 	bl	8000b10 <transmit_uart>
		    break;
 8000be4:	e017      	b.n	8000c16 <receive_uart+0x8a>
				pred_flag = flag;
 8000be6:	4b12      	ldr	r3, [pc, #72]	; (8000c30 <receive_uart+0xa4>)
 8000be8:	781a      	ldrb	r2, [r3, #0]
 8000bea:	4b12      	ldr	r3, [pc, #72]	; (8000c34 <receive_uart+0xa8>)
 8000bec:	701a      	strb	r2, [r3, #0]
					flag = false;
 8000bee:	4b10      	ldr	r3, [pc, #64]	; (8000c30 <receive_uart+0xa4>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	701a      	strb	r2, [r3, #0]
					pred_it = status->interrupt_enable;
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	781a      	ldrb	r2, [r3, #0]
 8000bf8:	4b0f      	ldr	r3, [pc, #60]	; (8000c38 <receive_uart+0xac>)
 8000bfa:	701a      	strb	r2, [r3, #0]
				handle_command_line();
 8000bfc:	f000 fa0a 	bl	8001014 <handle_command_line>
				if (transmit_busy) flag = false;
 8000c00:	4b0e      	ldr	r3, [pc, #56]	; (8000c3c <receive_uart+0xb0>)
 8000c02:	781b      	ldrb	r3, [r3, #0]
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d003      	beq.n	8000c10 <receive_uart+0x84>
 8000c08:	4b09      	ldr	r3, [pc, #36]	; (8000c30 <receive_uart+0xa4>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	701a      	strb	r2, [r3, #0]
		    break;
 8000c0e:	e002      	b.n	8000c16 <receive_uart+0x8a>
				else flag = true;
 8000c10:	4b07      	ldr	r3, [pc, #28]	; (8000c30 <receive_uart+0xa4>)
 8000c12:	2201      	movs	r2, #1
 8000c14:	701a      	strb	r2, [r3, #0]
		    break;
 8000c16:	bf00      	nop
		  }
	}
}
 8000c18:	3710      	adds	r7, #16
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	20000c39 	.word	0x20000c39
 8000c24:	20000c40 	.word	0x20000c40
 8000c28:	2000082c 	.word	0x2000082c
 8000c2c:	20000c30 	.word	0x20000c30
 8000c30:	20000000 	.word	0x20000000
 8000c34:	20000001 	.word	0x20000001
 8000c38:	20000c3a 	.word	0x20000c3a
 8000c3c:	20000c38 	.word	0x20000c38

08000c40 <transmit_uart_nl>:

void transmit_uart_nl(const struct InterruptStatus *status, char *buf, size_t size) {
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b084      	sub	sp, #16
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	60f8      	str	r0, [r7, #12]
 8000c48:	60b9      	str	r1, [r7, #8]
 8000c4a:	607a      	str	r2, [r7, #4]
	pred_flag = flag;
 8000c4c:	4b0c      	ldr	r3, [pc, #48]	; (8000c80 <transmit_uart_nl+0x40>)
 8000c4e:	781a      	ldrb	r2, [r3, #0]
 8000c50:	4b0c      	ldr	r3, [pc, #48]	; (8000c84 <transmit_uart_nl+0x44>)
 8000c52:	701a      	strb	r2, [r3, #0]
		flag = false;
 8000c54:	4b0a      	ldr	r3, [pc, #40]	; (8000c80 <transmit_uart_nl+0x40>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	701a      	strb	r2, [r3, #0]
  transmit_uart(status, buf, size);
 8000c5a:	687a      	ldr	r2, [r7, #4]
 8000c5c:	68b9      	ldr	r1, [r7, #8]
 8000c5e:	68f8      	ldr	r0, [r7, #12]
 8000c60:	f7ff ff56 	bl	8000b10 <transmit_uart>
  transmit_uart(status, "\r\n", 2);
 8000c64:	2202      	movs	r2, #2
 8000c66:	4908      	ldr	r1, [pc, #32]	; (8000c88 <transmit_uart_nl+0x48>)
 8000c68:	68f8      	ldr	r0, [r7, #12]
 8000c6a:	f7ff ff51 	bl	8000b10 <transmit_uart>
  flag = pred_flag;
 8000c6e:	4b05      	ldr	r3, [pc, #20]	; (8000c84 <transmit_uart_nl+0x44>)
 8000c70:	781a      	ldrb	r2, [r3, #0]
 8000c72:	4b03      	ldr	r3, [pc, #12]	; (8000c80 <transmit_uart_nl+0x40>)
 8000c74:	701a      	strb	r2, [r3, #0]
}
 8000c76:	bf00      	nop
 8000c78:	3710      	adds	r7, #16
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	20000000 	.word	0x20000000
 8000c84:	20000001 	.word	0x20000001
 8000c88:	08006308 	.word	0x08006308

08000c8c <string_equals>:

bool string_equals(const char * a, const char * b) {
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b082      	sub	sp, #8
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
 8000c94:	6039      	str	r1, [r7, #0]
	return strcmp(a, b) == 0;
 8000c96:	6839      	ldr	r1, [r7, #0]
 8000c98:	6878      	ldr	r0, [r7, #4]
 8000c9a:	f7ff faa9 	bl	80001f0 <strcmp>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	bf0c      	ite	eq
 8000ca4:	2301      	moveq	r3, #1
 8000ca6:	2300      	movne	r3, #0
 8000ca8:	b2db      	uxtb	r3, r3
}
 8000caa:	4618      	mov	r0, r3
 8000cac:	3708      	adds	r7, #8
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}

08000cb2 <starts_with>:

bool starts_with(const char * prefix, const char * str) { return strncmp(prefix, str, strlen(prefix)) == 0; }
 8000cb2:	b580      	push	{r7, lr}
 8000cb4:	b082      	sub	sp, #8
 8000cb6:	af00      	add	r7, sp, #0
 8000cb8:	6078      	str	r0, [r7, #4]
 8000cba:	6039      	str	r1, [r7, #0]
 8000cbc:	6878      	ldr	r0, [r7, #4]
 8000cbe:	f7ff faa1 	bl	8000204 <strlen>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	461a      	mov	r2, r3
 8000cc6:	6839      	ldr	r1, [r7, #0]
 8000cc8:	6878      	ldr	r0, [r7, #4]
 8000cca:	f003 ff00 	bl	8004ace <strncmp>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	bf0c      	ite	eq
 8000cd4:	2301      	moveq	r3, #1
 8000cd6:	2300      	movne	r3, #0
 8000cd8:	b2db      	uxtb	r3, r3
 8000cda:	4618      	mov	r0, r3
 8000cdc:	3708      	adds	r7, #8
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}
	...

08000ce4 <handle_new_command>:
char incorrect_parameters_amount_msg[] = {"Parameters amount must be from 2 to 8"};
char incorrect_led_light_msg[] = {"Incorrect led light parameter. Must be: r, g, y or n"};
char incorrect_timeout_msg[] = {"Incorrect timeout"};
char incorrect_mode_number_msg[] = {"Incorrect mode number"};

void handle_new_command(const char* command) {
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b086      	sub	sp, #24
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
	const char* const pattern = command + 4; // set pointer after 'new '
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	3304      	adds	r3, #4
 8000cf0:	613b      	str	r3, [r7, #16]
	const uint32_t pattern_length = strlen(pattern);
 8000cf2:	6938      	ldr	r0, [r7, #16]
 8000cf4:	f7ff fa86 	bl	8000204 <strlen>
 8000cf8:	60f8      	str	r0, [r7, #12]
	if (pattern_length < 2 || pattern_length > 8) {
 8000cfa:	68fb      	ldr	r3, [r7, #12]
 8000cfc:	2b01      	cmp	r3, #1
 8000cfe:	d902      	bls.n	8000d06 <handle_new_command+0x22>
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	2b08      	cmp	r3, #8
 8000d04:	d905      	bls.n	8000d12 <handle_new_command+0x2e>
		transmit_uart_nl(&interrupt_status, incorrect_parameters_amount_msg, sizeof(incorrect_parameters_amount_msg));
 8000d06:	2226      	movs	r2, #38	; 0x26
 8000d08:	4937      	ldr	r1, [pc, #220]	; (8000de8 <handle_new_command+0x104>)
 8000d0a:	4838      	ldr	r0, [pc, #224]	; (8000dec <handle_new_command+0x108>)
 8000d0c:	f7ff ff98 	bl	8000c40 <transmit_uart_nl>
		return;
 8000d10:	e067      	b.n	8000de2 <handle_new_command+0xfe>
	}
	new_mode.light_states_count = pattern_length;
 8000d12:	68fb      	ldr	r3, [r7, #12]
 8000d14:	b2da      	uxtb	r2, r3
 8000d16:	4b36      	ldr	r3, [pc, #216]	; (8000df0 <handle_new_command+0x10c>)
 8000d18:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < pattern_length; ++i)
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	75fb      	strb	r3, [r7, #23]
 8000d1e:	e054      	b.n	8000dca <handle_new_command+0xe6>
		switch (pattern[i]) {
 8000d20:	7dfb      	ldrb	r3, [r7, #23]
 8000d22:	693a      	ldr	r2, [r7, #16]
 8000d24:	4413      	add	r3, r2
 8000d26:	781b      	ldrb	r3, [r3, #0]
 8000d28:	3b67      	subs	r3, #103	; 0x67
 8000d2a:	2b12      	cmp	r3, #18
 8000d2c:	d844      	bhi.n	8000db8 <handle_new_command+0xd4>
 8000d2e:	a201      	add	r2, pc, #4	; (adr r2, 8000d34 <handle_new_command+0x50>)
 8000d30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d34:	08000d9d 	.word	0x08000d9d
 8000d38:	08000db9 	.word	0x08000db9
 8000d3c:	08000db9 	.word	0x08000db9
 8000d40:	08000db9 	.word	0x08000db9
 8000d44:	08000db9 	.word	0x08000db9
 8000d48:	08000db9 	.word	0x08000db9
 8000d4c:	08000db9 	.word	0x08000db9
 8000d50:	08000d81 	.word	0x08000d81
 8000d54:	08000db9 	.word	0x08000db9
 8000d58:	08000db9 	.word	0x08000db9
 8000d5c:	08000db9 	.word	0x08000db9
 8000d60:	08000d8f 	.word	0x08000d8f
 8000d64:	08000db9 	.word	0x08000db9
 8000d68:	08000db9 	.word	0x08000db9
 8000d6c:	08000db9 	.word	0x08000db9
 8000d70:	08000db9 	.word	0x08000db9
 8000d74:	08000db9 	.word	0x08000db9
 8000d78:	08000db9 	.word	0x08000db9
 8000d7c:	08000dab 	.word	0x08000dab
			case 'n':
				new_mode.states[i].color = LED_NO_ONE;
 8000d80:	7dfb      	ldrb	r3, [r7, #23]
 8000d82:	4a1b      	ldr	r2, [pc, #108]	; (8000df0 <handle_new_command+0x10c>)
 8000d84:	00db      	lsls	r3, r3, #3
 8000d86:	4413      	add	r3, r2
 8000d88:	2200      	movs	r2, #0
 8000d8a:	711a      	strb	r2, [r3, #4]
				break;
 8000d8c:	e01a      	b.n	8000dc4 <handle_new_command+0xe0>
			case 'r':
				new_mode.states[i].color = LED_RED;
 8000d8e:	7dfb      	ldrb	r3, [r7, #23]
 8000d90:	4a17      	ldr	r2, [pc, #92]	; (8000df0 <handle_new_command+0x10c>)
 8000d92:	00db      	lsls	r3, r3, #3
 8000d94:	4413      	add	r3, r2
 8000d96:	2201      	movs	r2, #1
 8000d98:	711a      	strb	r2, [r3, #4]
				break;
 8000d9a:	e013      	b.n	8000dc4 <handle_new_command+0xe0>
			case 'g':
				new_mode.states[i].color = LED_GREEN;
 8000d9c:	7dfb      	ldrb	r3, [r7, #23]
 8000d9e:	4a14      	ldr	r2, [pc, #80]	; (8000df0 <handle_new_command+0x10c>)
 8000da0:	00db      	lsls	r3, r3, #3
 8000da2:	4413      	add	r3, r2
 8000da4:	2202      	movs	r2, #2
 8000da6:	711a      	strb	r2, [r3, #4]
				break;
 8000da8:	e00c      	b.n	8000dc4 <handle_new_command+0xe0>
			case 'y':
				new_mode.states[i].color = LED_YELLOW;
 8000daa:	7dfb      	ldrb	r3, [r7, #23]
 8000dac:	4a10      	ldr	r2, [pc, #64]	; (8000df0 <handle_new_command+0x10c>)
 8000dae:	00db      	lsls	r3, r3, #3
 8000db0:	4413      	add	r3, r2
 8000db2:	2203      	movs	r2, #3
 8000db4:	711a      	strb	r2, [r3, #4]
				break;
 8000db6:	e005      	b.n	8000dc4 <handle_new_command+0xe0>
			default:
				transmit_uart_nl(&interrupt_status, incorrect_led_light_msg, sizeof(incorrect_led_light_msg));
 8000db8:	2235      	movs	r2, #53	; 0x35
 8000dba:	490e      	ldr	r1, [pc, #56]	; (8000df4 <handle_new_command+0x110>)
 8000dbc:	480b      	ldr	r0, [pc, #44]	; (8000dec <handle_new_command+0x108>)
 8000dbe:	f7ff ff3f 	bl	8000c40 <transmit_uart_nl>
				return;
 8000dc2:	e00e      	b.n	8000de2 <handle_new_command+0xfe>
	for (uint8_t i = 0; i < pattern_length; ++i)
 8000dc4:	7dfb      	ldrb	r3, [r7, #23]
 8000dc6:	3301      	adds	r3, #1
 8000dc8:	75fb      	strb	r3, [r7, #23]
 8000dca:	7dfb      	ldrb	r3, [r7, #23]
 8000dcc:	68fa      	ldr	r2, [r7, #12]
 8000dce:	429a      	cmp	r2, r3
 8000dd0:	d8a6      	bhi.n	8000d20 <handle_new_command+0x3c>
		}
	transmit_uart_nl(&interrupt_status, timeout_input_msg, sizeof(timeout_input_msg));
 8000dd2:	222e      	movs	r2, #46	; 0x2e
 8000dd4:	4908      	ldr	r1, [pc, #32]	; (8000df8 <handle_new_command+0x114>)
 8000dd6:	4805      	ldr	r0, [pc, #20]	; (8000dec <handle_new_command+0x108>)
 8000dd8:	f7ff ff32 	bl	8000c40 <transmit_uart_nl>
	remaining_timeouts_input = true;
 8000ddc:	4b07      	ldr	r3, [pc, #28]	; (8000dfc <handle_new_command+0x118>)
 8000dde:	2201      	movs	r2, #1
 8000de0:	701a      	strb	r2, [r3, #0]
}
 8000de2:	3718      	adds	r7, #24
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bd80      	pop	{r7, pc}
 8000de8:	20000288 	.word	0x20000288
 8000dec:	20000c30 	.word	0x20000c30
 8000df0:	200003ac 	.word	0x200003ac
 8000df4:	200002b0 	.word	0x200002b0
 8000df8:	20000248 	.word	0x20000248
 8000dfc:	20000424 	.word	0x20000424

08000e00 <handle_new_command_timeout>:

void handle_new_command_timeout(const char* command) {
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b086      	sub	sp, #24
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
	uint32_t timeout;
	uint8_t index;
	if (sscanf(command, "%lu", &timeout) != 1) {
 8000e08:	f107 0310 	add.w	r3, r7, #16
 8000e0c:	461a      	mov	r2, r3
 8000e0e:	4940      	ldr	r1, [pc, #256]	; (8000f10 <handle_new_command_timeout+0x110>)
 8000e10:	6878      	ldr	r0, [r7, #4]
 8000e12:	f003 fde3 	bl	80049dc <siscanf>
 8000e16:	4603      	mov	r3, r0
 8000e18:	2b01      	cmp	r3, #1
 8000e1a:	d005      	beq.n	8000e28 <handle_new_command_timeout+0x28>
		transmit_uart_nl(&interrupt_status, incorrect_timeout_msg, sizeof(incorrect_timeout_msg));
 8000e1c:	2212      	movs	r2, #18
 8000e1e:	493d      	ldr	r1, [pc, #244]	; (8000f14 <handle_new_command_timeout+0x114>)
 8000e20:	483d      	ldr	r0, [pc, #244]	; (8000f18 <handle_new_command_timeout+0x118>)
 8000e22:	f7ff ff0d 	bl	8000c40 <transmit_uart_nl>
		return;
 8000e26:	e070      	b.n	8000f0a <handle_new_command_timeout+0x10a>
	}
	if (timeout != 100 && timeout != 500 && timeout != 1500) {
 8000e28:	693b      	ldr	r3, [r7, #16]
 8000e2a:	2b64      	cmp	r3, #100	; 0x64
 8000e2c:	d00e      	beq.n	8000e4c <handle_new_command_timeout+0x4c>
 8000e2e:	693b      	ldr	r3, [r7, #16]
 8000e30:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000e34:	d00a      	beq.n	8000e4c <handle_new_command_timeout+0x4c>
 8000e36:	693b      	ldr	r3, [r7, #16]
 8000e38:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8000e3c:	4293      	cmp	r3, r2
 8000e3e:	d005      	beq.n	8000e4c <handle_new_command_timeout+0x4c>
		transmit_uart_nl(&interrupt_status, incorrect_timeout_msg, sizeof(incorrect_timeout_msg));
 8000e40:	2212      	movs	r2, #18
 8000e42:	4934      	ldr	r1, [pc, #208]	; (8000f14 <handle_new_command_timeout+0x114>)
 8000e44:	4834      	ldr	r0, [pc, #208]	; (8000f18 <handle_new_command_timeout+0x118>)
 8000e46:	f7ff fefb 	bl	8000c40 <transmit_uart_nl>
		return;
 8000e4a:	e05e      	b.n	8000f0a <handle_new_command_timeout+0x10a>
	}
	for (uint8_t i = 0; i < new_mode.light_states_count; i++) {
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	75bb      	strb	r3, [r7, #22]
 8000e50:	e008      	b.n	8000e64 <handle_new_command_timeout+0x64>
		new_mode.states[i].timeout = timeout;
 8000e52:	7dbb      	ldrb	r3, [r7, #22]
 8000e54:	693a      	ldr	r2, [r7, #16]
 8000e56:	4931      	ldr	r1, [pc, #196]	; (8000f1c <handle_new_command_timeout+0x11c>)
 8000e58:	00db      	lsls	r3, r3, #3
 8000e5a:	440b      	add	r3, r1
 8000e5c:	609a      	str	r2, [r3, #8]
	for (uint8_t i = 0; i < new_mode.light_states_count; i++) {
 8000e5e:	7dbb      	ldrb	r3, [r7, #22]
 8000e60:	3301      	adds	r3, #1
 8000e62:	75bb      	strb	r3, [r7, #22]
 8000e64:	4b2d      	ldr	r3, [pc, #180]	; (8000f1c <handle_new_command_timeout+0x11c>)
 8000e66:	781b      	ldrb	r3, [r3, #0]
 8000e68:	7dba      	ldrb	r2, [r7, #22]
 8000e6a:	429a      	cmp	r2, r3
 8000e6c:	d3f1      	bcc.n	8000e52 <handle_new_command_timeout+0x52>
	}
	if (MODES_COUNT == 8) {
 8000e6e:	4b2c      	ldr	r3, [pc, #176]	; (8000f20 <handle_new_command_timeout+0x120>)
 8000e70:	781b      	ldrb	r3, [r3, #0]
 8000e72:	2b08      	cmp	r3, #8
 8000e74:	d120      	bne.n	8000eb8 <handle_new_command_timeout+0xb8>
		memcpy(modes + prev_mode_n, &(new_mode), sizeof(new_mode));
 8000e76:	4b2b      	ldr	r3, [pc, #172]	; (8000f24 <handle_new_command_timeout+0x124>)
 8000e78:	781b      	ldrb	r3, [r3, #0]
 8000e7a:	461a      	mov	r2, r3
 8000e7c:	4613      	mov	r3, r2
 8000e7e:	011b      	lsls	r3, r3, #4
 8000e80:	4413      	add	r3, r2
 8000e82:	009b      	lsls	r3, r3, #2
 8000e84:	461a      	mov	r2, r3
 8000e86:	4b28      	ldr	r3, [pc, #160]	; (8000f28 <handle_new_command_timeout+0x128>)
 8000e88:	4413      	add	r3, r2
 8000e8a:	2244      	movs	r2, #68	; 0x44
 8000e8c:	4923      	ldr	r1, [pc, #140]	; (8000f1c <handle_new_command_timeout+0x11c>)
 8000e8e:	4618      	mov	r0, r3
 8000e90:	f003 fc3b 	bl	800470a <memcpy>
		index = prev_mode_n;
 8000e94:	4b23      	ldr	r3, [pc, #140]	; (8000f24 <handle_new_command_timeout+0x124>)
 8000e96:	781b      	ldrb	r3, [r3, #0]
 8000e98:	75fb      	strb	r3, [r7, #23]
		if(prev_mode_n < 8){
 8000e9a:	4b22      	ldr	r3, [pc, #136]	; (8000f24 <handle_new_command_timeout+0x124>)
 8000e9c:	781b      	ldrb	r3, [r3, #0]
 8000e9e:	2b07      	cmp	r3, #7
 8000ea0:	d806      	bhi.n	8000eb0 <handle_new_command_timeout+0xb0>
			prev_mode_n++;
 8000ea2:	4b20      	ldr	r3, [pc, #128]	; (8000f24 <handle_new_command_timeout+0x124>)
 8000ea4:	781b      	ldrb	r3, [r3, #0]
 8000ea6:	3301      	adds	r3, #1
 8000ea8:	b2da      	uxtb	r2, r3
 8000eaa:	4b1e      	ldr	r3, [pc, #120]	; (8000f24 <handle_new_command_timeout+0x124>)
 8000eac:	701a      	strb	r2, [r3, #0]
 8000eae:	e01b      	b.n	8000ee8 <handle_new_command_timeout+0xe8>
		}
		else{
			prev_mode_n = 5;
 8000eb0:	4b1c      	ldr	r3, [pc, #112]	; (8000f24 <handle_new_command_timeout+0x124>)
 8000eb2:	2205      	movs	r2, #5
 8000eb4:	701a      	strb	r2, [r3, #0]
 8000eb6:	e017      	b.n	8000ee8 <handle_new_command_timeout+0xe8>
		}
	}
	else {
		memcpy(modes + MODES_COUNT, &(new_mode), sizeof(new_mode));
 8000eb8:	4b19      	ldr	r3, [pc, #100]	; (8000f20 <handle_new_command_timeout+0x120>)
 8000eba:	781b      	ldrb	r3, [r3, #0]
 8000ebc:	461a      	mov	r2, r3
 8000ebe:	4613      	mov	r3, r2
 8000ec0:	011b      	lsls	r3, r3, #4
 8000ec2:	4413      	add	r3, r2
 8000ec4:	009b      	lsls	r3, r3, #2
 8000ec6:	461a      	mov	r2, r3
 8000ec8:	4b17      	ldr	r3, [pc, #92]	; (8000f28 <handle_new_command_timeout+0x128>)
 8000eca:	4413      	add	r3, r2
 8000ecc:	2244      	movs	r2, #68	; 0x44
 8000ece:	4913      	ldr	r1, [pc, #76]	; (8000f1c <handle_new_command_timeout+0x11c>)
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	f003 fc1a 	bl	800470a <memcpy>
		index = MODES_COUNT;
 8000ed6:	4b12      	ldr	r3, [pc, #72]	; (8000f20 <handle_new_command_timeout+0x120>)
 8000ed8:	781b      	ldrb	r3, [r3, #0]
 8000eda:	75fb      	strb	r3, [r7, #23]
		MODES_COUNT++;
 8000edc:	4b10      	ldr	r3, [pc, #64]	; (8000f20 <handle_new_command_timeout+0x120>)
 8000ede:	781b      	ldrb	r3, [r3, #0]
 8000ee0:	3301      	adds	r3, #1
 8000ee2:	b2da      	uxtb	r2, r3
 8000ee4:	4b0e      	ldr	r3, [pc, #56]	; (8000f20 <handle_new_command_timeout+0x120>)
 8000ee6:	701a      	strb	r2, [r3, #0]
	}
	char ind_str[1];
	sprintf(ind_str, "%u", index);
 8000ee8:	7dfa      	ldrb	r2, [r7, #23]
 8000eea:	f107 030c 	add.w	r3, r7, #12
 8000eee:	490f      	ldr	r1, [pc, #60]	; (8000f2c <handle_new_command_timeout+0x12c>)
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	f003 fd53 	bl	800499c <siprintf>
	transmit_uart_nl(&interrupt_status, ind_str, sizeof(ind_str));
 8000ef6:	f107 030c 	add.w	r3, r7, #12
 8000efa:	2201      	movs	r2, #1
 8000efc:	4619      	mov	r1, r3
 8000efe:	4806      	ldr	r0, [pc, #24]	; (8000f18 <handle_new_command_timeout+0x118>)
 8000f00:	f7ff fe9e 	bl	8000c40 <transmit_uart_nl>
	remaining_timeouts_input = false;
 8000f04:	4b0a      	ldr	r3, [pc, #40]	; (8000f30 <handle_new_command_timeout+0x130>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	701a      	strb	r2, [r3, #0]
}
 8000f0a:	3718      	adds	r7, #24
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}
 8000f10:	0800630c 	.word	0x0800630c
 8000f14:	200002e8 	.word	0x200002e8
 8000f18:	20000c30 	.word	0x20000c30
 8000f1c:	200003ac 	.word	0x200003ac
 8000f20:	20000224 	.word	0x20000224
 8000f24:	20000225 	.word	0x20000225
 8000f28:	20000004 	.word	0x20000004
 8000f2c:	08006310 	.word	0x08006310
 8000f30:	20000424 	.word	0x20000424

08000f34 <set_active_mode>:

void set_active_mode(uint8_t mode_number) {
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b082      	sub	sp, #8
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	71fb      	strb	r3, [r7, #7]
	if (mode_number < MODES_COUNT && mode_number >= 0) {
 8000f3e:	4b28      	ldr	r3, [pc, #160]	; (8000fe0 <set_active_mode+0xac>)
 8000f40:	781b      	ldrb	r3, [r3, #0]
 8000f42:	79fa      	ldrb	r2, [r7, #7]
 8000f44:	429a      	cmp	r2, r3
 8000f46:	d241      	bcs.n	8000fcc <set_active_mode+0x98>
		//чтобы менять переменные
		pred_flag = flag;
 8000f48:	4b26      	ldr	r3, [pc, #152]	; (8000fe4 <set_active_mode+0xb0>)
 8000f4a:	781a      	ldrb	r2, [r3, #0]
 8000f4c:	4b26      	ldr	r3, [pc, #152]	; (8000fe8 <set_active_mode+0xb4>)
 8000f4e:	701a      	strb	r2, [r3, #0]
		flag = false;
 8000f50:	4b24      	ldr	r3, [pc, #144]	; (8000fe4 <set_active_mode+0xb0>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	701a      	strb	r2, [r3, #0]
		pred_led_numbers[current_mode] = current_led_number;
 8000f56:	4b25      	ldr	r3, [pc, #148]	; (8000fec <set_active_mode+0xb8>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	4a25      	ldr	r2, [pc, #148]	; (8000ff0 <set_active_mode+0xbc>)
 8000f5c:	6812      	ldr	r2, [r2, #0]
 8000f5e:	4925      	ldr	r1, [pc, #148]	; (8000ff4 <set_active_mode+0xc0>)
 8000f60:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		current_mode = mode_number;
 8000f64:	79fb      	ldrb	r3, [r7, #7]
 8000f66:	4a21      	ldr	r2, [pc, #132]	; (8000fec <set_active_mode+0xb8>)
 8000f68:	6013      	str	r3, [r2, #0]
		current_delay = modes[current_mode].states[pred_led_numbers[current_mode]].timeout;
 8000f6a:	4b20      	ldr	r3, [pc, #128]	; (8000fec <set_active_mode+0xb8>)
 8000f6c:	681a      	ldr	r2, [r3, #0]
 8000f6e:	4b1f      	ldr	r3, [pc, #124]	; (8000fec <set_active_mode+0xb8>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	4920      	ldr	r1, [pc, #128]	; (8000ff4 <set_active_mode+0xc0>)
 8000f74:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000f78:	481f      	ldr	r0, [pc, #124]	; (8000ff8 <set_active_mode+0xc4>)
 8000f7a:	00d9      	lsls	r1, r3, #3
 8000f7c:	4613      	mov	r3, r2
 8000f7e:	011b      	lsls	r3, r3, #4
 8000f80:	4413      	add	r3, r2
 8000f82:	009b      	lsls	r3, r3, #2
 8000f84:	440b      	add	r3, r1
 8000f86:	4403      	add	r3, r0
 8000f88:	3308      	adds	r3, #8
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	4a1b      	ldr	r2, [pc, #108]	; (8000ffc <set_active_mode+0xc8>)
 8000f8e:	6013      	str	r3, [r2, #0]
		current_led_number = pred_led_numbers[current_mode];
 8000f90:	4b16      	ldr	r3, [pc, #88]	; (8000fec <set_active_mode+0xb8>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	4a17      	ldr	r2, [pc, #92]	; (8000ff4 <set_active_mode+0xc0>)
 8000f96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f9a:	4a15      	ldr	r2, [pc, #84]	; (8000ff0 <set_active_mode+0xbc>)
 8000f9c:	6013      	str	r3, [r2, #0]

		printf("current_mode - %d\n", current_mode);
 8000f9e:	4b13      	ldr	r3, [pc, #76]	; (8000fec <set_active_mode+0xb8>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	4619      	mov	r1, r3
 8000fa4:	4816      	ldr	r0, [pc, #88]	; (8001000 <set_active_mode+0xcc>)
 8000fa6:	f003 fc5b 	bl	8004860 <iprintf>
		printf("current_delay - %d\n", current_delay);
 8000faa:	4b14      	ldr	r3, [pc, #80]	; (8000ffc <set_active_mode+0xc8>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	4619      	mov	r1, r3
 8000fb0:	4814      	ldr	r0, [pc, #80]	; (8001004 <set_active_mode+0xd0>)
 8000fb2:	f003 fc55 	bl	8004860 <iprintf>
		printf("current_led_number - %d\n", current_led_number);
 8000fb6:	4b0e      	ldr	r3, [pc, #56]	; (8000ff0 <set_active_mode+0xbc>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	4619      	mov	r1, r3
 8000fbc:	4812      	ldr	r0, [pc, #72]	; (8001008 <set_active_mode+0xd4>)
 8000fbe:	f003 fc4f 	bl	8004860 <iprintf>
		flag = pred_flag;
 8000fc2:	4b09      	ldr	r3, [pc, #36]	; (8000fe8 <set_active_mode+0xb4>)
 8000fc4:	781a      	ldrb	r2, [r3, #0]
 8000fc6:	4b07      	ldr	r3, [pc, #28]	; (8000fe4 <set_active_mode+0xb0>)
 8000fc8:	701a      	strb	r2, [r3, #0]
	}
	else {
		transmit_uart_nl(&interrupt_status, incorrect_mode_number_msg, sizeof(incorrect_mode_number_msg));
	}
}
 8000fca:	e004      	b.n	8000fd6 <set_active_mode+0xa2>
		transmit_uart_nl(&interrupt_status, incorrect_mode_number_msg, sizeof(incorrect_mode_number_msg));
 8000fcc:	2216      	movs	r2, #22
 8000fce:	490f      	ldr	r1, [pc, #60]	; (800100c <set_active_mode+0xd8>)
 8000fd0:	480f      	ldr	r0, [pc, #60]	; (8001010 <set_active_mode+0xdc>)
 8000fd2:	f7ff fe35 	bl	8000c40 <transmit_uart_nl>
}
 8000fd6:	bf00      	nop
 8000fd8:	3708      	adds	r7, #8
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	20000224 	.word	0x20000224
 8000fe4:	20000000 	.word	0x20000000
 8000fe8:	20000001 	.word	0x20000001
 8000fec:	2000041c 	.word	0x2000041c
 8000ff0:	20000420 	.word	0x20000420
 8000ff4:	200003f0 	.word	0x200003f0
 8000ff8:	20000004 	.word	0x20000004
 8000ffc:	20000418 	.word	0x20000418
 8001000:	080062c4 	.word	0x080062c4
 8001004:	080062d8 	.word	0x080062d8
 8001008:	080062ec 	.word	0x080062ec
 800100c:	200002fc 	.word	0x200002fc
 8001010:	20000c30 	.word	0x20000c30

08001014 <handle_command_line>:

void handle_command_line() {
 8001014:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001018:	b084      	sub	sp, #16
 800101a:	af00      	add	r7, sp, #0
 800101c:	466b      	mov	r3, sp
 800101e:	469a      	mov	sl, r3
	//чтобы после переключения из прерываний в по опросу он не зависал в ресиве пока все не допереключали
	pred_flag = flag;
 8001020:	4b5e      	ldr	r3, [pc, #376]	; (800119c <handle_command_line+0x188>)
 8001022:	781a      	ldrb	r2, [r3, #0]
 8001024:	4b5e      	ldr	r3, [pc, #376]	; (80011a0 <handle_command_line+0x18c>)
 8001026:	701a      	strb	r2, [r3, #0]
	flag = false;
 8001028:	4b5c      	ldr	r3, [pc, #368]	; (800119c <handle_command_line+0x188>)
 800102a:	2200      	movs	r2, #0
 800102c:	701a      	strb	r2, [r3, #0]
	printf("handle command\n");
 800102e:	485d      	ldr	r0, [pc, #372]	; (80011a4 <handle_command_line+0x190>)
 8001030:	f003 fc9c 	bl	800496c <puts>
	char command[buf_receive.head + 1];
 8001034:	4b5c      	ldr	r3, [pc, #368]	; (80011a8 <handle_command_line+0x194>)
 8001036:	f893 3400 	ldrb.w	r3, [r3, #1024]	; 0x400
 800103a:	1c5e      	adds	r6, r3, #1
 800103c:	1e73      	subs	r3, r6, #1
 800103e:	60fb      	str	r3, [r7, #12]
 8001040:	4632      	mov	r2, r6
 8001042:	2300      	movs	r3, #0
 8001044:	4690      	mov	r8, r2
 8001046:	4699      	mov	r9, r3
 8001048:	f04f 0200 	mov.w	r2, #0
 800104c:	f04f 0300 	mov.w	r3, #0
 8001050:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001054:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001058:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800105c:	4632      	mov	r2, r6
 800105e:	2300      	movs	r3, #0
 8001060:	4614      	mov	r4, r2
 8001062:	461d      	mov	r5, r3
 8001064:	f04f 0200 	mov.w	r2, #0
 8001068:	f04f 0300 	mov.w	r3, #0
 800106c:	00eb      	lsls	r3, r5, #3
 800106e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001072:	00e2      	lsls	r2, r4, #3
 8001074:	4633      	mov	r3, r6
 8001076:	3307      	adds	r3, #7
 8001078:	08db      	lsrs	r3, r3, #3
 800107a:	00db      	lsls	r3, r3, #3
 800107c:	ebad 0d03 	sub.w	sp, sp, r3
 8001080:	466b      	mov	r3, sp
 8001082:	3300      	adds	r3, #0
 8001084:	60bb      	str	r3, [r7, #8]
	buf_pop(&buf_receive, command);
 8001086:	68b9      	ldr	r1, [r7, #8]
 8001088:	4847      	ldr	r0, [pc, #284]	; (80011a8 <handle_command_line+0x194>)
 800108a:	f7ff fcc7 	bl	8000a1c <buf_pop>
	command[sizeof(command) - 1] = '\0';
 800108e:	4633      	mov	r3, r6
 8001090:	3b01      	subs	r3, #1
 8001092:	68ba      	ldr	r2, [r7, #8]
 8001094:	2100      	movs	r1, #0
 8001096:	54d1      	strb	r1, [r2, r3]
	printf("%s\n", command);
 8001098:	68b8      	ldr	r0, [r7, #8]
 800109a:	f003 fc67 	bl	800496c <puts>

	if (string_equals("set interrupts on", command)) {
 800109e:	68b9      	ldr	r1, [r7, #8]
 80010a0:	4842      	ldr	r0, [pc, #264]	; (80011ac <handle_command_line+0x198>)
 80010a2:	f7ff fdf3 	bl	8000c8c <string_equals>
 80010a6:	4603      	mov	r3, r0
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d00d      	beq.n	80010c8 <handle_command_line+0xb4>
		enable_interrupt(&interrupt_status);
 80010ac:	4840      	ldr	r0, [pc, #256]	; (80011b0 <handle_command_line+0x19c>)
 80010ae:	f7ff fd03 	bl	8000ab8 <enable_interrupt>
		transmit_uart(&interrupt_status, "\n", 1);
 80010b2:	2201      	movs	r2, #1
 80010b4:	493f      	ldr	r1, [pc, #252]	; (80011b4 <handle_command_line+0x1a0>)
 80010b6:	483e      	ldr	r0, [pc, #248]	; (80011b0 <handle_command_line+0x19c>)
 80010b8:	f7ff fd2a 	bl	8000b10 <transmit_uart>
		transmit_uart_nl(&interrupt_status, interrupt_enabled_msg, sizeof(interrupt_enabled_msg));
 80010bc:	220e      	movs	r2, #14
 80010be:	493e      	ldr	r1, [pc, #248]	; (80011b8 <handle_command_line+0x1a4>)
 80010c0:	483b      	ldr	r0, [pc, #236]	; (80011b0 <handle_command_line+0x19c>)
 80010c2:	f7ff fdbd 	bl	8000c40 <transmit_uart_nl>
 80010c6:	e05f      	b.n	8001188 <handle_command_line+0x174>
	}
	else if (string_equals("set interrupts off", command)) {
 80010c8:	68b9      	ldr	r1, [r7, #8]
 80010ca:	483c      	ldr	r0, [pc, #240]	; (80011bc <handle_command_line+0x1a8>)
 80010cc:	f7ff fdde 	bl	8000c8c <string_equals>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d00d      	beq.n	80010f2 <handle_command_line+0xde>
		disable_interrupt(&interrupt_status);
 80010d6:	4836      	ldr	r0, [pc, #216]	; (80011b0 <handle_command_line+0x19c>)
 80010d8:	f7ff fd04 	bl	8000ae4 <disable_interrupt>
		transmit_uart(&interrupt_status, "\n", 1);
 80010dc:	2201      	movs	r2, #1
 80010de:	4935      	ldr	r1, [pc, #212]	; (80011b4 <handle_command_line+0x1a0>)
 80010e0:	4833      	ldr	r0, [pc, #204]	; (80011b0 <handle_command_line+0x19c>)
 80010e2:	f7ff fd15 	bl	8000b10 <transmit_uart>
		transmit_uart_nl(&interrupt_status, interrupt_disabled_msg, sizeof(interrupt_disabled_msg));
 80010e6:	220f      	movs	r2, #15
 80010e8:	4935      	ldr	r1, [pc, #212]	; (80011c0 <handle_command_line+0x1ac>)
 80010ea:	4831      	ldr	r0, [pc, #196]	; (80011b0 <handle_command_line+0x19c>)
 80010ec:	f7ff fda8 	bl	8000c40 <transmit_uart_nl>
 80010f0:	e04a      	b.n	8001188 <handle_command_line+0x174>
	}
	else if (starts_with("set ", command)) {
 80010f2:	68b9      	ldr	r1, [r7, #8]
 80010f4:	4833      	ldr	r0, [pc, #204]	; (80011c4 <handle_command_line+0x1b0>)
 80010f6:	f7ff fddc 	bl	8000cb2 <starts_with>
 80010fa:	4603      	mov	r3, r0
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d01c      	beq.n	800113a <handle_command_line+0x126>
		transmit_uart(&interrupt_status, "\n", 1);
 8001100:	2201      	movs	r2, #1
 8001102:	492c      	ldr	r1, [pc, #176]	; (80011b4 <handle_command_line+0x1a0>)
 8001104:	482a      	ldr	r0, [pc, #168]	; (80011b0 <handle_command_line+0x19c>)
 8001106:	f7ff fd03 	bl	8000b10 <transmit_uart>
		const char* const mode_idx_str = command + 4;
 800110a:	68bb      	ldr	r3, [r7, #8]
 800110c:	3304      	adds	r3, #4
 800110e:	607b      	str	r3, [r7, #4]
		uint32_t mode_idx;
		if ((sscanf(mode_idx_str, "%lu", &mode_idx) == 1)) {
 8001110:	463b      	mov	r3, r7
 8001112:	461a      	mov	r2, r3
 8001114:	492c      	ldr	r1, [pc, #176]	; (80011c8 <handle_command_line+0x1b4>)
 8001116:	6878      	ldr	r0, [r7, #4]
 8001118:	f003 fc60 	bl	80049dc <siscanf>
 800111c:	4603      	mov	r3, r0
 800111e:	2b01      	cmp	r3, #1
 8001120:	d105      	bne.n	800112e <handle_command_line+0x11a>
			set_active_mode(mode_idx);
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	b2db      	uxtb	r3, r3
 8001126:	4618      	mov	r0, r3
 8001128:	f7ff ff04 	bl	8000f34 <set_active_mode>
 800112c:	e02c      	b.n	8001188 <handle_command_line+0x174>
		}
		else {
			transmit_uart_nl(&interrupt_status, incorrect_mode_number_msg, sizeof(incorrect_mode_number_msg));
 800112e:	2216      	movs	r2, #22
 8001130:	4926      	ldr	r1, [pc, #152]	; (80011cc <handle_command_line+0x1b8>)
 8001132:	481f      	ldr	r0, [pc, #124]	; (80011b0 <handle_command_line+0x19c>)
 8001134:	f7ff fd84 	bl	8000c40 <transmit_uart_nl>
 8001138:	e026      	b.n	8001188 <handle_command_line+0x174>
		}
	}
	else if (starts_with("new ", command)) {
 800113a:	68b9      	ldr	r1, [r7, #8]
 800113c:	4824      	ldr	r0, [pc, #144]	; (80011d0 <handle_command_line+0x1bc>)
 800113e:	f7ff fdb8 	bl	8000cb2 <starts_with>
 8001142:	4603      	mov	r3, r0
 8001144:	2b00      	cmp	r3, #0
 8001146:	d008      	beq.n	800115a <handle_command_line+0x146>
		transmit_uart(&interrupt_status, "\n", 1);
 8001148:	2201      	movs	r2, #1
 800114a:	491a      	ldr	r1, [pc, #104]	; (80011b4 <handle_command_line+0x1a0>)
 800114c:	4818      	ldr	r0, [pc, #96]	; (80011b0 <handle_command_line+0x19c>)
 800114e:	f7ff fcdf 	bl	8000b10 <transmit_uart>
		handle_new_command(command);
 8001152:	68b8      	ldr	r0, [r7, #8]
 8001154:	f7ff fdc6 	bl	8000ce4 <handle_new_command>
 8001158:	e016      	b.n	8001188 <handle_command_line+0x174>
	}
	else if (remaining_timeouts_input) {
 800115a:	4b1e      	ldr	r3, [pc, #120]	; (80011d4 <handle_command_line+0x1c0>)
 800115c:	781b      	ldrb	r3, [r3, #0]
 800115e:	2b00      	cmp	r3, #0
 8001160:	d008      	beq.n	8001174 <handle_command_line+0x160>
		transmit_uart(&interrupt_status, "\n", 1);
 8001162:	2201      	movs	r2, #1
 8001164:	4913      	ldr	r1, [pc, #76]	; (80011b4 <handle_command_line+0x1a0>)
 8001166:	4812      	ldr	r0, [pc, #72]	; (80011b0 <handle_command_line+0x19c>)
 8001168:	f7ff fcd2 	bl	8000b10 <transmit_uart>
		handle_new_command_timeout(command);
 800116c:	68b8      	ldr	r0, [r7, #8]
 800116e:	f7ff fe47 	bl	8000e00 <handle_new_command_timeout>
 8001172:	e009      	b.n	8001188 <handle_command_line+0x174>
	}
	else {
		transmit_uart(&interrupt_status, "\n", 1);
 8001174:	2201      	movs	r2, #1
 8001176:	490f      	ldr	r1, [pc, #60]	; (80011b4 <handle_command_line+0x1a0>)
 8001178:	480d      	ldr	r0, [pc, #52]	; (80011b0 <handle_command_line+0x19c>)
 800117a:	f7ff fcc9 	bl	8000b10 <transmit_uart>
		transmit_uart_nl(&interrupt_status, incorrect_command_msg, sizeof(incorrect_command_msg));
 800117e:	2210      	movs	r2, #16
 8001180:	4915      	ldr	r1, [pc, #84]	; (80011d8 <handle_command_line+0x1c4>)
 8001182:	480b      	ldr	r0, [pc, #44]	; (80011b0 <handle_command_line+0x19c>)
 8001184:	f7ff fd5c 	bl	8000c40 <transmit_uart_nl>
	}
	flag = pred_flag;
 8001188:	4b05      	ldr	r3, [pc, #20]	; (80011a0 <handle_command_line+0x18c>)
 800118a:	781a      	ldrb	r2, [r3, #0]
 800118c:	4b03      	ldr	r3, [pc, #12]	; (800119c <handle_command_line+0x188>)
 800118e:	701a      	strb	r2, [r3, #0]
 8001190:	46d5      	mov	sp, sl
}
 8001192:	bf00      	nop
 8001194:	3710      	adds	r7, #16
 8001196:	46bd      	mov	sp, r7
 8001198:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800119c:	20000000 	.word	0x20000000
 80011a0:	20000001 	.word	0x20000001
 80011a4:	08006314 	.word	0x08006314
 80011a8:	2000082c 	.word	0x2000082c
 80011ac:	08006324 	.word	0x08006324
 80011b0:	20000c30 	.word	0x20000c30
 80011b4:	08006338 	.word	0x08006338
 80011b8:	20000228 	.word	0x20000228
 80011bc:	0800633c 	.word	0x0800633c
 80011c0:	20000238 	.word	0x20000238
 80011c4:	08006350 	.word	0x08006350
 80011c8:	0800630c 	.word	0x0800630c
 80011cc:	200002fc 	.word	0x200002fc
 80011d0:	08006358 	.word	0x08006358
 80011d4:	20000424 	.word	0x20000424
 80011d8:	20000278 	.word	0x20000278

080011dc <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80011dc:	b580      	push	{r7, lr}
 80011de:	b082      	sub	sp, #8
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
	pred_flag = flag;
 80011e4:	4b10      	ldr	r3, [pc, #64]	; (8001228 <HAL_UART_RxCpltCallback+0x4c>)
 80011e6:	781a      	ldrb	r2, [r3, #0]
 80011e8:	4b10      	ldr	r3, [pc, #64]	; (800122c <HAL_UART_RxCpltCallback+0x50>)
 80011ea:	701a      	strb	r2, [r3, #0]
		flag = false;
 80011ec:	4b0e      	ldr	r3, [pc, #56]	; (8001228 <HAL_UART_RxCpltCallback+0x4c>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	701a      	strb	r2, [r3, #0]
	if (el != '\r') {
 80011f2:	4b0f      	ldr	r3, [pc, #60]	; (8001230 <HAL_UART_RxCpltCallback+0x54>)
 80011f4:	781b      	ldrb	r3, [r3, #0]
 80011f6:	2b0d      	cmp	r3, #13
 80011f8:	d00d      	beq.n	8001216 <HAL_UART_RxCpltCallback+0x3a>
		buf_push(&buf_receive, &el);
 80011fa:	490d      	ldr	r1, [pc, #52]	; (8001230 <HAL_UART_RxCpltCallback+0x54>)
 80011fc:	480d      	ldr	r0, [pc, #52]	; (8001234 <HAL_UART_RxCpltCallback+0x58>)
 80011fe:	f7ff fbbb 	bl	8000978 <buf_push>
		transmit_uart(&interrupt_status, &el, 1);
 8001202:	2201      	movs	r2, #1
 8001204:	490a      	ldr	r1, [pc, #40]	; (8001230 <HAL_UART_RxCpltCallback+0x54>)
 8001206:	480c      	ldr	r0, [pc, #48]	; (8001238 <HAL_UART_RxCpltCallback+0x5c>)
 8001208:	f7ff fc82 	bl	8000b10 <transmit_uart>
		flag = pred_flag;
 800120c:	4b07      	ldr	r3, [pc, #28]	; (800122c <HAL_UART_RxCpltCallback+0x50>)
 800120e:	781a      	ldrb	r2, [r3, #0]
 8001210:	4b05      	ldr	r3, [pc, #20]	; (8001228 <HAL_UART_RxCpltCallback+0x4c>)
 8001212:	701a      	strb	r2, [r3, #0]
	}
	else {
		handle_command_line();
		flag = true;
	}
}
 8001214:	e004      	b.n	8001220 <HAL_UART_RxCpltCallback+0x44>
		handle_command_line();
 8001216:	f7ff fefd 	bl	8001014 <handle_command_line>
		flag = true;
 800121a:	4b03      	ldr	r3, [pc, #12]	; (8001228 <HAL_UART_RxCpltCallback+0x4c>)
 800121c:	2201      	movs	r2, #1
 800121e:	701a      	strb	r2, [r3, #0]
}
 8001220:	bf00      	nop
 8001222:	3708      	adds	r7, #8
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}
 8001228:	20000000 	.word	0x20000000
 800122c:	20000001 	.word	0x20000001
 8001230:	20000c39 	.word	0x20000c39
 8001234:	2000082c 	.word	0x2000082c
 8001238:	20000c30 	.word	0x20000c30

0800123c <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 800123c:	b580      	push	{r7, lr}
 800123e:	f5ad 6d81 	sub.w	sp, sp, #1032	; 0x408
 8001242:	af00      	add	r7, sp, #0
 8001244:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 8001248:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 800124c:	6018      	str	r0, [r3, #0]
	pred_flag = flag;
 800124e:	4b1b      	ldr	r3, [pc, #108]	; (80012bc <HAL_UART_TxCpltCallback+0x80>)
 8001250:	781a      	ldrb	r2, [r3, #0]
 8001252:	4b1b      	ldr	r3, [pc, #108]	; (80012c0 <HAL_UART_TxCpltCallback+0x84>)
 8001254:	701a      	strb	r2, [r3, #0]
		flag = false;
 8001256:	4b19      	ldr	r3, [pc, #100]	; (80012bc <HAL_UART_TxCpltCallback+0x80>)
 8001258:	2200      	movs	r2, #0
 800125a:	701a      	strb	r2, [r3, #0]
  char buf[1024];
  if (buf_pop(&buf_transmit, buf)) {
 800125c:	f107 0308 	add.w	r3, r7, #8
 8001260:	4619      	mov	r1, r3
 8001262:	4818      	ldr	r0, [pc, #96]	; (80012c4 <HAL_UART_TxCpltCallback+0x88>)
 8001264:	f7ff fbda 	bl	8000a1c <buf_pop>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d01b      	beq.n	80012a6 <HAL_UART_TxCpltCallback+0x6a>
	 printf("%d\n", strlen(buf));
 800126e:	f107 0308 	add.w	r3, r7, #8
 8001272:	4618      	mov	r0, r3
 8001274:	f7fe ffc6 	bl	8000204 <strlen>
 8001278:	4603      	mov	r3, r0
 800127a:	4619      	mov	r1, r3
 800127c:	4812      	ldr	r0, [pc, #72]	; (80012c8 <HAL_UART_TxCpltCallback+0x8c>)
 800127e:	f003 faef 	bl	8004860 <iprintf>
	 HAL_UART_Transmit_IT(&huart6, buf, strlen(buf));
 8001282:	f107 0308 	add.w	r3, r7, #8
 8001286:	4618      	mov	r0, r3
 8001288:	f7fe ffbc 	bl	8000204 <strlen>
 800128c:	4603      	mov	r3, r0
 800128e:	b29a      	uxth	r2, r3
 8001290:	f107 0308 	add.w	r3, r7, #8
 8001294:	4619      	mov	r1, r3
 8001296:	480d      	ldr	r0, [pc, #52]	; (80012cc <HAL_UART_TxCpltCallback+0x90>)
 8001298:	f001 fc35 	bl	8002b06 <HAL_UART_Transmit_IT>
	 flag = pred_flag;
 800129c:	4b08      	ldr	r3, [pc, #32]	; (80012c0 <HAL_UART_TxCpltCallback+0x84>)
 800129e:	781a      	ldrb	r2, [r3, #0]
 80012a0:	4b06      	ldr	r3, [pc, #24]	; (80012bc <HAL_UART_TxCpltCallback+0x80>)
 80012a2:	701a      	strb	r2, [r3, #0]
  } else {
    transmit_busy = false;
    flag = true;
  }

}
 80012a4:	e005      	b.n	80012b2 <HAL_UART_TxCpltCallback+0x76>
    transmit_busy = false;
 80012a6:	4b0a      	ldr	r3, [pc, #40]	; (80012d0 <HAL_UART_TxCpltCallback+0x94>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	701a      	strb	r2, [r3, #0]
    flag = true;
 80012ac:	4b03      	ldr	r3, [pc, #12]	; (80012bc <HAL_UART_TxCpltCallback+0x80>)
 80012ae:	2201      	movs	r2, #1
 80012b0:	701a      	strb	r2, [r3, #0]
}
 80012b2:	bf00      	nop
 80012b4:	f507 6781 	add.w	r7, r7, #1032	; 0x408
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	20000000 	.word	0x20000000
 80012c0:	20000001 	.word	0x20000001
 80012c4:	20000428 	.word	0x20000428
 80012c8:	08006360 	.word	0x08006360
 80012cc:	20000c40 	.word	0x20000c40
 80012d0:	20000c38 	.word	0x20000c38

080012d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  initialise_monitor_handles();
 80012d8:	f003 f878 	bl	80043cc <initialise_monitor_handles>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012dc:	f000 fa08 	bl	80016f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012e0:	f000 f858 	bl	8001394 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012e4:	f7ff f96e 	bl	80005c4 <MX_GPIO_Init>
  MX_USART6_UART_Init();
 80012e8:	f000 f95e 	bl	80015a8 <MX_USART6_UART_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  disable_interrupt(&interrupt_status);
 80012ec:	4821      	ldr	r0, [pc, #132]	; (8001374 <main+0xa0>)
 80012ee:	f7ff fbf9 	bl	8000ae4 <disable_interrupt>
  buf_init(&buf_transmit);
 80012f2:	4821      	ldr	r0, [pc, #132]	; (8001378 <main+0xa4>)
 80012f4:	f7ff fb2a 	bl	800094c <buf_init>
  buf_init(&buf_receive);
 80012f8:	4820      	ldr	r0, [pc, #128]	; (800137c <main+0xa8>)
 80012fa:	f7ff fb27 	bl	800094c <buf_init>

  start_time = HAL_GetTick();
 80012fe:	f000 fa5d 	bl	80017bc <HAL_GetTick>
 8001302:	4603      	mov	r3, r0
 8001304:	4a1e      	ldr	r2, [pc, #120]	; (8001380 <main+0xac>)
 8001306:	6013      	str	r3, [r2, #0]
  current_delay = modes[0].states[0].timeout;
 8001308:	4b1e      	ldr	r3, [pc, #120]	; (8001384 <main+0xb0>)
 800130a:	689b      	ldr	r3, [r3, #8]
 800130c:	4a1e      	ldr	r2, [pc, #120]	; (8001388 <main+0xb4>)
 800130e:	6013      	str	r3, [r2, #0]
  pred_led_numbers[0] = modes[0].light_states_count - 1;
 8001310:	4b1c      	ldr	r3, [pc, #112]	; (8001384 <main+0xb0>)
 8001312:	781b      	ldrb	r3, [r3, #0]
 8001314:	3b01      	subs	r3, #1
 8001316:	461a      	mov	r2, r3
 8001318:	4b1c      	ldr	r3, [pc, #112]	; (800138c <main+0xb8>)
 800131a:	601a      	str	r2, [r3, #0]
  pred_led_numbers[1] = modes[1].light_states_count - 1;
 800131c:	4b19      	ldr	r3, [pc, #100]	; (8001384 <main+0xb0>)
 800131e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001322:	3b01      	subs	r3, #1
 8001324:	461a      	mov	r2, r3
 8001326:	4b19      	ldr	r3, [pc, #100]	; (800138c <main+0xb8>)
 8001328:	605a      	str	r2, [r3, #4]
  pred_led_numbers[2] = modes[2].light_states_count - 1;
 800132a:	4b16      	ldr	r3, [pc, #88]	; (8001384 <main+0xb0>)
 800132c:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8001330:	3b01      	subs	r3, #1
 8001332:	461a      	mov	r2, r3
 8001334:	4b15      	ldr	r3, [pc, #84]	; (800138c <main+0xb8>)
 8001336:	609a      	str	r2, [r3, #8]
  pred_led_numbers[3] = modes[3].light_states_count - 1;
 8001338:	4b12      	ldr	r3, [pc, #72]	; (8001384 <main+0xb0>)
 800133a:	f893 30cc 	ldrb.w	r3, [r3, #204]	; 0xcc
 800133e:	3b01      	subs	r3, #1
 8001340:	461a      	mov	r2, r3
 8001342:	4b12      	ldr	r3, [pc, #72]	; (800138c <main+0xb8>)
 8001344:	60da      	str	r2, [r3, #12]
  pred_led_numbers[4] = 0;
 8001346:	4b11      	ldr	r3, [pc, #68]	; (800138c <main+0xb8>)
 8001348:	2200      	movs	r2, #0
 800134a:	611a      	str	r2, [r3, #16]
  pred_led_numbers[5] = 0;
 800134c:	4b0f      	ldr	r3, [pc, #60]	; (800138c <main+0xb8>)
 800134e:	2200      	movs	r2, #0
 8001350:	615a      	str	r2, [r3, #20]
  pred_led_numbers[6] = 0;
 8001352:	4b0e      	ldr	r3, [pc, #56]	; (800138c <main+0xb8>)
 8001354:	2200      	movs	r2, #0
 8001356:	619a      	str	r2, [r3, #24]
  pred_led_numbers[7] = 0;
 8001358:	4b0c      	ldr	r3, [pc, #48]	; (800138c <main+0xb8>)
 800135a:	2200      	movs	r2, #0
 800135c:	61da      	str	r2, [r3, #28]
  }
  */
  //HAL_UART_Transmit(&huart6, &buf_transmit, 6, 100);
  while (1)
  {
	  garland_modes();
 800135e:	f7ff fa0b 	bl	8000778 <garland_modes>
	  if (flag == true) receive_uart(&interrupt_status);
 8001362:	4b0b      	ldr	r3, [pc, #44]	; (8001390 <main+0xbc>)
 8001364:	781b      	ldrb	r3, [r3, #0]
 8001366:	2b00      	cmp	r3, #0
 8001368:	d0f9      	beq.n	800135e <main+0x8a>
 800136a:	4802      	ldr	r0, [pc, #8]	; (8001374 <main+0xa0>)
 800136c:	f7ff fc0e 	bl	8000b8c <receive_uart>
	  garland_modes();
 8001370:	e7f5      	b.n	800135e <main+0x8a>
 8001372:	bf00      	nop
 8001374:	20000c30 	.word	0x20000c30
 8001378:	20000428 	.word	0x20000428
 800137c:	2000082c 	.word	0x2000082c
 8001380:	20000410 	.word	0x20000410
 8001384:	20000004 	.word	0x20000004
 8001388:	20000418 	.word	0x20000418
 800138c:	200003f0 	.word	0x200003f0
 8001390:	20000000 	.word	0x20000000

08001394 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b094      	sub	sp, #80	; 0x50
 8001398:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800139a:	f107 0320 	add.w	r3, r7, #32
 800139e:	2230      	movs	r2, #48	; 0x30
 80013a0:	2100      	movs	r1, #0
 80013a2:	4618      	mov	r0, r3
 80013a4:	f003 f9bf 	bl	8004726 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013a8:	f107 030c 	add.w	r3, r7, #12
 80013ac:	2200      	movs	r2, #0
 80013ae:	601a      	str	r2, [r3, #0]
 80013b0:	605a      	str	r2, [r3, #4]
 80013b2:	609a      	str	r2, [r3, #8]
 80013b4:	60da      	str	r2, [r3, #12]
 80013b6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80013b8:	2300      	movs	r3, #0
 80013ba:	60bb      	str	r3, [r7, #8]
 80013bc:	4b23      	ldr	r3, [pc, #140]	; (800144c <SystemClock_Config+0xb8>)
 80013be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013c0:	4a22      	ldr	r2, [pc, #136]	; (800144c <SystemClock_Config+0xb8>)
 80013c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013c6:	6413      	str	r3, [r2, #64]	; 0x40
 80013c8:	4b20      	ldr	r3, [pc, #128]	; (800144c <SystemClock_Config+0xb8>)
 80013ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013d0:	60bb      	str	r3, [r7, #8]
 80013d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80013d4:	2300      	movs	r3, #0
 80013d6:	607b      	str	r3, [r7, #4]
 80013d8:	4b1d      	ldr	r3, [pc, #116]	; (8001450 <SystemClock_Config+0xbc>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80013e0:	4a1b      	ldr	r2, [pc, #108]	; (8001450 <SystemClock_Config+0xbc>)
 80013e2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013e6:	6013      	str	r3, [r2, #0]
 80013e8:	4b19      	ldr	r3, [pc, #100]	; (8001450 <SystemClock_Config+0xbc>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80013f0:	607b      	str	r3, [r7, #4]
 80013f2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80013f4:	2302      	movs	r3, #2
 80013f6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013f8:	2301      	movs	r3, #1
 80013fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80013fc:	2310      	movs	r3, #16
 80013fe:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001400:	2300      	movs	r3, #0
 8001402:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001404:	f107 0320 	add.w	r3, r7, #32
 8001408:	4618      	mov	r0, r3
 800140a:	f000 fda3 	bl	8001f54 <HAL_RCC_OscConfig>
 800140e:	4603      	mov	r3, r0
 8001410:	2b00      	cmp	r3, #0
 8001412:	d001      	beq.n	8001418 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8001414:	f000 f81e 	bl	8001454 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001418:	230f      	movs	r3, #15
 800141a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800141c:	2300      	movs	r3, #0
 800141e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001420:	2300      	movs	r3, #0
 8001422:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001424:	2300      	movs	r3, #0
 8001426:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001428:	2300      	movs	r3, #0
 800142a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800142c:	f107 030c 	add.w	r3, r7, #12
 8001430:	2100      	movs	r1, #0
 8001432:	4618      	mov	r0, r3
 8001434:	f001 f806 	bl	8002444 <HAL_RCC_ClockConfig>
 8001438:	4603      	mov	r3, r0
 800143a:	2b00      	cmp	r3, #0
 800143c:	d001      	beq.n	8001442 <SystemClock_Config+0xae>
  {
    Error_Handler();
 800143e:	f000 f809 	bl	8001454 <Error_Handler>
  }
}
 8001442:	bf00      	nop
 8001444:	3750      	adds	r7, #80	; 0x50
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	40023800 	.word	0x40023800
 8001450:	40007000 	.word	0x40007000

08001454 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001454:	b480      	push	{r7}
 8001456:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001458:	b672      	cpsid	i
}
 800145a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800145c:	e7fe      	b.n	800145c <Error_Handler+0x8>
	...

08001460 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001460:	b480      	push	{r7}
 8001462:	b083      	sub	sp, #12
 8001464:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001466:	2300      	movs	r3, #0
 8001468:	607b      	str	r3, [r7, #4]
 800146a:	4b10      	ldr	r3, [pc, #64]	; (80014ac <HAL_MspInit+0x4c>)
 800146c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800146e:	4a0f      	ldr	r2, [pc, #60]	; (80014ac <HAL_MspInit+0x4c>)
 8001470:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001474:	6453      	str	r3, [r2, #68]	; 0x44
 8001476:	4b0d      	ldr	r3, [pc, #52]	; (80014ac <HAL_MspInit+0x4c>)
 8001478:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800147a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800147e:	607b      	str	r3, [r7, #4]
 8001480:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001482:	2300      	movs	r3, #0
 8001484:	603b      	str	r3, [r7, #0]
 8001486:	4b09      	ldr	r3, [pc, #36]	; (80014ac <HAL_MspInit+0x4c>)
 8001488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800148a:	4a08      	ldr	r2, [pc, #32]	; (80014ac <HAL_MspInit+0x4c>)
 800148c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001490:	6413      	str	r3, [r2, #64]	; 0x40
 8001492:	4b06      	ldr	r3, [pc, #24]	; (80014ac <HAL_MspInit+0x4c>)
 8001494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001496:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800149a:	603b      	str	r3, [r7, #0]
 800149c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800149e:	bf00      	nop
 80014a0:	370c      	adds	r7, #12
 80014a2:	46bd      	mov	sp, r7
 80014a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a8:	4770      	bx	lr
 80014aa:	bf00      	nop
 80014ac:	40023800 	.word	0x40023800

080014b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014b0:	b480      	push	{r7}
 80014b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014b4:	e7fe      	b.n	80014b4 <NMI_Handler+0x4>

080014b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014b6:	b480      	push	{r7}
 80014b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014ba:	e7fe      	b.n	80014ba <HardFault_Handler+0x4>

080014bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014bc:	b480      	push	{r7}
 80014be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014c0:	e7fe      	b.n	80014c0 <MemManage_Handler+0x4>

080014c2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014c2:	b480      	push	{r7}
 80014c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014c6:	e7fe      	b.n	80014c6 <BusFault_Handler+0x4>

080014c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014c8:	b480      	push	{r7}
 80014ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014cc:	e7fe      	b.n	80014cc <UsageFault_Handler+0x4>

080014ce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014ce:	b480      	push	{r7}
 80014d0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014d2:	bf00      	nop
 80014d4:	46bd      	mov	sp, r7
 80014d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014da:	4770      	bx	lr

080014dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014dc:	b480      	push	{r7}
 80014de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014e0:	bf00      	nop
 80014e2:	46bd      	mov	sp, r7
 80014e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e8:	4770      	bx	lr

080014ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014ea:	b480      	push	{r7}
 80014ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014ee:	bf00      	nop
 80014f0:	46bd      	mov	sp, r7
 80014f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f6:	4770      	bx	lr

080014f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014fc:	f000 f94a 	bl	8001794 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001500:	bf00      	nop
 8001502:	bd80      	pop	{r7, pc}

08001504 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8001508:	4802      	ldr	r0, [pc, #8]	; (8001514 <USART6_IRQHandler+0x10>)
 800150a:	f001 fd71 	bl	8002ff0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 800150e:	bf00      	nop
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	20000c40 	.word	0x20000c40

08001518 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b086      	sub	sp, #24
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001520:	4a14      	ldr	r2, [pc, #80]	; (8001574 <_sbrk+0x5c>)
 8001522:	4b15      	ldr	r3, [pc, #84]	; (8001578 <_sbrk+0x60>)
 8001524:	1ad3      	subs	r3, r2, r3
 8001526:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001528:	697b      	ldr	r3, [r7, #20]
 800152a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800152c:	4b13      	ldr	r3, [pc, #76]	; (800157c <_sbrk+0x64>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	2b00      	cmp	r3, #0
 8001532:	d102      	bne.n	800153a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001534:	4b11      	ldr	r3, [pc, #68]	; (800157c <_sbrk+0x64>)
 8001536:	4a12      	ldr	r2, [pc, #72]	; (8001580 <_sbrk+0x68>)
 8001538:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800153a:	4b10      	ldr	r3, [pc, #64]	; (800157c <_sbrk+0x64>)
 800153c:	681a      	ldr	r2, [r3, #0]
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	4413      	add	r3, r2
 8001542:	693a      	ldr	r2, [r7, #16]
 8001544:	429a      	cmp	r2, r3
 8001546:	d207      	bcs.n	8001558 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001548:	f002 ffbc 	bl	80044c4 <__errno>
 800154c:	4603      	mov	r3, r0
 800154e:	220c      	movs	r2, #12
 8001550:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001552:	f04f 33ff 	mov.w	r3, #4294967295
 8001556:	e009      	b.n	800156c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001558:	4b08      	ldr	r3, [pc, #32]	; (800157c <_sbrk+0x64>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800155e:	4b07      	ldr	r3, [pc, #28]	; (800157c <_sbrk+0x64>)
 8001560:	681a      	ldr	r2, [r3, #0]
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	4413      	add	r3, r2
 8001566:	4a05      	ldr	r2, [pc, #20]	; (800157c <_sbrk+0x64>)
 8001568:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800156a:	68fb      	ldr	r3, [r7, #12]
}
 800156c:	4618      	mov	r0, r3
 800156e:	3718      	adds	r7, #24
 8001570:	46bd      	mov	sp, r7
 8001572:	bd80      	pop	{r7, pc}
 8001574:	20030000 	.word	0x20030000
 8001578:	00000400 	.word	0x00000400
 800157c:	20000c3c 	.word	0x20000c3c
 8001580:	20000d48 	.word	0x20000d48

08001584 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001584:	b480      	push	{r7}
 8001586:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001588:	4b06      	ldr	r3, [pc, #24]	; (80015a4 <SystemInit+0x20>)
 800158a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800158e:	4a05      	ldr	r2, [pc, #20]	; (80015a4 <SystemInit+0x20>)
 8001590:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001594:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001598:	bf00      	nop
 800159a:	46bd      	mov	sp, r7
 800159c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a0:	4770      	bx	lr
 80015a2:	bf00      	nop
 80015a4:	e000ed00 	.word	0xe000ed00

080015a8 <MX_USART6_UART_Init>:
UART_HandleTypeDef huart6;

/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80015ac:	4b11      	ldr	r3, [pc, #68]	; (80015f4 <MX_USART6_UART_Init+0x4c>)
 80015ae:	4a12      	ldr	r2, [pc, #72]	; (80015f8 <MX_USART6_UART_Init+0x50>)
 80015b0:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 38400;
 80015b2:	4b10      	ldr	r3, [pc, #64]	; (80015f4 <MX_USART6_UART_Init+0x4c>)
 80015b4:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80015b8:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80015ba:	4b0e      	ldr	r3, [pc, #56]	; (80015f4 <MX_USART6_UART_Init+0x4c>)
 80015bc:	2200      	movs	r2, #0
 80015be:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80015c0:	4b0c      	ldr	r3, [pc, #48]	; (80015f4 <MX_USART6_UART_Init+0x4c>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80015c6:	4b0b      	ldr	r3, [pc, #44]	; (80015f4 <MX_USART6_UART_Init+0x4c>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80015cc:	4b09      	ldr	r3, [pc, #36]	; (80015f4 <MX_USART6_UART_Init+0x4c>)
 80015ce:	220c      	movs	r2, #12
 80015d0:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015d2:	4b08      	ldr	r3, [pc, #32]	; (80015f4 <MX_USART6_UART_Init+0x4c>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80015d8:	4b06      	ldr	r3, [pc, #24]	; (80015f4 <MX_USART6_UART_Init+0x4c>)
 80015da:	2200      	movs	r2, #0
 80015dc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80015de:	4805      	ldr	r0, [pc, #20]	; (80015f4 <MX_USART6_UART_Init+0x4c>)
 80015e0:	f001 f910 	bl	8002804 <HAL_UART_Init>
 80015e4:	4603      	mov	r3, r0
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d001      	beq.n	80015ee <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80015ea:	f7ff ff33 	bl	8001454 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80015ee:	bf00      	nop
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop
 80015f4:	20000c40 	.word	0x20000c40
 80015f8:	40011400 	.word	0x40011400

080015fc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b08a      	sub	sp, #40	; 0x28
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001604:	f107 0314 	add.w	r3, r7, #20
 8001608:	2200      	movs	r2, #0
 800160a:	601a      	str	r2, [r3, #0]
 800160c:	605a      	str	r2, [r3, #4]
 800160e:	609a      	str	r2, [r3, #8]
 8001610:	60da      	str	r2, [r3, #12]
 8001612:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART6)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4a1d      	ldr	r2, [pc, #116]	; (8001690 <HAL_UART_MspInit+0x94>)
 800161a:	4293      	cmp	r3, r2
 800161c:	d133      	bne.n	8001686 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* USART6 clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 800161e:	2300      	movs	r3, #0
 8001620:	613b      	str	r3, [r7, #16]
 8001622:	4b1c      	ldr	r3, [pc, #112]	; (8001694 <HAL_UART_MspInit+0x98>)
 8001624:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001626:	4a1b      	ldr	r2, [pc, #108]	; (8001694 <HAL_UART_MspInit+0x98>)
 8001628:	f043 0320 	orr.w	r3, r3, #32
 800162c:	6453      	str	r3, [r2, #68]	; 0x44
 800162e:	4b19      	ldr	r3, [pc, #100]	; (8001694 <HAL_UART_MspInit+0x98>)
 8001630:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001632:	f003 0320 	and.w	r3, r3, #32
 8001636:	613b      	str	r3, [r7, #16]
 8001638:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800163a:	2300      	movs	r3, #0
 800163c:	60fb      	str	r3, [r7, #12]
 800163e:	4b15      	ldr	r3, [pc, #84]	; (8001694 <HAL_UART_MspInit+0x98>)
 8001640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001642:	4a14      	ldr	r2, [pc, #80]	; (8001694 <HAL_UART_MspInit+0x98>)
 8001644:	f043 0304 	orr.w	r3, r3, #4
 8001648:	6313      	str	r3, [r2, #48]	; 0x30
 800164a:	4b12      	ldr	r3, [pc, #72]	; (8001694 <HAL_UART_MspInit+0x98>)
 800164c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800164e:	f003 0304 	and.w	r3, r3, #4
 8001652:	60fb      	str	r3, [r7, #12]
 8001654:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001656:	23c0      	movs	r3, #192	; 0xc0
 8001658:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800165a:	2302      	movs	r3, #2
 800165c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800165e:	2300      	movs	r3, #0
 8001660:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001662:	2303      	movs	r3, #3
 8001664:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001666:	2308      	movs	r3, #8
 8001668:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800166a:	f107 0314 	add.w	r3, r7, #20
 800166e:	4619      	mov	r1, r3
 8001670:	4809      	ldr	r0, [pc, #36]	; (8001698 <HAL_UART_MspInit+0x9c>)
 8001672:	f000 fa91 	bl	8001b98 <HAL_GPIO_Init>

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8001676:	2200      	movs	r2, #0
 8001678:	2100      	movs	r1, #0
 800167a:	2047      	movs	r0, #71	; 0x47
 800167c:	f000 f9a9 	bl	80019d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8001680:	2047      	movs	r0, #71	; 0x47
 8001682:	f000 f9c2 	bl	8001a0a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8001686:	bf00      	nop
 8001688:	3728      	adds	r7, #40	; 0x28
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	40011400 	.word	0x40011400
 8001694:	40023800 	.word	0x40023800
 8001698:	40020800 	.word	0x40020800

0800169c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800169c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80016d4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80016a0:	480d      	ldr	r0, [pc, #52]	; (80016d8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80016a2:	490e      	ldr	r1, [pc, #56]	; (80016dc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80016a4:	4a0e      	ldr	r2, [pc, #56]	; (80016e0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80016a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016a8:	e002      	b.n	80016b0 <LoopCopyDataInit>

080016aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016ae:	3304      	adds	r3, #4

080016b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016b4:	d3f9      	bcc.n	80016aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016b6:	4a0b      	ldr	r2, [pc, #44]	; (80016e4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80016b8:	4c0b      	ldr	r4, [pc, #44]	; (80016e8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80016ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016bc:	e001      	b.n	80016c2 <LoopFillZerobss>

080016be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016c0:	3204      	adds	r2, #4

080016c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016c4:	d3fb      	bcc.n	80016be <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80016c6:	f7ff ff5d 	bl	8001584 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80016ca:	f002 fff7 	bl	80046bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80016ce:	f7ff fe01 	bl	80012d4 <main>
  bx  lr    
 80016d2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80016d4:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80016d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016dc:	2000038c 	.word	0x2000038c
  ldr r2, =_sidata
 80016e0:	08006568 	.word	0x08006568
  ldr r2, =_sbss
 80016e4:	2000038c 	.word	0x2000038c
  ldr r4, =_ebss
 80016e8:	20000d44 	.word	0x20000d44

080016ec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016ec:	e7fe      	b.n	80016ec <ADC_IRQHandler>
	...

080016f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80016f4:	4b0e      	ldr	r3, [pc, #56]	; (8001730 <HAL_Init+0x40>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4a0d      	ldr	r2, [pc, #52]	; (8001730 <HAL_Init+0x40>)
 80016fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016fe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001700:	4b0b      	ldr	r3, [pc, #44]	; (8001730 <HAL_Init+0x40>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4a0a      	ldr	r2, [pc, #40]	; (8001730 <HAL_Init+0x40>)
 8001706:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800170a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800170c:	4b08      	ldr	r3, [pc, #32]	; (8001730 <HAL_Init+0x40>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4a07      	ldr	r2, [pc, #28]	; (8001730 <HAL_Init+0x40>)
 8001712:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001716:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001718:	2003      	movs	r0, #3
 800171a:	f000 f94f 	bl	80019bc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800171e:	200f      	movs	r0, #15
 8001720:	f000 f808 	bl	8001734 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001724:	f7ff fe9c 	bl	8001460 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001728:	2300      	movs	r3, #0
}
 800172a:	4618      	mov	r0, r3
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	40023c00 	.word	0x40023c00

08001734 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b082      	sub	sp, #8
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800173c:	4b12      	ldr	r3, [pc, #72]	; (8001788 <HAL_InitTick+0x54>)
 800173e:	681a      	ldr	r2, [r3, #0]
 8001740:	4b12      	ldr	r3, [pc, #72]	; (800178c <HAL_InitTick+0x58>)
 8001742:	781b      	ldrb	r3, [r3, #0]
 8001744:	4619      	mov	r1, r3
 8001746:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800174a:	fbb3 f3f1 	udiv	r3, r3, r1
 800174e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001752:	4618      	mov	r0, r3
 8001754:	f000 f975 	bl	8001a42 <HAL_SYSTICK_Config>
 8001758:	4603      	mov	r3, r0
 800175a:	2b00      	cmp	r3, #0
 800175c:	d001      	beq.n	8001762 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800175e:	2301      	movs	r3, #1
 8001760:	e00e      	b.n	8001780 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	2b0f      	cmp	r3, #15
 8001766:	d80a      	bhi.n	800177e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001768:	2200      	movs	r2, #0
 800176a:	6879      	ldr	r1, [r7, #4]
 800176c:	f04f 30ff 	mov.w	r0, #4294967295
 8001770:	f000 f92f 	bl	80019d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001774:	4a06      	ldr	r2, [pc, #24]	; (8001790 <HAL_InitTick+0x5c>)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800177a:	2300      	movs	r3, #0
 800177c:	e000      	b.n	8001780 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800177e:	2301      	movs	r3, #1
}
 8001780:	4618      	mov	r0, r3
 8001782:	3708      	adds	r7, #8
 8001784:	46bd      	mov	sp, r7
 8001786:	bd80      	pop	{r7, pc}
 8001788:	20000314 	.word	0x20000314
 800178c:	2000031c 	.word	0x2000031c
 8001790:	20000318 	.word	0x20000318

08001794 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001794:	b480      	push	{r7}
 8001796:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001798:	4b06      	ldr	r3, [pc, #24]	; (80017b4 <HAL_IncTick+0x20>)
 800179a:	781b      	ldrb	r3, [r3, #0]
 800179c:	461a      	mov	r2, r3
 800179e:	4b06      	ldr	r3, [pc, #24]	; (80017b8 <HAL_IncTick+0x24>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	4413      	add	r3, r2
 80017a4:	4a04      	ldr	r2, [pc, #16]	; (80017b8 <HAL_IncTick+0x24>)
 80017a6:	6013      	str	r3, [r2, #0]
}
 80017a8:	bf00      	nop
 80017aa:	46bd      	mov	sp, r7
 80017ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b0:	4770      	bx	lr
 80017b2:	bf00      	nop
 80017b4:	2000031c 	.word	0x2000031c
 80017b8:	20000c84 	.word	0x20000c84

080017bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017bc:	b480      	push	{r7}
 80017be:	af00      	add	r7, sp, #0
  return uwTick;
 80017c0:	4b03      	ldr	r3, [pc, #12]	; (80017d0 <HAL_GetTick+0x14>)
 80017c2:	681b      	ldr	r3, [r3, #0]
}
 80017c4:	4618      	mov	r0, r3
 80017c6:	46bd      	mov	sp, r7
 80017c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017cc:	4770      	bx	lr
 80017ce:	bf00      	nop
 80017d0:	20000c84 	.word	0x20000c84

080017d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017d4:	b480      	push	{r7}
 80017d6:	b085      	sub	sp, #20
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	f003 0307 	and.w	r3, r3, #7
 80017e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017e4:	4b0c      	ldr	r3, [pc, #48]	; (8001818 <__NVIC_SetPriorityGrouping+0x44>)
 80017e6:	68db      	ldr	r3, [r3, #12]
 80017e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017ea:	68ba      	ldr	r2, [r7, #8]
 80017ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017f0:	4013      	ands	r3, r2
 80017f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017f8:	68bb      	ldr	r3, [r7, #8]
 80017fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001800:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001804:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001806:	4a04      	ldr	r2, [pc, #16]	; (8001818 <__NVIC_SetPriorityGrouping+0x44>)
 8001808:	68bb      	ldr	r3, [r7, #8]
 800180a:	60d3      	str	r3, [r2, #12]
}
 800180c:	bf00      	nop
 800180e:	3714      	adds	r7, #20
 8001810:	46bd      	mov	sp, r7
 8001812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001816:	4770      	bx	lr
 8001818:	e000ed00 	.word	0xe000ed00

0800181c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800181c:	b480      	push	{r7}
 800181e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001820:	4b04      	ldr	r3, [pc, #16]	; (8001834 <__NVIC_GetPriorityGrouping+0x18>)
 8001822:	68db      	ldr	r3, [r3, #12]
 8001824:	0a1b      	lsrs	r3, r3, #8
 8001826:	f003 0307 	and.w	r3, r3, #7
}
 800182a:	4618      	mov	r0, r3
 800182c:	46bd      	mov	sp, r7
 800182e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001832:	4770      	bx	lr
 8001834:	e000ed00 	.word	0xe000ed00

08001838 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001838:	b480      	push	{r7}
 800183a:	b083      	sub	sp, #12
 800183c:	af00      	add	r7, sp, #0
 800183e:	4603      	mov	r3, r0
 8001840:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001842:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001846:	2b00      	cmp	r3, #0
 8001848:	db0b      	blt.n	8001862 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800184a:	79fb      	ldrb	r3, [r7, #7]
 800184c:	f003 021f 	and.w	r2, r3, #31
 8001850:	4907      	ldr	r1, [pc, #28]	; (8001870 <__NVIC_EnableIRQ+0x38>)
 8001852:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001856:	095b      	lsrs	r3, r3, #5
 8001858:	2001      	movs	r0, #1
 800185a:	fa00 f202 	lsl.w	r2, r0, r2
 800185e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001862:	bf00      	nop
 8001864:	370c      	adds	r7, #12
 8001866:	46bd      	mov	sp, r7
 8001868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186c:	4770      	bx	lr
 800186e:	bf00      	nop
 8001870:	e000e100 	.word	0xe000e100

08001874 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001874:	b480      	push	{r7}
 8001876:	b083      	sub	sp, #12
 8001878:	af00      	add	r7, sp, #0
 800187a:	4603      	mov	r3, r0
 800187c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800187e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001882:	2b00      	cmp	r3, #0
 8001884:	db12      	blt.n	80018ac <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001886:	79fb      	ldrb	r3, [r7, #7]
 8001888:	f003 021f 	and.w	r2, r3, #31
 800188c:	490a      	ldr	r1, [pc, #40]	; (80018b8 <__NVIC_DisableIRQ+0x44>)
 800188e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001892:	095b      	lsrs	r3, r3, #5
 8001894:	2001      	movs	r0, #1
 8001896:	fa00 f202 	lsl.w	r2, r0, r2
 800189a:	3320      	adds	r3, #32
 800189c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80018a0:	f3bf 8f4f 	dsb	sy
}
 80018a4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80018a6:	f3bf 8f6f 	isb	sy
}
 80018aa:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80018ac:	bf00      	nop
 80018ae:	370c      	adds	r7, #12
 80018b0:	46bd      	mov	sp, r7
 80018b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b6:	4770      	bx	lr
 80018b8:	e000e100 	.word	0xe000e100

080018bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018bc:	b480      	push	{r7}
 80018be:	b083      	sub	sp, #12
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	4603      	mov	r3, r0
 80018c4:	6039      	str	r1, [r7, #0]
 80018c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	db0a      	blt.n	80018e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	b2da      	uxtb	r2, r3
 80018d4:	490c      	ldr	r1, [pc, #48]	; (8001908 <__NVIC_SetPriority+0x4c>)
 80018d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018da:	0112      	lsls	r2, r2, #4
 80018dc:	b2d2      	uxtb	r2, r2
 80018de:	440b      	add	r3, r1
 80018e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018e4:	e00a      	b.n	80018fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	b2da      	uxtb	r2, r3
 80018ea:	4908      	ldr	r1, [pc, #32]	; (800190c <__NVIC_SetPriority+0x50>)
 80018ec:	79fb      	ldrb	r3, [r7, #7]
 80018ee:	f003 030f 	and.w	r3, r3, #15
 80018f2:	3b04      	subs	r3, #4
 80018f4:	0112      	lsls	r2, r2, #4
 80018f6:	b2d2      	uxtb	r2, r2
 80018f8:	440b      	add	r3, r1
 80018fa:	761a      	strb	r2, [r3, #24]
}
 80018fc:	bf00      	nop
 80018fe:	370c      	adds	r7, #12
 8001900:	46bd      	mov	sp, r7
 8001902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001906:	4770      	bx	lr
 8001908:	e000e100 	.word	0xe000e100
 800190c:	e000ed00 	.word	0xe000ed00

08001910 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001910:	b480      	push	{r7}
 8001912:	b089      	sub	sp, #36	; 0x24
 8001914:	af00      	add	r7, sp, #0
 8001916:	60f8      	str	r0, [r7, #12]
 8001918:	60b9      	str	r1, [r7, #8]
 800191a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	f003 0307 	and.w	r3, r3, #7
 8001922:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001924:	69fb      	ldr	r3, [r7, #28]
 8001926:	f1c3 0307 	rsb	r3, r3, #7
 800192a:	2b04      	cmp	r3, #4
 800192c:	bf28      	it	cs
 800192e:	2304      	movcs	r3, #4
 8001930:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001932:	69fb      	ldr	r3, [r7, #28]
 8001934:	3304      	adds	r3, #4
 8001936:	2b06      	cmp	r3, #6
 8001938:	d902      	bls.n	8001940 <NVIC_EncodePriority+0x30>
 800193a:	69fb      	ldr	r3, [r7, #28]
 800193c:	3b03      	subs	r3, #3
 800193e:	e000      	b.n	8001942 <NVIC_EncodePriority+0x32>
 8001940:	2300      	movs	r3, #0
 8001942:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001944:	f04f 32ff 	mov.w	r2, #4294967295
 8001948:	69bb      	ldr	r3, [r7, #24]
 800194a:	fa02 f303 	lsl.w	r3, r2, r3
 800194e:	43da      	mvns	r2, r3
 8001950:	68bb      	ldr	r3, [r7, #8]
 8001952:	401a      	ands	r2, r3
 8001954:	697b      	ldr	r3, [r7, #20]
 8001956:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001958:	f04f 31ff 	mov.w	r1, #4294967295
 800195c:	697b      	ldr	r3, [r7, #20]
 800195e:	fa01 f303 	lsl.w	r3, r1, r3
 8001962:	43d9      	mvns	r1, r3
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001968:	4313      	orrs	r3, r2
         );
}
 800196a:	4618      	mov	r0, r3
 800196c:	3724      	adds	r7, #36	; 0x24
 800196e:	46bd      	mov	sp, r7
 8001970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001974:	4770      	bx	lr
	...

08001978 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b082      	sub	sp, #8
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	3b01      	subs	r3, #1
 8001984:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001988:	d301      	bcc.n	800198e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800198a:	2301      	movs	r3, #1
 800198c:	e00f      	b.n	80019ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800198e:	4a0a      	ldr	r2, [pc, #40]	; (80019b8 <SysTick_Config+0x40>)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	3b01      	subs	r3, #1
 8001994:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001996:	210f      	movs	r1, #15
 8001998:	f04f 30ff 	mov.w	r0, #4294967295
 800199c:	f7ff ff8e 	bl	80018bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019a0:	4b05      	ldr	r3, [pc, #20]	; (80019b8 <SysTick_Config+0x40>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019a6:	4b04      	ldr	r3, [pc, #16]	; (80019b8 <SysTick_Config+0x40>)
 80019a8:	2207      	movs	r2, #7
 80019aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019ac:	2300      	movs	r3, #0
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	3708      	adds	r7, #8
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop
 80019b8:	e000e010 	.word	0xe000e010

080019bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b082      	sub	sp, #8
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019c4:	6878      	ldr	r0, [r7, #4]
 80019c6:	f7ff ff05 	bl	80017d4 <__NVIC_SetPriorityGrouping>
}
 80019ca:	bf00      	nop
 80019cc:	3708      	adds	r7, #8
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}

080019d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019d2:	b580      	push	{r7, lr}
 80019d4:	b086      	sub	sp, #24
 80019d6:	af00      	add	r7, sp, #0
 80019d8:	4603      	mov	r3, r0
 80019da:	60b9      	str	r1, [r7, #8]
 80019dc:	607a      	str	r2, [r7, #4]
 80019de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80019e0:	2300      	movs	r3, #0
 80019e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019e4:	f7ff ff1a 	bl	800181c <__NVIC_GetPriorityGrouping>
 80019e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019ea:	687a      	ldr	r2, [r7, #4]
 80019ec:	68b9      	ldr	r1, [r7, #8]
 80019ee:	6978      	ldr	r0, [r7, #20]
 80019f0:	f7ff ff8e 	bl	8001910 <NVIC_EncodePriority>
 80019f4:	4602      	mov	r2, r0
 80019f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019fa:	4611      	mov	r1, r2
 80019fc:	4618      	mov	r0, r3
 80019fe:	f7ff ff5d 	bl	80018bc <__NVIC_SetPriority>
}
 8001a02:	bf00      	nop
 8001a04:	3718      	adds	r7, #24
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}

08001a0a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a0a:	b580      	push	{r7, lr}
 8001a0c:	b082      	sub	sp, #8
 8001a0e:	af00      	add	r7, sp, #0
 8001a10:	4603      	mov	r3, r0
 8001a12:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a18:	4618      	mov	r0, r3
 8001a1a:	f7ff ff0d 	bl	8001838 <__NVIC_EnableIRQ>
}
 8001a1e:	bf00      	nop
 8001a20:	3708      	adds	r7, #8
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}

08001a26 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001a26:	b580      	push	{r7, lr}
 8001a28:	b082      	sub	sp, #8
 8001a2a:	af00      	add	r7, sp, #0
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001a30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a34:	4618      	mov	r0, r3
 8001a36:	f7ff ff1d 	bl	8001874 <__NVIC_DisableIRQ>
}
 8001a3a:	bf00      	nop
 8001a3c:	3708      	adds	r7, #8
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}

08001a42 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a42:	b580      	push	{r7, lr}
 8001a44:	b082      	sub	sp, #8
 8001a46:	af00      	add	r7, sp, #0
 8001a48:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a4a:	6878      	ldr	r0, [r7, #4]
 8001a4c:	f7ff ff94 	bl	8001978 <SysTick_Config>
 8001a50:	4603      	mov	r3, r0
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	3708      	adds	r7, #8
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}

08001a5a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001a5a:	b580      	push	{r7, lr}
 8001a5c:	b084      	sub	sp, #16
 8001a5e:	af00      	add	r7, sp, #0
 8001a60:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a66:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001a68:	f7ff fea8 	bl	80017bc <HAL_GetTick>
 8001a6c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001a74:	b2db      	uxtb	r3, r3
 8001a76:	2b02      	cmp	r3, #2
 8001a78:	d008      	beq.n	8001a8c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	2280      	movs	r2, #128	; 0x80
 8001a7e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2200      	movs	r2, #0
 8001a84:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001a88:	2301      	movs	r3, #1
 8001a8a:	e052      	b.n	8001b32 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	681a      	ldr	r2, [r3, #0]
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f022 0216 	bic.w	r2, r2, #22
 8001a9a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	695a      	ldr	r2, [r3, #20]
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001aaa:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d103      	bne.n	8001abc <HAL_DMA_Abort+0x62>
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d007      	beq.n	8001acc <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	681a      	ldr	r2, [r3, #0]
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f022 0208 	bic.w	r2, r2, #8
 8001aca:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	681a      	ldr	r2, [r3, #0]
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f022 0201 	bic.w	r2, r2, #1
 8001ada:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001adc:	e013      	b.n	8001b06 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001ade:	f7ff fe6d 	bl	80017bc <HAL_GetTick>
 8001ae2:	4602      	mov	r2, r0
 8001ae4:	68bb      	ldr	r3, [r7, #8]
 8001ae6:	1ad3      	subs	r3, r2, r3
 8001ae8:	2b05      	cmp	r3, #5
 8001aea:	d90c      	bls.n	8001b06 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2220      	movs	r2, #32
 8001af0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2203      	movs	r2, #3
 8001af6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	2200      	movs	r2, #0
 8001afe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001b02:	2303      	movs	r3, #3
 8001b04:	e015      	b.n	8001b32 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f003 0301 	and.w	r3, r3, #1
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d1e4      	bne.n	8001ade <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b18:	223f      	movs	r2, #63	; 0x3f
 8001b1a:	409a      	lsls	r2, r3
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2201      	movs	r2, #1
 8001b24:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001b30:	2300      	movs	r3, #0
}
 8001b32:	4618      	mov	r0, r3
 8001b34:	3710      	adds	r7, #16
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}

08001b3a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001b3a:	b480      	push	{r7}
 8001b3c:	b083      	sub	sp, #12
 8001b3e:	af00      	add	r7, sp, #0
 8001b40:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001b48:	b2db      	uxtb	r3, r3
 8001b4a:	2b02      	cmp	r3, #2
 8001b4c:	d004      	beq.n	8001b58 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	2280      	movs	r2, #128	; 0x80
 8001b52:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001b54:	2301      	movs	r3, #1
 8001b56:	e00c      	b.n	8001b72 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2205      	movs	r2, #5
 8001b5c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	681a      	ldr	r2, [r3, #0]
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f022 0201 	bic.w	r2, r2, #1
 8001b6e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001b70:	2300      	movs	r3, #0
}
 8001b72:	4618      	mov	r0, r3
 8001b74:	370c      	adds	r7, #12
 8001b76:	46bd      	mov	sp, r7
 8001b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7c:	4770      	bx	lr

08001b7e <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8001b7e:	b480      	push	{r7}
 8001b80:	b083      	sub	sp, #12
 8001b82:	af00      	add	r7, sp, #0
 8001b84:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	370c      	adds	r7, #12
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b94:	4770      	bx	lr
	...

08001b98 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b089      	sub	sp, #36	; 0x24
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
 8001ba0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001baa:	2300      	movs	r3, #0
 8001bac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001bae:	2300      	movs	r3, #0
 8001bb0:	61fb      	str	r3, [r7, #28]
 8001bb2:	e177      	b.n	8001ea4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001bb4:	2201      	movs	r2, #1
 8001bb6:	69fb      	ldr	r3, [r7, #28]
 8001bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bbc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	697a      	ldr	r2, [r7, #20]
 8001bc4:	4013      	ands	r3, r2
 8001bc6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001bc8:	693a      	ldr	r2, [r7, #16]
 8001bca:	697b      	ldr	r3, [r7, #20]
 8001bcc:	429a      	cmp	r2, r3
 8001bce:	f040 8166 	bne.w	8001e9e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	f003 0303 	and.w	r3, r3, #3
 8001bda:	2b01      	cmp	r3, #1
 8001bdc:	d005      	beq.n	8001bea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001be6:	2b02      	cmp	r3, #2
 8001be8:	d130      	bne.n	8001c4c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	689b      	ldr	r3, [r3, #8]
 8001bee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001bf0:	69fb      	ldr	r3, [r7, #28]
 8001bf2:	005b      	lsls	r3, r3, #1
 8001bf4:	2203      	movs	r2, #3
 8001bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfa:	43db      	mvns	r3, r3
 8001bfc:	69ba      	ldr	r2, [r7, #24]
 8001bfe:	4013      	ands	r3, r2
 8001c00:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	68da      	ldr	r2, [r3, #12]
 8001c06:	69fb      	ldr	r3, [r7, #28]
 8001c08:	005b      	lsls	r3, r3, #1
 8001c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c0e:	69ba      	ldr	r2, [r7, #24]
 8001c10:	4313      	orrs	r3, r2
 8001c12:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	69ba      	ldr	r2, [r7, #24]
 8001c18:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c20:	2201      	movs	r2, #1
 8001c22:	69fb      	ldr	r3, [r7, #28]
 8001c24:	fa02 f303 	lsl.w	r3, r2, r3
 8001c28:	43db      	mvns	r3, r3
 8001c2a:	69ba      	ldr	r2, [r7, #24]
 8001c2c:	4013      	ands	r3, r2
 8001c2e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	091b      	lsrs	r3, r3, #4
 8001c36:	f003 0201 	and.w	r2, r3, #1
 8001c3a:	69fb      	ldr	r3, [r7, #28]
 8001c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c40:	69ba      	ldr	r2, [r7, #24]
 8001c42:	4313      	orrs	r3, r2
 8001c44:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	69ba      	ldr	r2, [r7, #24]
 8001c4a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	f003 0303 	and.w	r3, r3, #3
 8001c54:	2b03      	cmp	r3, #3
 8001c56:	d017      	beq.n	8001c88 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	68db      	ldr	r3, [r3, #12]
 8001c5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001c5e:	69fb      	ldr	r3, [r7, #28]
 8001c60:	005b      	lsls	r3, r3, #1
 8001c62:	2203      	movs	r2, #3
 8001c64:	fa02 f303 	lsl.w	r3, r2, r3
 8001c68:	43db      	mvns	r3, r3
 8001c6a:	69ba      	ldr	r2, [r7, #24]
 8001c6c:	4013      	ands	r3, r2
 8001c6e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	689a      	ldr	r2, [r3, #8]
 8001c74:	69fb      	ldr	r3, [r7, #28]
 8001c76:	005b      	lsls	r3, r3, #1
 8001c78:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7c:	69ba      	ldr	r2, [r7, #24]
 8001c7e:	4313      	orrs	r3, r2
 8001c80:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	69ba      	ldr	r2, [r7, #24]
 8001c86:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	f003 0303 	and.w	r3, r3, #3
 8001c90:	2b02      	cmp	r3, #2
 8001c92:	d123      	bne.n	8001cdc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c94:	69fb      	ldr	r3, [r7, #28]
 8001c96:	08da      	lsrs	r2, r3, #3
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	3208      	adds	r2, #8
 8001c9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ca0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001ca2:	69fb      	ldr	r3, [r7, #28]
 8001ca4:	f003 0307 	and.w	r3, r3, #7
 8001ca8:	009b      	lsls	r3, r3, #2
 8001caa:	220f      	movs	r2, #15
 8001cac:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb0:	43db      	mvns	r3, r3
 8001cb2:	69ba      	ldr	r2, [r7, #24]
 8001cb4:	4013      	ands	r3, r2
 8001cb6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	691a      	ldr	r2, [r3, #16]
 8001cbc:	69fb      	ldr	r3, [r7, #28]
 8001cbe:	f003 0307 	and.w	r3, r3, #7
 8001cc2:	009b      	lsls	r3, r3, #2
 8001cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc8:	69ba      	ldr	r2, [r7, #24]
 8001cca:	4313      	orrs	r3, r2
 8001ccc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001cce:	69fb      	ldr	r3, [r7, #28]
 8001cd0:	08da      	lsrs	r2, r3, #3
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	3208      	adds	r2, #8
 8001cd6:	69b9      	ldr	r1, [r7, #24]
 8001cd8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001ce2:	69fb      	ldr	r3, [r7, #28]
 8001ce4:	005b      	lsls	r3, r3, #1
 8001ce6:	2203      	movs	r2, #3
 8001ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cec:	43db      	mvns	r3, r3
 8001cee:	69ba      	ldr	r2, [r7, #24]
 8001cf0:	4013      	ands	r3, r2
 8001cf2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	f003 0203 	and.w	r2, r3, #3
 8001cfc:	69fb      	ldr	r3, [r7, #28]
 8001cfe:	005b      	lsls	r3, r3, #1
 8001d00:	fa02 f303 	lsl.w	r3, r2, r3
 8001d04:	69ba      	ldr	r2, [r7, #24]
 8001d06:	4313      	orrs	r3, r2
 8001d08:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	69ba      	ldr	r2, [r7, #24]
 8001d0e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	f000 80c0 	beq.w	8001e9e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d1e:	2300      	movs	r3, #0
 8001d20:	60fb      	str	r3, [r7, #12]
 8001d22:	4b66      	ldr	r3, [pc, #408]	; (8001ebc <HAL_GPIO_Init+0x324>)
 8001d24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d26:	4a65      	ldr	r2, [pc, #404]	; (8001ebc <HAL_GPIO_Init+0x324>)
 8001d28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d2c:	6453      	str	r3, [r2, #68]	; 0x44
 8001d2e:	4b63      	ldr	r3, [pc, #396]	; (8001ebc <HAL_GPIO_Init+0x324>)
 8001d30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d36:	60fb      	str	r3, [r7, #12]
 8001d38:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d3a:	4a61      	ldr	r2, [pc, #388]	; (8001ec0 <HAL_GPIO_Init+0x328>)
 8001d3c:	69fb      	ldr	r3, [r7, #28]
 8001d3e:	089b      	lsrs	r3, r3, #2
 8001d40:	3302      	adds	r3, #2
 8001d42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d46:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001d48:	69fb      	ldr	r3, [r7, #28]
 8001d4a:	f003 0303 	and.w	r3, r3, #3
 8001d4e:	009b      	lsls	r3, r3, #2
 8001d50:	220f      	movs	r2, #15
 8001d52:	fa02 f303 	lsl.w	r3, r2, r3
 8001d56:	43db      	mvns	r3, r3
 8001d58:	69ba      	ldr	r2, [r7, #24]
 8001d5a:	4013      	ands	r3, r2
 8001d5c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	4a58      	ldr	r2, [pc, #352]	; (8001ec4 <HAL_GPIO_Init+0x32c>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d037      	beq.n	8001dd6 <HAL_GPIO_Init+0x23e>
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	4a57      	ldr	r2, [pc, #348]	; (8001ec8 <HAL_GPIO_Init+0x330>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d031      	beq.n	8001dd2 <HAL_GPIO_Init+0x23a>
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	4a56      	ldr	r2, [pc, #344]	; (8001ecc <HAL_GPIO_Init+0x334>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d02b      	beq.n	8001dce <HAL_GPIO_Init+0x236>
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	4a55      	ldr	r2, [pc, #340]	; (8001ed0 <HAL_GPIO_Init+0x338>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d025      	beq.n	8001dca <HAL_GPIO_Init+0x232>
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	4a54      	ldr	r2, [pc, #336]	; (8001ed4 <HAL_GPIO_Init+0x33c>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d01f      	beq.n	8001dc6 <HAL_GPIO_Init+0x22e>
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	4a53      	ldr	r2, [pc, #332]	; (8001ed8 <HAL_GPIO_Init+0x340>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d019      	beq.n	8001dc2 <HAL_GPIO_Init+0x22a>
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	4a52      	ldr	r2, [pc, #328]	; (8001edc <HAL_GPIO_Init+0x344>)
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d013      	beq.n	8001dbe <HAL_GPIO_Init+0x226>
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	4a51      	ldr	r2, [pc, #324]	; (8001ee0 <HAL_GPIO_Init+0x348>)
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d00d      	beq.n	8001dba <HAL_GPIO_Init+0x222>
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	4a50      	ldr	r2, [pc, #320]	; (8001ee4 <HAL_GPIO_Init+0x34c>)
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d007      	beq.n	8001db6 <HAL_GPIO_Init+0x21e>
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	4a4f      	ldr	r2, [pc, #316]	; (8001ee8 <HAL_GPIO_Init+0x350>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d101      	bne.n	8001db2 <HAL_GPIO_Init+0x21a>
 8001dae:	2309      	movs	r3, #9
 8001db0:	e012      	b.n	8001dd8 <HAL_GPIO_Init+0x240>
 8001db2:	230a      	movs	r3, #10
 8001db4:	e010      	b.n	8001dd8 <HAL_GPIO_Init+0x240>
 8001db6:	2308      	movs	r3, #8
 8001db8:	e00e      	b.n	8001dd8 <HAL_GPIO_Init+0x240>
 8001dba:	2307      	movs	r3, #7
 8001dbc:	e00c      	b.n	8001dd8 <HAL_GPIO_Init+0x240>
 8001dbe:	2306      	movs	r3, #6
 8001dc0:	e00a      	b.n	8001dd8 <HAL_GPIO_Init+0x240>
 8001dc2:	2305      	movs	r3, #5
 8001dc4:	e008      	b.n	8001dd8 <HAL_GPIO_Init+0x240>
 8001dc6:	2304      	movs	r3, #4
 8001dc8:	e006      	b.n	8001dd8 <HAL_GPIO_Init+0x240>
 8001dca:	2303      	movs	r3, #3
 8001dcc:	e004      	b.n	8001dd8 <HAL_GPIO_Init+0x240>
 8001dce:	2302      	movs	r3, #2
 8001dd0:	e002      	b.n	8001dd8 <HAL_GPIO_Init+0x240>
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	e000      	b.n	8001dd8 <HAL_GPIO_Init+0x240>
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	69fa      	ldr	r2, [r7, #28]
 8001dda:	f002 0203 	and.w	r2, r2, #3
 8001dde:	0092      	lsls	r2, r2, #2
 8001de0:	4093      	lsls	r3, r2
 8001de2:	69ba      	ldr	r2, [r7, #24]
 8001de4:	4313      	orrs	r3, r2
 8001de6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001de8:	4935      	ldr	r1, [pc, #212]	; (8001ec0 <HAL_GPIO_Init+0x328>)
 8001dea:	69fb      	ldr	r3, [r7, #28]
 8001dec:	089b      	lsrs	r3, r3, #2
 8001dee:	3302      	adds	r3, #2
 8001df0:	69ba      	ldr	r2, [r7, #24]
 8001df2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001df6:	4b3d      	ldr	r3, [pc, #244]	; (8001eec <HAL_GPIO_Init+0x354>)
 8001df8:	689b      	ldr	r3, [r3, #8]
 8001dfa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dfc:	693b      	ldr	r3, [r7, #16]
 8001dfe:	43db      	mvns	r3, r3
 8001e00:	69ba      	ldr	r2, [r7, #24]
 8001e02:	4013      	ands	r3, r2
 8001e04:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d003      	beq.n	8001e1a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001e12:	69ba      	ldr	r2, [r7, #24]
 8001e14:	693b      	ldr	r3, [r7, #16]
 8001e16:	4313      	orrs	r3, r2
 8001e18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001e1a:	4a34      	ldr	r2, [pc, #208]	; (8001eec <HAL_GPIO_Init+0x354>)
 8001e1c:	69bb      	ldr	r3, [r7, #24]
 8001e1e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e20:	4b32      	ldr	r3, [pc, #200]	; (8001eec <HAL_GPIO_Init+0x354>)
 8001e22:	68db      	ldr	r3, [r3, #12]
 8001e24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e26:	693b      	ldr	r3, [r7, #16]
 8001e28:	43db      	mvns	r3, r3
 8001e2a:	69ba      	ldr	r2, [r7, #24]
 8001e2c:	4013      	ands	r3, r2
 8001e2e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d003      	beq.n	8001e44 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001e3c:	69ba      	ldr	r2, [r7, #24]
 8001e3e:	693b      	ldr	r3, [r7, #16]
 8001e40:	4313      	orrs	r3, r2
 8001e42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001e44:	4a29      	ldr	r2, [pc, #164]	; (8001eec <HAL_GPIO_Init+0x354>)
 8001e46:	69bb      	ldr	r3, [r7, #24]
 8001e48:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001e4a:	4b28      	ldr	r3, [pc, #160]	; (8001eec <HAL_GPIO_Init+0x354>)
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e50:	693b      	ldr	r3, [r7, #16]
 8001e52:	43db      	mvns	r3, r3
 8001e54:	69ba      	ldr	r2, [r7, #24]
 8001e56:	4013      	ands	r3, r2
 8001e58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	685b      	ldr	r3, [r3, #4]
 8001e5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d003      	beq.n	8001e6e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001e66:	69ba      	ldr	r2, [r7, #24]
 8001e68:	693b      	ldr	r3, [r7, #16]
 8001e6a:	4313      	orrs	r3, r2
 8001e6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001e6e:	4a1f      	ldr	r2, [pc, #124]	; (8001eec <HAL_GPIO_Init+0x354>)
 8001e70:	69bb      	ldr	r3, [r7, #24]
 8001e72:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e74:	4b1d      	ldr	r3, [pc, #116]	; (8001eec <HAL_GPIO_Init+0x354>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e7a:	693b      	ldr	r3, [r7, #16]
 8001e7c:	43db      	mvns	r3, r3
 8001e7e:	69ba      	ldr	r2, [r7, #24]
 8001e80:	4013      	ands	r3, r2
 8001e82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d003      	beq.n	8001e98 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001e90:	69ba      	ldr	r2, [r7, #24]
 8001e92:	693b      	ldr	r3, [r7, #16]
 8001e94:	4313      	orrs	r3, r2
 8001e96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001e98:	4a14      	ldr	r2, [pc, #80]	; (8001eec <HAL_GPIO_Init+0x354>)
 8001e9a:	69bb      	ldr	r3, [r7, #24]
 8001e9c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e9e:	69fb      	ldr	r3, [r7, #28]
 8001ea0:	3301      	adds	r3, #1
 8001ea2:	61fb      	str	r3, [r7, #28]
 8001ea4:	69fb      	ldr	r3, [r7, #28]
 8001ea6:	2b0f      	cmp	r3, #15
 8001ea8:	f67f ae84 	bls.w	8001bb4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001eac:	bf00      	nop
 8001eae:	bf00      	nop
 8001eb0:	3724      	adds	r7, #36	; 0x24
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb8:	4770      	bx	lr
 8001eba:	bf00      	nop
 8001ebc:	40023800 	.word	0x40023800
 8001ec0:	40013800 	.word	0x40013800
 8001ec4:	40020000 	.word	0x40020000
 8001ec8:	40020400 	.word	0x40020400
 8001ecc:	40020800 	.word	0x40020800
 8001ed0:	40020c00 	.word	0x40020c00
 8001ed4:	40021000 	.word	0x40021000
 8001ed8:	40021400 	.word	0x40021400
 8001edc:	40021800 	.word	0x40021800
 8001ee0:	40021c00 	.word	0x40021c00
 8001ee4:	40022000 	.word	0x40022000
 8001ee8:	40022400 	.word	0x40022400
 8001eec:	40013c00 	.word	0x40013c00

08001ef0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	b085      	sub	sp, #20
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
 8001ef8:	460b      	mov	r3, r1
 8001efa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	691a      	ldr	r2, [r3, #16]
 8001f00:	887b      	ldrh	r3, [r7, #2]
 8001f02:	4013      	ands	r3, r2
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d002      	beq.n	8001f0e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001f08:	2301      	movs	r3, #1
 8001f0a:	73fb      	strb	r3, [r7, #15]
 8001f0c:	e001      	b.n	8001f12 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001f12:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f14:	4618      	mov	r0, r3
 8001f16:	3714      	adds	r7, #20
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1e:	4770      	bx	lr

08001f20 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f20:	b480      	push	{r7}
 8001f22:	b083      	sub	sp, #12
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
 8001f28:	460b      	mov	r3, r1
 8001f2a:	807b      	strh	r3, [r7, #2]
 8001f2c:	4613      	mov	r3, r2
 8001f2e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f30:	787b      	ldrb	r3, [r7, #1]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d003      	beq.n	8001f3e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f36:	887a      	ldrh	r2, [r7, #2]
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001f3c:	e003      	b.n	8001f46 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001f3e:	887b      	ldrh	r3, [r7, #2]
 8001f40:	041a      	lsls	r2, r3, #16
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	619a      	str	r2, [r3, #24]
}
 8001f46:	bf00      	nop
 8001f48:	370c      	adds	r7, #12
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f50:	4770      	bx	lr
	...

08001f54 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b086      	sub	sp, #24
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d101      	bne.n	8001f66 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f62:	2301      	movs	r3, #1
 8001f64:	e267      	b.n	8002436 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f003 0301 	and.w	r3, r3, #1
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d075      	beq.n	800205e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001f72:	4b88      	ldr	r3, [pc, #544]	; (8002194 <HAL_RCC_OscConfig+0x240>)
 8001f74:	689b      	ldr	r3, [r3, #8]
 8001f76:	f003 030c 	and.w	r3, r3, #12
 8001f7a:	2b04      	cmp	r3, #4
 8001f7c:	d00c      	beq.n	8001f98 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f7e:	4b85      	ldr	r3, [pc, #532]	; (8002194 <HAL_RCC_OscConfig+0x240>)
 8001f80:	689b      	ldr	r3, [r3, #8]
 8001f82:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001f86:	2b08      	cmp	r3, #8
 8001f88:	d112      	bne.n	8001fb0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f8a:	4b82      	ldr	r3, [pc, #520]	; (8002194 <HAL_RCC_OscConfig+0x240>)
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f92:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001f96:	d10b      	bne.n	8001fb0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f98:	4b7e      	ldr	r3, [pc, #504]	; (8002194 <HAL_RCC_OscConfig+0x240>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d05b      	beq.n	800205c <HAL_RCC_OscConfig+0x108>
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d157      	bne.n	800205c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001fac:	2301      	movs	r3, #1
 8001fae:	e242      	b.n	8002436 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fb8:	d106      	bne.n	8001fc8 <HAL_RCC_OscConfig+0x74>
 8001fba:	4b76      	ldr	r3, [pc, #472]	; (8002194 <HAL_RCC_OscConfig+0x240>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4a75      	ldr	r2, [pc, #468]	; (8002194 <HAL_RCC_OscConfig+0x240>)
 8001fc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fc4:	6013      	str	r3, [r2, #0]
 8001fc6:	e01d      	b.n	8002004 <HAL_RCC_OscConfig+0xb0>
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001fd0:	d10c      	bne.n	8001fec <HAL_RCC_OscConfig+0x98>
 8001fd2:	4b70      	ldr	r3, [pc, #448]	; (8002194 <HAL_RCC_OscConfig+0x240>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	4a6f      	ldr	r2, [pc, #444]	; (8002194 <HAL_RCC_OscConfig+0x240>)
 8001fd8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001fdc:	6013      	str	r3, [r2, #0]
 8001fde:	4b6d      	ldr	r3, [pc, #436]	; (8002194 <HAL_RCC_OscConfig+0x240>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4a6c      	ldr	r2, [pc, #432]	; (8002194 <HAL_RCC_OscConfig+0x240>)
 8001fe4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fe8:	6013      	str	r3, [r2, #0]
 8001fea:	e00b      	b.n	8002004 <HAL_RCC_OscConfig+0xb0>
 8001fec:	4b69      	ldr	r3, [pc, #420]	; (8002194 <HAL_RCC_OscConfig+0x240>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4a68      	ldr	r2, [pc, #416]	; (8002194 <HAL_RCC_OscConfig+0x240>)
 8001ff2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ff6:	6013      	str	r3, [r2, #0]
 8001ff8:	4b66      	ldr	r3, [pc, #408]	; (8002194 <HAL_RCC_OscConfig+0x240>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4a65      	ldr	r2, [pc, #404]	; (8002194 <HAL_RCC_OscConfig+0x240>)
 8001ffe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002002:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	2b00      	cmp	r3, #0
 800200a:	d013      	beq.n	8002034 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800200c:	f7ff fbd6 	bl	80017bc <HAL_GetTick>
 8002010:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002012:	e008      	b.n	8002026 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002014:	f7ff fbd2 	bl	80017bc <HAL_GetTick>
 8002018:	4602      	mov	r2, r0
 800201a:	693b      	ldr	r3, [r7, #16]
 800201c:	1ad3      	subs	r3, r2, r3
 800201e:	2b64      	cmp	r3, #100	; 0x64
 8002020:	d901      	bls.n	8002026 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002022:	2303      	movs	r3, #3
 8002024:	e207      	b.n	8002436 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002026:	4b5b      	ldr	r3, [pc, #364]	; (8002194 <HAL_RCC_OscConfig+0x240>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800202e:	2b00      	cmp	r3, #0
 8002030:	d0f0      	beq.n	8002014 <HAL_RCC_OscConfig+0xc0>
 8002032:	e014      	b.n	800205e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002034:	f7ff fbc2 	bl	80017bc <HAL_GetTick>
 8002038:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800203a:	e008      	b.n	800204e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800203c:	f7ff fbbe 	bl	80017bc <HAL_GetTick>
 8002040:	4602      	mov	r2, r0
 8002042:	693b      	ldr	r3, [r7, #16]
 8002044:	1ad3      	subs	r3, r2, r3
 8002046:	2b64      	cmp	r3, #100	; 0x64
 8002048:	d901      	bls.n	800204e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800204a:	2303      	movs	r3, #3
 800204c:	e1f3      	b.n	8002436 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800204e:	4b51      	ldr	r3, [pc, #324]	; (8002194 <HAL_RCC_OscConfig+0x240>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002056:	2b00      	cmp	r3, #0
 8002058:	d1f0      	bne.n	800203c <HAL_RCC_OscConfig+0xe8>
 800205a:	e000      	b.n	800205e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800205c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f003 0302 	and.w	r3, r3, #2
 8002066:	2b00      	cmp	r3, #0
 8002068:	d063      	beq.n	8002132 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800206a:	4b4a      	ldr	r3, [pc, #296]	; (8002194 <HAL_RCC_OscConfig+0x240>)
 800206c:	689b      	ldr	r3, [r3, #8]
 800206e:	f003 030c 	and.w	r3, r3, #12
 8002072:	2b00      	cmp	r3, #0
 8002074:	d00b      	beq.n	800208e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002076:	4b47      	ldr	r3, [pc, #284]	; (8002194 <HAL_RCC_OscConfig+0x240>)
 8002078:	689b      	ldr	r3, [r3, #8]
 800207a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800207e:	2b08      	cmp	r3, #8
 8002080:	d11c      	bne.n	80020bc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002082:	4b44      	ldr	r3, [pc, #272]	; (8002194 <HAL_RCC_OscConfig+0x240>)
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800208a:	2b00      	cmp	r3, #0
 800208c:	d116      	bne.n	80020bc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800208e:	4b41      	ldr	r3, [pc, #260]	; (8002194 <HAL_RCC_OscConfig+0x240>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f003 0302 	and.w	r3, r3, #2
 8002096:	2b00      	cmp	r3, #0
 8002098:	d005      	beq.n	80020a6 <HAL_RCC_OscConfig+0x152>
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	68db      	ldr	r3, [r3, #12]
 800209e:	2b01      	cmp	r3, #1
 80020a0:	d001      	beq.n	80020a6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80020a2:	2301      	movs	r3, #1
 80020a4:	e1c7      	b.n	8002436 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020a6:	4b3b      	ldr	r3, [pc, #236]	; (8002194 <HAL_RCC_OscConfig+0x240>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	691b      	ldr	r3, [r3, #16]
 80020b2:	00db      	lsls	r3, r3, #3
 80020b4:	4937      	ldr	r1, [pc, #220]	; (8002194 <HAL_RCC_OscConfig+0x240>)
 80020b6:	4313      	orrs	r3, r2
 80020b8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020ba:	e03a      	b.n	8002132 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	68db      	ldr	r3, [r3, #12]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d020      	beq.n	8002106 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80020c4:	4b34      	ldr	r3, [pc, #208]	; (8002198 <HAL_RCC_OscConfig+0x244>)
 80020c6:	2201      	movs	r2, #1
 80020c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020ca:	f7ff fb77 	bl	80017bc <HAL_GetTick>
 80020ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020d0:	e008      	b.n	80020e4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80020d2:	f7ff fb73 	bl	80017bc <HAL_GetTick>
 80020d6:	4602      	mov	r2, r0
 80020d8:	693b      	ldr	r3, [r7, #16]
 80020da:	1ad3      	subs	r3, r2, r3
 80020dc:	2b02      	cmp	r3, #2
 80020de:	d901      	bls.n	80020e4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80020e0:	2303      	movs	r3, #3
 80020e2:	e1a8      	b.n	8002436 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020e4:	4b2b      	ldr	r3, [pc, #172]	; (8002194 <HAL_RCC_OscConfig+0x240>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f003 0302 	and.w	r3, r3, #2
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d0f0      	beq.n	80020d2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020f0:	4b28      	ldr	r3, [pc, #160]	; (8002194 <HAL_RCC_OscConfig+0x240>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	691b      	ldr	r3, [r3, #16]
 80020fc:	00db      	lsls	r3, r3, #3
 80020fe:	4925      	ldr	r1, [pc, #148]	; (8002194 <HAL_RCC_OscConfig+0x240>)
 8002100:	4313      	orrs	r3, r2
 8002102:	600b      	str	r3, [r1, #0]
 8002104:	e015      	b.n	8002132 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002106:	4b24      	ldr	r3, [pc, #144]	; (8002198 <HAL_RCC_OscConfig+0x244>)
 8002108:	2200      	movs	r2, #0
 800210a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800210c:	f7ff fb56 	bl	80017bc <HAL_GetTick>
 8002110:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002112:	e008      	b.n	8002126 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002114:	f7ff fb52 	bl	80017bc <HAL_GetTick>
 8002118:	4602      	mov	r2, r0
 800211a:	693b      	ldr	r3, [r7, #16]
 800211c:	1ad3      	subs	r3, r2, r3
 800211e:	2b02      	cmp	r3, #2
 8002120:	d901      	bls.n	8002126 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002122:	2303      	movs	r3, #3
 8002124:	e187      	b.n	8002436 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002126:	4b1b      	ldr	r3, [pc, #108]	; (8002194 <HAL_RCC_OscConfig+0x240>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f003 0302 	and.w	r3, r3, #2
 800212e:	2b00      	cmp	r3, #0
 8002130:	d1f0      	bne.n	8002114 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f003 0308 	and.w	r3, r3, #8
 800213a:	2b00      	cmp	r3, #0
 800213c:	d036      	beq.n	80021ac <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	695b      	ldr	r3, [r3, #20]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d016      	beq.n	8002174 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002146:	4b15      	ldr	r3, [pc, #84]	; (800219c <HAL_RCC_OscConfig+0x248>)
 8002148:	2201      	movs	r2, #1
 800214a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800214c:	f7ff fb36 	bl	80017bc <HAL_GetTick>
 8002150:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002152:	e008      	b.n	8002166 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002154:	f7ff fb32 	bl	80017bc <HAL_GetTick>
 8002158:	4602      	mov	r2, r0
 800215a:	693b      	ldr	r3, [r7, #16]
 800215c:	1ad3      	subs	r3, r2, r3
 800215e:	2b02      	cmp	r3, #2
 8002160:	d901      	bls.n	8002166 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002162:	2303      	movs	r3, #3
 8002164:	e167      	b.n	8002436 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002166:	4b0b      	ldr	r3, [pc, #44]	; (8002194 <HAL_RCC_OscConfig+0x240>)
 8002168:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800216a:	f003 0302 	and.w	r3, r3, #2
 800216e:	2b00      	cmp	r3, #0
 8002170:	d0f0      	beq.n	8002154 <HAL_RCC_OscConfig+0x200>
 8002172:	e01b      	b.n	80021ac <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002174:	4b09      	ldr	r3, [pc, #36]	; (800219c <HAL_RCC_OscConfig+0x248>)
 8002176:	2200      	movs	r2, #0
 8002178:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800217a:	f7ff fb1f 	bl	80017bc <HAL_GetTick>
 800217e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002180:	e00e      	b.n	80021a0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002182:	f7ff fb1b 	bl	80017bc <HAL_GetTick>
 8002186:	4602      	mov	r2, r0
 8002188:	693b      	ldr	r3, [r7, #16]
 800218a:	1ad3      	subs	r3, r2, r3
 800218c:	2b02      	cmp	r3, #2
 800218e:	d907      	bls.n	80021a0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002190:	2303      	movs	r3, #3
 8002192:	e150      	b.n	8002436 <HAL_RCC_OscConfig+0x4e2>
 8002194:	40023800 	.word	0x40023800
 8002198:	42470000 	.word	0x42470000
 800219c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021a0:	4b88      	ldr	r3, [pc, #544]	; (80023c4 <HAL_RCC_OscConfig+0x470>)
 80021a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021a4:	f003 0302 	and.w	r3, r3, #2
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d1ea      	bne.n	8002182 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f003 0304 	and.w	r3, r3, #4
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	f000 8097 	beq.w	80022e8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021ba:	2300      	movs	r3, #0
 80021bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021be:	4b81      	ldr	r3, [pc, #516]	; (80023c4 <HAL_RCC_OscConfig+0x470>)
 80021c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d10f      	bne.n	80021ea <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021ca:	2300      	movs	r3, #0
 80021cc:	60bb      	str	r3, [r7, #8]
 80021ce:	4b7d      	ldr	r3, [pc, #500]	; (80023c4 <HAL_RCC_OscConfig+0x470>)
 80021d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d2:	4a7c      	ldr	r2, [pc, #496]	; (80023c4 <HAL_RCC_OscConfig+0x470>)
 80021d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021d8:	6413      	str	r3, [r2, #64]	; 0x40
 80021da:	4b7a      	ldr	r3, [pc, #488]	; (80023c4 <HAL_RCC_OscConfig+0x470>)
 80021dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021e2:	60bb      	str	r3, [r7, #8]
 80021e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80021e6:	2301      	movs	r3, #1
 80021e8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021ea:	4b77      	ldr	r3, [pc, #476]	; (80023c8 <HAL_RCC_OscConfig+0x474>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d118      	bne.n	8002228 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80021f6:	4b74      	ldr	r3, [pc, #464]	; (80023c8 <HAL_RCC_OscConfig+0x474>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4a73      	ldr	r2, [pc, #460]	; (80023c8 <HAL_RCC_OscConfig+0x474>)
 80021fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002200:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002202:	f7ff fadb 	bl	80017bc <HAL_GetTick>
 8002206:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002208:	e008      	b.n	800221c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800220a:	f7ff fad7 	bl	80017bc <HAL_GetTick>
 800220e:	4602      	mov	r2, r0
 8002210:	693b      	ldr	r3, [r7, #16]
 8002212:	1ad3      	subs	r3, r2, r3
 8002214:	2b02      	cmp	r3, #2
 8002216:	d901      	bls.n	800221c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002218:	2303      	movs	r3, #3
 800221a:	e10c      	b.n	8002436 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800221c:	4b6a      	ldr	r3, [pc, #424]	; (80023c8 <HAL_RCC_OscConfig+0x474>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002224:	2b00      	cmp	r3, #0
 8002226:	d0f0      	beq.n	800220a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	689b      	ldr	r3, [r3, #8]
 800222c:	2b01      	cmp	r3, #1
 800222e:	d106      	bne.n	800223e <HAL_RCC_OscConfig+0x2ea>
 8002230:	4b64      	ldr	r3, [pc, #400]	; (80023c4 <HAL_RCC_OscConfig+0x470>)
 8002232:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002234:	4a63      	ldr	r2, [pc, #396]	; (80023c4 <HAL_RCC_OscConfig+0x470>)
 8002236:	f043 0301 	orr.w	r3, r3, #1
 800223a:	6713      	str	r3, [r2, #112]	; 0x70
 800223c:	e01c      	b.n	8002278 <HAL_RCC_OscConfig+0x324>
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	689b      	ldr	r3, [r3, #8]
 8002242:	2b05      	cmp	r3, #5
 8002244:	d10c      	bne.n	8002260 <HAL_RCC_OscConfig+0x30c>
 8002246:	4b5f      	ldr	r3, [pc, #380]	; (80023c4 <HAL_RCC_OscConfig+0x470>)
 8002248:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800224a:	4a5e      	ldr	r2, [pc, #376]	; (80023c4 <HAL_RCC_OscConfig+0x470>)
 800224c:	f043 0304 	orr.w	r3, r3, #4
 8002250:	6713      	str	r3, [r2, #112]	; 0x70
 8002252:	4b5c      	ldr	r3, [pc, #368]	; (80023c4 <HAL_RCC_OscConfig+0x470>)
 8002254:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002256:	4a5b      	ldr	r2, [pc, #364]	; (80023c4 <HAL_RCC_OscConfig+0x470>)
 8002258:	f043 0301 	orr.w	r3, r3, #1
 800225c:	6713      	str	r3, [r2, #112]	; 0x70
 800225e:	e00b      	b.n	8002278 <HAL_RCC_OscConfig+0x324>
 8002260:	4b58      	ldr	r3, [pc, #352]	; (80023c4 <HAL_RCC_OscConfig+0x470>)
 8002262:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002264:	4a57      	ldr	r2, [pc, #348]	; (80023c4 <HAL_RCC_OscConfig+0x470>)
 8002266:	f023 0301 	bic.w	r3, r3, #1
 800226a:	6713      	str	r3, [r2, #112]	; 0x70
 800226c:	4b55      	ldr	r3, [pc, #340]	; (80023c4 <HAL_RCC_OscConfig+0x470>)
 800226e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002270:	4a54      	ldr	r2, [pc, #336]	; (80023c4 <HAL_RCC_OscConfig+0x470>)
 8002272:	f023 0304 	bic.w	r3, r3, #4
 8002276:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	689b      	ldr	r3, [r3, #8]
 800227c:	2b00      	cmp	r3, #0
 800227e:	d015      	beq.n	80022ac <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002280:	f7ff fa9c 	bl	80017bc <HAL_GetTick>
 8002284:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002286:	e00a      	b.n	800229e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002288:	f7ff fa98 	bl	80017bc <HAL_GetTick>
 800228c:	4602      	mov	r2, r0
 800228e:	693b      	ldr	r3, [r7, #16]
 8002290:	1ad3      	subs	r3, r2, r3
 8002292:	f241 3288 	movw	r2, #5000	; 0x1388
 8002296:	4293      	cmp	r3, r2
 8002298:	d901      	bls.n	800229e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800229a:	2303      	movs	r3, #3
 800229c:	e0cb      	b.n	8002436 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800229e:	4b49      	ldr	r3, [pc, #292]	; (80023c4 <HAL_RCC_OscConfig+0x470>)
 80022a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022a2:	f003 0302 	and.w	r3, r3, #2
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d0ee      	beq.n	8002288 <HAL_RCC_OscConfig+0x334>
 80022aa:	e014      	b.n	80022d6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022ac:	f7ff fa86 	bl	80017bc <HAL_GetTick>
 80022b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022b2:	e00a      	b.n	80022ca <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022b4:	f7ff fa82 	bl	80017bc <HAL_GetTick>
 80022b8:	4602      	mov	r2, r0
 80022ba:	693b      	ldr	r3, [r7, #16]
 80022bc:	1ad3      	subs	r3, r2, r3
 80022be:	f241 3288 	movw	r2, #5000	; 0x1388
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d901      	bls.n	80022ca <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80022c6:	2303      	movs	r3, #3
 80022c8:	e0b5      	b.n	8002436 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022ca:	4b3e      	ldr	r3, [pc, #248]	; (80023c4 <HAL_RCC_OscConfig+0x470>)
 80022cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022ce:	f003 0302 	and.w	r3, r3, #2
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d1ee      	bne.n	80022b4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80022d6:	7dfb      	ldrb	r3, [r7, #23]
 80022d8:	2b01      	cmp	r3, #1
 80022da:	d105      	bne.n	80022e8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022dc:	4b39      	ldr	r3, [pc, #228]	; (80023c4 <HAL_RCC_OscConfig+0x470>)
 80022de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e0:	4a38      	ldr	r2, [pc, #224]	; (80023c4 <HAL_RCC_OscConfig+0x470>)
 80022e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022e6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	699b      	ldr	r3, [r3, #24]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	f000 80a1 	beq.w	8002434 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80022f2:	4b34      	ldr	r3, [pc, #208]	; (80023c4 <HAL_RCC_OscConfig+0x470>)
 80022f4:	689b      	ldr	r3, [r3, #8]
 80022f6:	f003 030c 	and.w	r3, r3, #12
 80022fa:	2b08      	cmp	r3, #8
 80022fc:	d05c      	beq.n	80023b8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	699b      	ldr	r3, [r3, #24]
 8002302:	2b02      	cmp	r3, #2
 8002304:	d141      	bne.n	800238a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002306:	4b31      	ldr	r3, [pc, #196]	; (80023cc <HAL_RCC_OscConfig+0x478>)
 8002308:	2200      	movs	r2, #0
 800230a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800230c:	f7ff fa56 	bl	80017bc <HAL_GetTick>
 8002310:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002312:	e008      	b.n	8002326 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002314:	f7ff fa52 	bl	80017bc <HAL_GetTick>
 8002318:	4602      	mov	r2, r0
 800231a:	693b      	ldr	r3, [r7, #16]
 800231c:	1ad3      	subs	r3, r2, r3
 800231e:	2b02      	cmp	r3, #2
 8002320:	d901      	bls.n	8002326 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002322:	2303      	movs	r3, #3
 8002324:	e087      	b.n	8002436 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002326:	4b27      	ldr	r3, [pc, #156]	; (80023c4 <HAL_RCC_OscConfig+0x470>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800232e:	2b00      	cmp	r3, #0
 8002330:	d1f0      	bne.n	8002314 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	69da      	ldr	r2, [r3, #28]
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6a1b      	ldr	r3, [r3, #32]
 800233a:	431a      	orrs	r2, r3
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002340:	019b      	lsls	r3, r3, #6
 8002342:	431a      	orrs	r2, r3
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002348:	085b      	lsrs	r3, r3, #1
 800234a:	3b01      	subs	r3, #1
 800234c:	041b      	lsls	r3, r3, #16
 800234e:	431a      	orrs	r2, r3
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002354:	061b      	lsls	r3, r3, #24
 8002356:	491b      	ldr	r1, [pc, #108]	; (80023c4 <HAL_RCC_OscConfig+0x470>)
 8002358:	4313      	orrs	r3, r2
 800235a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800235c:	4b1b      	ldr	r3, [pc, #108]	; (80023cc <HAL_RCC_OscConfig+0x478>)
 800235e:	2201      	movs	r2, #1
 8002360:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002362:	f7ff fa2b 	bl	80017bc <HAL_GetTick>
 8002366:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002368:	e008      	b.n	800237c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800236a:	f7ff fa27 	bl	80017bc <HAL_GetTick>
 800236e:	4602      	mov	r2, r0
 8002370:	693b      	ldr	r3, [r7, #16]
 8002372:	1ad3      	subs	r3, r2, r3
 8002374:	2b02      	cmp	r3, #2
 8002376:	d901      	bls.n	800237c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002378:	2303      	movs	r3, #3
 800237a:	e05c      	b.n	8002436 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800237c:	4b11      	ldr	r3, [pc, #68]	; (80023c4 <HAL_RCC_OscConfig+0x470>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002384:	2b00      	cmp	r3, #0
 8002386:	d0f0      	beq.n	800236a <HAL_RCC_OscConfig+0x416>
 8002388:	e054      	b.n	8002434 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800238a:	4b10      	ldr	r3, [pc, #64]	; (80023cc <HAL_RCC_OscConfig+0x478>)
 800238c:	2200      	movs	r2, #0
 800238e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002390:	f7ff fa14 	bl	80017bc <HAL_GetTick>
 8002394:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002396:	e008      	b.n	80023aa <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002398:	f7ff fa10 	bl	80017bc <HAL_GetTick>
 800239c:	4602      	mov	r2, r0
 800239e:	693b      	ldr	r3, [r7, #16]
 80023a0:	1ad3      	subs	r3, r2, r3
 80023a2:	2b02      	cmp	r3, #2
 80023a4:	d901      	bls.n	80023aa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80023a6:	2303      	movs	r3, #3
 80023a8:	e045      	b.n	8002436 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023aa:	4b06      	ldr	r3, [pc, #24]	; (80023c4 <HAL_RCC_OscConfig+0x470>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d1f0      	bne.n	8002398 <HAL_RCC_OscConfig+0x444>
 80023b6:	e03d      	b.n	8002434 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	699b      	ldr	r3, [r3, #24]
 80023bc:	2b01      	cmp	r3, #1
 80023be:	d107      	bne.n	80023d0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80023c0:	2301      	movs	r3, #1
 80023c2:	e038      	b.n	8002436 <HAL_RCC_OscConfig+0x4e2>
 80023c4:	40023800 	.word	0x40023800
 80023c8:	40007000 	.word	0x40007000
 80023cc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80023d0:	4b1b      	ldr	r3, [pc, #108]	; (8002440 <HAL_RCC_OscConfig+0x4ec>)
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	699b      	ldr	r3, [r3, #24]
 80023da:	2b01      	cmp	r3, #1
 80023dc:	d028      	beq.n	8002430 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80023e8:	429a      	cmp	r2, r3
 80023ea:	d121      	bne.n	8002430 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023f6:	429a      	cmp	r2, r3
 80023f8:	d11a      	bne.n	8002430 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80023fa:	68fa      	ldr	r2, [r7, #12]
 80023fc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002400:	4013      	ands	r3, r2
 8002402:	687a      	ldr	r2, [r7, #4]
 8002404:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002406:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002408:	4293      	cmp	r3, r2
 800240a:	d111      	bne.n	8002430 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002416:	085b      	lsrs	r3, r3, #1
 8002418:	3b01      	subs	r3, #1
 800241a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800241c:	429a      	cmp	r2, r3
 800241e:	d107      	bne.n	8002430 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800242a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800242c:	429a      	cmp	r2, r3
 800242e:	d001      	beq.n	8002434 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002430:	2301      	movs	r3, #1
 8002432:	e000      	b.n	8002436 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002434:	2300      	movs	r3, #0
}
 8002436:	4618      	mov	r0, r3
 8002438:	3718      	adds	r7, #24
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}
 800243e:	bf00      	nop
 8002440:	40023800 	.word	0x40023800

08002444 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b084      	sub	sp, #16
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
 800244c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d101      	bne.n	8002458 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002454:	2301      	movs	r3, #1
 8002456:	e0cc      	b.n	80025f2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002458:	4b68      	ldr	r3, [pc, #416]	; (80025fc <HAL_RCC_ClockConfig+0x1b8>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f003 030f 	and.w	r3, r3, #15
 8002460:	683a      	ldr	r2, [r7, #0]
 8002462:	429a      	cmp	r2, r3
 8002464:	d90c      	bls.n	8002480 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002466:	4b65      	ldr	r3, [pc, #404]	; (80025fc <HAL_RCC_ClockConfig+0x1b8>)
 8002468:	683a      	ldr	r2, [r7, #0]
 800246a:	b2d2      	uxtb	r2, r2
 800246c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800246e:	4b63      	ldr	r3, [pc, #396]	; (80025fc <HAL_RCC_ClockConfig+0x1b8>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f003 030f 	and.w	r3, r3, #15
 8002476:	683a      	ldr	r2, [r7, #0]
 8002478:	429a      	cmp	r2, r3
 800247a:	d001      	beq.n	8002480 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800247c:	2301      	movs	r3, #1
 800247e:	e0b8      	b.n	80025f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f003 0302 	and.w	r3, r3, #2
 8002488:	2b00      	cmp	r3, #0
 800248a:	d020      	beq.n	80024ce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f003 0304 	and.w	r3, r3, #4
 8002494:	2b00      	cmp	r3, #0
 8002496:	d005      	beq.n	80024a4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002498:	4b59      	ldr	r3, [pc, #356]	; (8002600 <HAL_RCC_ClockConfig+0x1bc>)
 800249a:	689b      	ldr	r3, [r3, #8]
 800249c:	4a58      	ldr	r2, [pc, #352]	; (8002600 <HAL_RCC_ClockConfig+0x1bc>)
 800249e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80024a2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f003 0308 	and.w	r3, r3, #8
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d005      	beq.n	80024bc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80024b0:	4b53      	ldr	r3, [pc, #332]	; (8002600 <HAL_RCC_ClockConfig+0x1bc>)
 80024b2:	689b      	ldr	r3, [r3, #8]
 80024b4:	4a52      	ldr	r2, [pc, #328]	; (8002600 <HAL_RCC_ClockConfig+0x1bc>)
 80024b6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80024ba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024bc:	4b50      	ldr	r3, [pc, #320]	; (8002600 <HAL_RCC_ClockConfig+0x1bc>)
 80024be:	689b      	ldr	r3, [r3, #8]
 80024c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	689b      	ldr	r3, [r3, #8]
 80024c8:	494d      	ldr	r1, [pc, #308]	; (8002600 <HAL_RCC_ClockConfig+0x1bc>)
 80024ca:	4313      	orrs	r3, r2
 80024cc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f003 0301 	and.w	r3, r3, #1
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d044      	beq.n	8002564 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	2b01      	cmp	r3, #1
 80024e0:	d107      	bne.n	80024f2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024e2:	4b47      	ldr	r3, [pc, #284]	; (8002600 <HAL_RCC_ClockConfig+0x1bc>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d119      	bne.n	8002522 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024ee:	2301      	movs	r3, #1
 80024f0:	e07f      	b.n	80025f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	2b02      	cmp	r3, #2
 80024f8:	d003      	beq.n	8002502 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80024fe:	2b03      	cmp	r3, #3
 8002500:	d107      	bne.n	8002512 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002502:	4b3f      	ldr	r3, [pc, #252]	; (8002600 <HAL_RCC_ClockConfig+0x1bc>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800250a:	2b00      	cmp	r3, #0
 800250c:	d109      	bne.n	8002522 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800250e:	2301      	movs	r3, #1
 8002510:	e06f      	b.n	80025f2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002512:	4b3b      	ldr	r3, [pc, #236]	; (8002600 <HAL_RCC_ClockConfig+0x1bc>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f003 0302 	and.w	r3, r3, #2
 800251a:	2b00      	cmp	r3, #0
 800251c:	d101      	bne.n	8002522 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800251e:	2301      	movs	r3, #1
 8002520:	e067      	b.n	80025f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002522:	4b37      	ldr	r3, [pc, #220]	; (8002600 <HAL_RCC_ClockConfig+0x1bc>)
 8002524:	689b      	ldr	r3, [r3, #8]
 8002526:	f023 0203 	bic.w	r2, r3, #3
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	4934      	ldr	r1, [pc, #208]	; (8002600 <HAL_RCC_ClockConfig+0x1bc>)
 8002530:	4313      	orrs	r3, r2
 8002532:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002534:	f7ff f942 	bl	80017bc <HAL_GetTick>
 8002538:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800253a:	e00a      	b.n	8002552 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800253c:	f7ff f93e 	bl	80017bc <HAL_GetTick>
 8002540:	4602      	mov	r2, r0
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	1ad3      	subs	r3, r2, r3
 8002546:	f241 3288 	movw	r2, #5000	; 0x1388
 800254a:	4293      	cmp	r3, r2
 800254c:	d901      	bls.n	8002552 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800254e:	2303      	movs	r3, #3
 8002550:	e04f      	b.n	80025f2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002552:	4b2b      	ldr	r3, [pc, #172]	; (8002600 <HAL_RCC_ClockConfig+0x1bc>)
 8002554:	689b      	ldr	r3, [r3, #8]
 8002556:	f003 020c 	and.w	r2, r3, #12
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	009b      	lsls	r3, r3, #2
 8002560:	429a      	cmp	r2, r3
 8002562:	d1eb      	bne.n	800253c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002564:	4b25      	ldr	r3, [pc, #148]	; (80025fc <HAL_RCC_ClockConfig+0x1b8>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f003 030f 	and.w	r3, r3, #15
 800256c:	683a      	ldr	r2, [r7, #0]
 800256e:	429a      	cmp	r2, r3
 8002570:	d20c      	bcs.n	800258c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002572:	4b22      	ldr	r3, [pc, #136]	; (80025fc <HAL_RCC_ClockConfig+0x1b8>)
 8002574:	683a      	ldr	r2, [r7, #0]
 8002576:	b2d2      	uxtb	r2, r2
 8002578:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800257a:	4b20      	ldr	r3, [pc, #128]	; (80025fc <HAL_RCC_ClockConfig+0x1b8>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f003 030f 	and.w	r3, r3, #15
 8002582:	683a      	ldr	r2, [r7, #0]
 8002584:	429a      	cmp	r2, r3
 8002586:	d001      	beq.n	800258c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002588:	2301      	movs	r3, #1
 800258a:	e032      	b.n	80025f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f003 0304 	and.w	r3, r3, #4
 8002594:	2b00      	cmp	r3, #0
 8002596:	d008      	beq.n	80025aa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002598:	4b19      	ldr	r3, [pc, #100]	; (8002600 <HAL_RCC_ClockConfig+0x1bc>)
 800259a:	689b      	ldr	r3, [r3, #8]
 800259c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	68db      	ldr	r3, [r3, #12]
 80025a4:	4916      	ldr	r1, [pc, #88]	; (8002600 <HAL_RCC_ClockConfig+0x1bc>)
 80025a6:	4313      	orrs	r3, r2
 80025a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f003 0308 	and.w	r3, r3, #8
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d009      	beq.n	80025ca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80025b6:	4b12      	ldr	r3, [pc, #72]	; (8002600 <HAL_RCC_ClockConfig+0x1bc>)
 80025b8:	689b      	ldr	r3, [r3, #8]
 80025ba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	691b      	ldr	r3, [r3, #16]
 80025c2:	00db      	lsls	r3, r3, #3
 80025c4:	490e      	ldr	r1, [pc, #56]	; (8002600 <HAL_RCC_ClockConfig+0x1bc>)
 80025c6:	4313      	orrs	r3, r2
 80025c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80025ca:	f000 f821 	bl	8002610 <HAL_RCC_GetSysClockFreq>
 80025ce:	4602      	mov	r2, r0
 80025d0:	4b0b      	ldr	r3, [pc, #44]	; (8002600 <HAL_RCC_ClockConfig+0x1bc>)
 80025d2:	689b      	ldr	r3, [r3, #8]
 80025d4:	091b      	lsrs	r3, r3, #4
 80025d6:	f003 030f 	and.w	r3, r3, #15
 80025da:	490a      	ldr	r1, [pc, #40]	; (8002604 <HAL_RCC_ClockConfig+0x1c0>)
 80025dc:	5ccb      	ldrb	r3, [r1, r3]
 80025de:	fa22 f303 	lsr.w	r3, r2, r3
 80025e2:	4a09      	ldr	r2, [pc, #36]	; (8002608 <HAL_RCC_ClockConfig+0x1c4>)
 80025e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80025e6:	4b09      	ldr	r3, [pc, #36]	; (800260c <HAL_RCC_ClockConfig+0x1c8>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4618      	mov	r0, r3
 80025ec:	f7ff f8a2 	bl	8001734 <HAL_InitTick>

  return HAL_OK;
 80025f0:	2300      	movs	r3, #0
}
 80025f2:	4618      	mov	r0, r3
 80025f4:	3710      	adds	r7, #16
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bd80      	pop	{r7, pc}
 80025fa:	bf00      	nop
 80025fc:	40023c00 	.word	0x40023c00
 8002600:	40023800 	.word	0x40023800
 8002604:	08006370 	.word	0x08006370
 8002608:	20000314 	.word	0x20000314
 800260c:	20000318 	.word	0x20000318

08002610 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002610:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002614:	b090      	sub	sp, #64	; 0x40
 8002616:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002618:	2300      	movs	r3, #0
 800261a:	637b      	str	r3, [r7, #52]	; 0x34
 800261c:	2300      	movs	r3, #0
 800261e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002620:	2300      	movs	r3, #0
 8002622:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002624:	2300      	movs	r3, #0
 8002626:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002628:	4b59      	ldr	r3, [pc, #356]	; (8002790 <HAL_RCC_GetSysClockFreq+0x180>)
 800262a:	689b      	ldr	r3, [r3, #8]
 800262c:	f003 030c 	and.w	r3, r3, #12
 8002630:	2b08      	cmp	r3, #8
 8002632:	d00d      	beq.n	8002650 <HAL_RCC_GetSysClockFreq+0x40>
 8002634:	2b08      	cmp	r3, #8
 8002636:	f200 80a1 	bhi.w	800277c <HAL_RCC_GetSysClockFreq+0x16c>
 800263a:	2b00      	cmp	r3, #0
 800263c:	d002      	beq.n	8002644 <HAL_RCC_GetSysClockFreq+0x34>
 800263e:	2b04      	cmp	r3, #4
 8002640:	d003      	beq.n	800264a <HAL_RCC_GetSysClockFreq+0x3a>
 8002642:	e09b      	b.n	800277c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002644:	4b53      	ldr	r3, [pc, #332]	; (8002794 <HAL_RCC_GetSysClockFreq+0x184>)
 8002646:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002648:	e09b      	b.n	8002782 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800264a:	4b53      	ldr	r3, [pc, #332]	; (8002798 <HAL_RCC_GetSysClockFreq+0x188>)
 800264c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800264e:	e098      	b.n	8002782 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002650:	4b4f      	ldr	r3, [pc, #316]	; (8002790 <HAL_RCC_GetSysClockFreq+0x180>)
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002658:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800265a:	4b4d      	ldr	r3, [pc, #308]	; (8002790 <HAL_RCC_GetSysClockFreq+0x180>)
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002662:	2b00      	cmp	r3, #0
 8002664:	d028      	beq.n	80026b8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002666:	4b4a      	ldr	r3, [pc, #296]	; (8002790 <HAL_RCC_GetSysClockFreq+0x180>)
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	099b      	lsrs	r3, r3, #6
 800266c:	2200      	movs	r2, #0
 800266e:	623b      	str	r3, [r7, #32]
 8002670:	627a      	str	r2, [r7, #36]	; 0x24
 8002672:	6a3b      	ldr	r3, [r7, #32]
 8002674:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002678:	2100      	movs	r1, #0
 800267a:	4b47      	ldr	r3, [pc, #284]	; (8002798 <HAL_RCC_GetSysClockFreq+0x188>)
 800267c:	fb03 f201 	mul.w	r2, r3, r1
 8002680:	2300      	movs	r3, #0
 8002682:	fb00 f303 	mul.w	r3, r0, r3
 8002686:	4413      	add	r3, r2
 8002688:	4a43      	ldr	r2, [pc, #268]	; (8002798 <HAL_RCC_GetSysClockFreq+0x188>)
 800268a:	fba0 1202 	umull	r1, r2, r0, r2
 800268e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002690:	460a      	mov	r2, r1
 8002692:	62ba      	str	r2, [r7, #40]	; 0x28
 8002694:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002696:	4413      	add	r3, r2
 8002698:	62fb      	str	r3, [r7, #44]	; 0x2c
 800269a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800269c:	2200      	movs	r2, #0
 800269e:	61bb      	str	r3, [r7, #24]
 80026a0:	61fa      	str	r2, [r7, #28]
 80026a2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80026a6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80026aa:	f7fd fe09 	bl	80002c0 <__aeabi_uldivmod>
 80026ae:	4602      	mov	r2, r0
 80026b0:	460b      	mov	r3, r1
 80026b2:	4613      	mov	r3, r2
 80026b4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80026b6:	e053      	b.n	8002760 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80026b8:	4b35      	ldr	r3, [pc, #212]	; (8002790 <HAL_RCC_GetSysClockFreq+0x180>)
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	099b      	lsrs	r3, r3, #6
 80026be:	2200      	movs	r2, #0
 80026c0:	613b      	str	r3, [r7, #16]
 80026c2:	617a      	str	r2, [r7, #20]
 80026c4:	693b      	ldr	r3, [r7, #16]
 80026c6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80026ca:	f04f 0b00 	mov.w	fp, #0
 80026ce:	4652      	mov	r2, sl
 80026d0:	465b      	mov	r3, fp
 80026d2:	f04f 0000 	mov.w	r0, #0
 80026d6:	f04f 0100 	mov.w	r1, #0
 80026da:	0159      	lsls	r1, r3, #5
 80026dc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80026e0:	0150      	lsls	r0, r2, #5
 80026e2:	4602      	mov	r2, r0
 80026e4:	460b      	mov	r3, r1
 80026e6:	ebb2 080a 	subs.w	r8, r2, sl
 80026ea:	eb63 090b 	sbc.w	r9, r3, fp
 80026ee:	f04f 0200 	mov.w	r2, #0
 80026f2:	f04f 0300 	mov.w	r3, #0
 80026f6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80026fa:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80026fe:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002702:	ebb2 0408 	subs.w	r4, r2, r8
 8002706:	eb63 0509 	sbc.w	r5, r3, r9
 800270a:	f04f 0200 	mov.w	r2, #0
 800270e:	f04f 0300 	mov.w	r3, #0
 8002712:	00eb      	lsls	r3, r5, #3
 8002714:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002718:	00e2      	lsls	r2, r4, #3
 800271a:	4614      	mov	r4, r2
 800271c:	461d      	mov	r5, r3
 800271e:	eb14 030a 	adds.w	r3, r4, sl
 8002722:	603b      	str	r3, [r7, #0]
 8002724:	eb45 030b 	adc.w	r3, r5, fp
 8002728:	607b      	str	r3, [r7, #4]
 800272a:	f04f 0200 	mov.w	r2, #0
 800272e:	f04f 0300 	mov.w	r3, #0
 8002732:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002736:	4629      	mov	r1, r5
 8002738:	028b      	lsls	r3, r1, #10
 800273a:	4621      	mov	r1, r4
 800273c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002740:	4621      	mov	r1, r4
 8002742:	028a      	lsls	r2, r1, #10
 8002744:	4610      	mov	r0, r2
 8002746:	4619      	mov	r1, r3
 8002748:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800274a:	2200      	movs	r2, #0
 800274c:	60bb      	str	r3, [r7, #8]
 800274e:	60fa      	str	r2, [r7, #12]
 8002750:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002754:	f7fd fdb4 	bl	80002c0 <__aeabi_uldivmod>
 8002758:	4602      	mov	r2, r0
 800275a:	460b      	mov	r3, r1
 800275c:	4613      	mov	r3, r2
 800275e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002760:	4b0b      	ldr	r3, [pc, #44]	; (8002790 <HAL_RCC_GetSysClockFreq+0x180>)
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	0c1b      	lsrs	r3, r3, #16
 8002766:	f003 0303 	and.w	r3, r3, #3
 800276a:	3301      	adds	r3, #1
 800276c:	005b      	lsls	r3, r3, #1
 800276e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002770:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002772:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002774:	fbb2 f3f3 	udiv	r3, r2, r3
 8002778:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800277a:	e002      	b.n	8002782 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800277c:	4b05      	ldr	r3, [pc, #20]	; (8002794 <HAL_RCC_GetSysClockFreq+0x184>)
 800277e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002780:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002782:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002784:	4618      	mov	r0, r3
 8002786:	3740      	adds	r7, #64	; 0x40
 8002788:	46bd      	mov	sp, r7
 800278a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800278e:	bf00      	nop
 8002790:	40023800 	.word	0x40023800
 8002794:	00f42400 	.word	0x00f42400
 8002798:	017d7840 	.word	0x017d7840

0800279c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800279c:	b480      	push	{r7}
 800279e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80027a0:	4b03      	ldr	r3, [pc, #12]	; (80027b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80027a2:	681b      	ldr	r3, [r3, #0]
}
 80027a4:	4618      	mov	r0, r3
 80027a6:	46bd      	mov	sp, r7
 80027a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ac:	4770      	bx	lr
 80027ae:	bf00      	nop
 80027b0:	20000314 	.word	0x20000314

080027b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80027b8:	f7ff fff0 	bl	800279c <HAL_RCC_GetHCLKFreq>
 80027bc:	4602      	mov	r2, r0
 80027be:	4b05      	ldr	r3, [pc, #20]	; (80027d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80027c0:	689b      	ldr	r3, [r3, #8]
 80027c2:	0a9b      	lsrs	r3, r3, #10
 80027c4:	f003 0307 	and.w	r3, r3, #7
 80027c8:	4903      	ldr	r1, [pc, #12]	; (80027d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80027ca:	5ccb      	ldrb	r3, [r1, r3]
 80027cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027d0:	4618      	mov	r0, r3
 80027d2:	bd80      	pop	{r7, pc}
 80027d4:	40023800 	.word	0x40023800
 80027d8:	08006380 	.word	0x08006380

080027dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80027e0:	f7ff ffdc 	bl	800279c <HAL_RCC_GetHCLKFreq>
 80027e4:	4602      	mov	r2, r0
 80027e6:	4b05      	ldr	r3, [pc, #20]	; (80027fc <HAL_RCC_GetPCLK2Freq+0x20>)
 80027e8:	689b      	ldr	r3, [r3, #8]
 80027ea:	0b5b      	lsrs	r3, r3, #13
 80027ec:	f003 0307 	and.w	r3, r3, #7
 80027f0:	4903      	ldr	r1, [pc, #12]	; (8002800 <HAL_RCC_GetPCLK2Freq+0x24>)
 80027f2:	5ccb      	ldrb	r3, [r1, r3]
 80027f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027f8:	4618      	mov	r0, r3
 80027fa:	bd80      	pop	{r7, pc}
 80027fc:	40023800 	.word	0x40023800
 8002800:	08006380 	.word	0x08006380

08002804 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b082      	sub	sp, #8
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d101      	bne.n	8002816 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002812:	2301      	movs	r3, #1
 8002814:	e03f      	b.n	8002896 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800281c:	b2db      	uxtb	r3, r3
 800281e:	2b00      	cmp	r3, #0
 8002820:	d106      	bne.n	8002830 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2200      	movs	r2, #0
 8002826:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800282a:	6878      	ldr	r0, [r7, #4]
 800282c:	f7fe fee6 	bl	80015fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2224      	movs	r2, #36	; 0x24
 8002834:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	68da      	ldr	r2, [r3, #12]
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002846:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002848:	6878      	ldr	r0, [r7, #4]
 800284a:	f001 f925 	bl	8003a98 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	691a      	ldr	r2, [r3, #16]
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800285c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	695a      	ldr	r2, [r3, #20]
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800286c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	68da      	ldr	r2, [r3, #12]
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800287c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2200      	movs	r2, #0
 8002882:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2220      	movs	r2, #32
 8002888:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2220      	movs	r2, #32
 8002890:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002894:	2300      	movs	r3, #0
}
 8002896:	4618      	mov	r0, r3
 8002898:	3708      	adds	r7, #8
 800289a:	46bd      	mov	sp, r7
 800289c:	bd80      	pop	{r7, pc}

0800289e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800289e:	b580      	push	{r7, lr}
 80028a0:	b08a      	sub	sp, #40	; 0x28
 80028a2:	af02      	add	r7, sp, #8
 80028a4:	60f8      	str	r0, [r7, #12]
 80028a6:	60b9      	str	r1, [r7, #8]
 80028a8:	603b      	str	r3, [r7, #0]
 80028aa:	4613      	mov	r3, r2
 80028ac:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80028ae:	2300      	movs	r3, #0
 80028b0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028b8:	b2db      	uxtb	r3, r3
 80028ba:	2b20      	cmp	r3, #32
 80028bc:	d17c      	bne.n	80029b8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80028be:	68bb      	ldr	r3, [r7, #8]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d002      	beq.n	80028ca <HAL_UART_Transmit+0x2c>
 80028c4:	88fb      	ldrh	r3, [r7, #6]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d101      	bne.n	80028ce <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80028ca:	2301      	movs	r3, #1
 80028cc:	e075      	b.n	80029ba <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028d4:	2b01      	cmp	r3, #1
 80028d6:	d101      	bne.n	80028dc <HAL_UART_Transmit+0x3e>
 80028d8:	2302      	movs	r3, #2
 80028da:	e06e      	b.n	80029ba <HAL_UART_Transmit+0x11c>
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	2201      	movs	r2, #1
 80028e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	2200      	movs	r2, #0
 80028e8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	2221      	movs	r2, #33	; 0x21
 80028ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80028f2:	f7fe ff63 	bl	80017bc <HAL_GetTick>
 80028f6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	88fa      	ldrh	r2, [r7, #6]
 80028fc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	88fa      	ldrh	r2, [r7, #6]
 8002902:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	689b      	ldr	r3, [r3, #8]
 8002908:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800290c:	d108      	bne.n	8002920 <HAL_UART_Transmit+0x82>
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	691b      	ldr	r3, [r3, #16]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d104      	bne.n	8002920 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002916:	2300      	movs	r3, #0
 8002918:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800291a:	68bb      	ldr	r3, [r7, #8]
 800291c:	61bb      	str	r3, [r7, #24]
 800291e:	e003      	b.n	8002928 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002920:	68bb      	ldr	r3, [r7, #8]
 8002922:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002924:	2300      	movs	r3, #0
 8002926:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	2200      	movs	r2, #0
 800292c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002930:	e02a      	b.n	8002988 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	9300      	str	r3, [sp, #0]
 8002936:	697b      	ldr	r3, [r7, #20]
 8002938:	2200      	movs	r2, #0
 800293a:	2180      	movs	r1, #128	; 0x80
 800293c:	68f8      	ldr	r0, [r7, #12]
 800293e:	f000 fe05 	bl	800354c <UART_WaitOnFlagUntilTimeout>
 8002942:	4603      	mov	r3, r0
 8002944:	2b00      	cmp	r3, #0
 8002946:	d001      	beq.n	800294c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002948:	2303      	movs	r3, #3
 800294a:	e036      	b.n	80029ba <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800294c:	69fb      	ldr	r3, [r7, #28]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d10b      	bne.n	800296a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002952:	69bb      	ldr	r3, [r7, #24]
 8002954:	881b      	ldrh	r3, [r3, #0]
 8002956:	461a      	mov	r2, r3
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002960:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002962:	69bb      	ldr	r3, [r7, #24]
 8002964:	3302      	adds	r3, #2
 8002966:	61bb      	str	r3, [r7, #24]
 8002968:	e007      	b.n	800297a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800296a:	69fb      	ldr	r3, [r7, #28]
 800296c:	781a      	ldrb	r2, [r3, #0]
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002974:	69fb      	ldr	r3, [r7, #28]
 8002976:	3301      	adds	r3, #1
 8002978:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800297e:	b29b      	uxth	r3, r3
 8002980:	3b01      	subs	r3, #1
 8002982:	b29a      	uxth	r2, r3
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800298c:	b29b      	uxth	r3, r3
 800298e:	2b00      	cmp	r3, #0
 8002990:	d1cf      	bne.n	8002932 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	9300      	str	r3, [sp, #0]
 8002996:	697b      	ldr	r3, [r7, #20]
 8002998:	2200      	movs	r2, #0
 800299a:	2140      	movs	r1, #64	; 0x40
 800299c:	68f8      	ldr	r0, [r7, #12]
 800299e:	f000 fdd5 	bl	800354c <UART_WaitOnFlagUntilTimeout>
 80029a2:	4603      	mov	r3, r0
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d001      	beq.n	80029ac <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80029a8:	2303      	movs	r3, #3
 80029aa:	e006      	b.n	80029ba <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	2220      	movs	r2, #32
 80029b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80029b4:	2300      	movs	r3, #0
 80029b6:	e000      	b.n	80029ba <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80029b8:	2302      	movs	r3, #2
  }
}
 80029ba:	4618      	mov	r0, r3
 80029bc:	3720      	adds	r7, #32
 80029be:	46bd      	mov	sp, r7
 80029c0:	bd80      	pop	{r7, pc}

080029c2 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80029c2:	b580      	push	{r7, lr}
 80029c4:	b08a      	sub	sp, #40	; 0x28
 80029c6:	af02      	add	r7, sp, #8
 80029c8:	60f8      	str	r0, [r7, #12]
 80029ca:	60b9      	str	r1, [r7, #8]
 80029cc:	603b      	str	r3, [r7, #0]
 80029ce:	4613      	mov	r3, r2
 80029d0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80029d2:	2300      	movs	r3, #0
 80029d4:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80029dc:	b2db      	uxtb	r3, r3
 80029de:	2b20      	cmp	r3, #32
 80029e0:	f040 808c 	bne.w	8002afc <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 80029e4:	68bb      	ldr	r3, [r7, #8]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d002      	beq.n	80029f0 <HAL_UART_Receive+0x2e>
 80029ea:	88fb      	ldrh	r3, [r7, #6]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d101      	bne.n	80029f4 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80029f0:	2301      	movs	r3, #1
 80029f2:	e084      	b.n	8002afe <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029fa:	2b01      	cmp	r3, #1
 80029fc:	d101      	bne.n	8002a02 <HAL_UART_Receive+0x40>
 80029fe:	2302      	movs	r3, #2
 8002a00:	e07d      	b.n	8002afe <HAL_UART_Receive+0x13c>
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	2201      	movs	r2, #1
 8002a06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	2222      	movs	r2, #34	; 0x22
 8002a14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002a1e:	f7fe fecd 	bl	80017bc <HAL_GetTick>
 8002a22:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	88fa      	ldrh	r2, [r7, #6]
 8002a28:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	88fa      	ldrh	r2, [r7, #6]
 8002a2e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	689b      	ldr	r3, [r3, #8]
 8002a34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a38:	d108      	bne.n	8002a4c <HAL_UART_Receive+0x8a>
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	691b      	ldr	r3, [r3, #16]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d104      	bne.n	8002a4c <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8002a42:	2300      	movs	r3, #0
 8002a44:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002a46:	68bb      	ldr	r3, [r7, #8]
 8002a48:	61bb      	str	r3, [r7, #24]
 8002a4a:	e003      	b.n	8002a54 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8002a4c:	68bb      	ldr	r3, [r7, #8]
 8002a4e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002a50:	2300      	movs	r3, #0
 8002a52:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	2200      	movs	r2, #0
 8002a58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8002a5c:	e043      	b.n	8002ae6 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	9300      	str	r3, [sp, #0]
 8002a62:	697b      	ldr	r3, [r7, #20]
 8002a64:	2200      	movs	r2, #0
 8002a66:	2120      	movs	r1, #32
 8002a68:	68f8      	ldr	r0, [r7, #12]
 8002a6a:	f000 fd6f 	bl	800354c <UART_WaitOnFlagUntilTimeout>
 8002a6e:	4603      	mov	r3, r0
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d001      	beq.n	8002a78 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8002a74:	2303      	movs	r3, #3
 8002a76:	e042      	b.n	8002afe <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8002a78:	69fb      	ldr	r3, [r7, #28]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d10c      	bne.n	8002a98 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	b29b      	uxth	r3, r3
 8002a86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a8a:	b29a      	uxth	r2, r3
 8002a8c:	69bb      	ldr	r3, [r7, #24]
 8002a8e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002a90:	69bb      	ldr	r3, [r7, #24]
 8002a92:	3302      	adds	r3, #2
 8002a94:	61bb      	str	r3, [r7, #24]
 8002a96:	e01f      	b.n	8002ad8 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	689b      	ldr	r3, [r3, #8]
 8002a9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002aa0:	d007      	beq.n	8002ab2 <HAL_UART_Receive+0xf0>
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	689b      	ldr	r3, [r3, #8]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d10a      	bne.n	8002ac0 <HAL_UART_Receive+0xfe>
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	691b      	ldr	r3, [r3, #16]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d106      	bne.n	8002ac0 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	b2da      	uxtb	r2, r3
 8002aba:	69fb      	ldr	r3, [r7, #28]
 8002abc:	701a      	strb	r2, [r3, #0]
 8002abe:	e008      	b.n	8002ad2 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	b2db      	uxtb	r3, r3
 8002ac8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002acc:	b2da      	uxtb	r2, r3
 8002ace:	69fb      	ldr	r3, [r7, #28]
 8002ad0:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8002ad2:	69fb      	ldr	r3, [r7, #28]
 8002ad4:	3301      	adds	r3, #1
 8002ad6:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002adc:	b29b      	uxth	r3, r3
 8002ade:	3b01      	subs	r3, #1
 8002ae0:	b29a      	uxth	r2, r3
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002aea:	b29b      	uxth	r3, r3
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d1b6      	bne.n	8002a5e <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	2220      	movs	r2, #32
 8002af4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8002af8:	2300      	movs	r3, #0
 8002afa:	e000      	b.n	8002afe <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8002afc:	2302      	movs	r3, #2
  }
}
 8002afe:	4618      	mov	r0, r3
 8002b00:	3720      	adds	r7, #32
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}

08002b06 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8002b06:	b480      	push	{r7}
 8002b08:	b085      	sub	sp, #20
 8002b0a:	af00      	add	r7, sp, #0
 8002b0c:	60f8      	str	r0, [r7, #12]
 8002b0e:	60b9      	str	r1, [r7, #8]
 8002b10:	4613      	mov	r3, r2
 8002b12:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b1a:	b2db      	uxtb	r3, r3
 8002b1c:	2b20      	cmp	r3, #32
 8002b1e:	d130      	bne.n	8002b82 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b20:	68bb      	ldr	r3, [r7, #8]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d002      	beq.n	8002b2c <HAL_UART_Transmit_IT+0x26>
 8002b26:	88fb      	ldrh	r3, [r7, #6]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d101      	bne.n	8002b30 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	e029      	b.n	8002b84 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b36:	2b01      	cmp	r3, #1
 8002b38:	d101      	bne.n	8002b3e <HAL_UART_Transmit_IT+0x38>
 8002b3a:	2302      	movs	r3, #2
 8002b3c:	e022      	b.n	8002b84 <HAL_UART_Transmit_IT+0x7e>
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	2201      	movs	r2, #1
 8002b42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	68ba      	ldr	r2, [r7, #8]
 8002b4a:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	88fa      	ldrh	r2, [r7, #6]
 8002b50:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	88fa      	ldrh	r2, [r7, #6]
 8002b56:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	2221      	movs	r2, #33	; 0x21
 8002b62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	2200      	movs	r2, #0
 8002b6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	68da      	ldr	r2, [r3, #12]
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002b7c:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8002b7e:	2300      	movs	r3, #0
 8002b80:	e000      	b.n	8002b84 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8002b82:	2302      	movs	r3, #2
  }
}
 8002b84:	4618      	mov	r0, r3
 8002b86:	3714      	adds	r7, #20
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8e:	4770      	bx	lr

08002b90 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b084      	sub	sp, #16
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	60f8      	str	r0, [r7, #12]
 8002b98:	60b9      	str	r1, [r7, #8]
 8002b9a:	4613      	mov	r3, r2
 8002b9c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002ba4:	b2db      	uxtb	r3, r3
 8002ba6:	2b20      	cmp	r3, #32
 8002ba8:	d11d      	bne.n	8002be6 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8002baa:	68bb      	ldr	r3, [r7, #8]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d002      	beq.n	8002bb6 <HAL_UART_Receive_IT+0x26>
 8002bb0:	88fb      	ldrh	r3, [r7, #6]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d101      	bne.n	8002bba <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	e016      	b.n	8002be8 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002bc0:	2b01      	cmp	r3, #1
 8002bc2:	d101      	bne.n	8002bc8 <HAL_UART_Receive_IT+0x38>
 8002bc4:	2302      	movs	r3, #2
 8002bc6:	e00f      	b.n	8002be8 <HAL_UART_Receive_IT+0x58>
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	2201      	movs	r2, #1
 8002bcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002bd6:	88fb      	ldrh	r3, [r7, #6]
 8002bd8:	461a      	mov	r2, r3
 8002bda:	68b9      	ldr	r1, [r7, #8]
 8002bdc:	68f8      	ldr	r0, [r7, #12]
 8002bde:	f000 fd23 	bl	8003628 <UART_Start_Receive_IT>
 8002be2:	4603      	mov	r3, r0
 8002be4:	e000      	b.n	8002be8 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8002be6:	2302      	movs	r3, #2
  }
}
 8002be8:	4618      	mov	r0, r3
 8002bea:	3710      	adds	r7, #16
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bd80      	pop	{r7, pc}

08002bf0 <HAL_UART_Abort>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort(UART_HandleTypeDef *huart)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b0a0      	sub	sp, #128	; 0x80
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	330c      	adds	r3, #12
 8002bfe:	65fb      	str	r3, [r7, #92]	; 0x5c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c00:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c02:	e853 3f00 	ldrex	r3, [r3]
 8002c06:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8002c08:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002c0a:	f423 73f0 	bic.w	r3, r3, #480	; 0x1e0
 8002c0e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	330c      	adds	r3, #12
 8002c16:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8002c18:	66ba      	str	r2, [r7, #104]	; 0x68
 8002c1a:	667b      	str	r3, [r7, #100]	; 0x64
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c1c:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8002c1e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002c20:	e841 2300 	strex	r3, r2, [r1]
 8002c24:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8002c26:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d1e5      	bne.n	8002bf8 <HAL_UART_Abort+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	3314      	adds	r3, #20
 8002c32:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c34:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c36:	e853 3f00 	ldrex	r3, [r3]
 8002c3a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8002c3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c3e:	f023 0301 	bic.w	r3, r3, #1
 8002c42:	67bb      	str	r3, [r7, #120]	; 0x78
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	3314      	adds	r3, #20
 8002c4a:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8002c4c:	657a      	str	r2, [r7, #84]	; 0x54
 8002c4e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c50:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8002c52:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002c54:	e841 2300 	strex	r3, r2, [r1]
 8002c58:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8002c5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d1e5      	bne.n	8002c2c <HAL_UART_Abort+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c64:	2b01      	cmp	r3, #1
 8002c66:	d119      	bne.n	8002c9c <HAL_UART_Abort+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	330c      	adds	r3, #12
 8002c6e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c72:	e853 3f00 	ldrex	r3, [r3]
 8002c76:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002c78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c7a:	f023 0310 	bic.w	r3, r3, #16
 8002c7e:	677b      	str	r3, [r7, #116]	; 0x74
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	330c      	adds	r3, #12
 8002c86:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002c88:	643a      	str	r2, [r7, #64]	; 0x40
 8002c8a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c8c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002c8e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002c90:	e841 2300 	strex	r3, r2, [r1]
 8002c94:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002c96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d1e5      	bne.n	8002c68 <HAL_UART_Abort+0x78>
  }

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	695b      	ldr	r3, [r3, #20]
 8002ca2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ca6:	2b80      	cmp	r3, #128	; 0x80
 8002ca8:	d136      	bne.n	8002d18 <HAL_UART_Abort+0x128>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	3314      	adds	r3, #20
 8002cb0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cb2:	6a3b      	ldr	r3, [r7, #32]
 8002cb4:	e853 3f00 	ldrex	r3, [r3]
 8002cb8:	61fb      	str	r3, [r7, #28]
   return(result);
 8002cba:	69fb      	ldr	r3, [r7, #28]
 8002cbc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002cc0:	673b      	str	r3, [r7, #112]	; 0x70
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	3314      	adds	r3, #20
 8002cc8:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8002cca:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002ccc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cce:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002cd0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002cd2:	e841 2300 	strex	r3, r2, [r1]
 8002cd6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d1e5      	bne.n	8002caa <HAL_UART_Abort+0xba>

    /* Abort the UART DMA Tx stream: use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d018      	beq.n	8002d18 <HAL_UART_Abort+0x128>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cea:	2200      	movs	r2, #0
 8002cec:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	f7fe feb1 	bl	8001a5a <HAL_DMA_Abort>
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d00c      	beq.n	8002d18 <HAL_UART_Abort+0x128>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d02:	4618      	mov	r0, r3
 8002d04:	f7fe ff3b 	bl	8001b7e <HAL_DMA_GetError>
 8002d08:	4603      	mov	r3, r0
 8002d0a:	2b20      	cmp	r3, #32
 8002d0c:	d104      	bne.n	8002d18 <HAL_UART_Abort+0x128>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2210      	movs	r2, #16
 8002d12:	641a      	str	r2, [r3, #64]	; 0x40

          return HAL_TIMEOUT;
 8002d14:	2303      	movs	r3, #3
 8002d16:	e052      	b.n	8002dbe <HAL_UART_Abort+0x1ce>
      }
    }
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	695b      	ldr	r3, [r3, #20]
 8002d1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d22:	2b40      	cmp	r3, #64	; 0x40
 8002d24:	d136      	bne.n	8002d94 <HAL_UART_Abort+0x1a4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	3314      	adds	r3, #20
 8002d2c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	e853 3f00 	ldrex	r3, [r3]
 8002d34:	60bb      	str	r3, [r7, #8]
   return(result);
 8002d36:	68bb      	ldr	r3, [r7, #8]
 8002d38:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002d3c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	3314      	adds	r3, #20
 8002d44:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002d46:	61ba      	str	r2, [r7, #24]
 8002d48:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d4a:	6979      	ldr	r1, [r7, #20]
 8002d4c:	69ba      	ldr	r2, [r7, #24]
 8002d4e:	e841 2300 	strex	r3, r2, [r1]
 8002d52:	613b      	str	r3, [r7, #16]
   return(result);
 8002d54:	693b      	ldr	r3, [r7, #16]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d1e5      	bne.n	8002d26 <HAL_UART_Abort+0x136>

    /* Abort the UART DMA Rx stream: use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d018      	beq.n	8002d94 <HAL_UART_Abort+0x1a4>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d66:	2200      	movs	r2, #0
 8002d68:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d6e:	4618      	mov	r0, r3
 8002d70:	f7fe fe73 	bl	8001a5a <HAL_DMA_Abort>
 8002d74:	4603      	mov	r3, r0
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d00c      	beq.n	8002d94 <HAL_UART_Abort+0x1a4>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d7e:	4618      	mov	r0, r3
 8002d80:	f7fe fefd 	bl	8001b7e <HAL_DMA_GetError>
 8002d84:	4603      	mov	r3, r0
 8002d86:	2b20      	cmp	r3, #32
 8002d88:	d104      	bne.n	8002d94 <HAL_UART_Abort+0x1a4>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2210      	movs	r2, #16
 8002d8e:	641a      	str	r2, [r3, #64]	; 0x40

          return HAL_TIMEOUT;
 8002d90:	2303      	movs	r3, #3
 8002d92:	e014      	b.n	8002dbe <HAL_UART_Abort+0x1ce>
      }
    }
  }

  /* Reset Tx and Rx transfer counters */
  huart->TxXferCount = 0x00U;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2200      	movs	r2, #0
 8002d98:	84da      	strh	r2, [r3, #38]	; 0x26
  huart->RxXferCount = 0x00U;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Reset ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2200      	movs	r2, #0
 8002da4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Restore huart->RxState and huart->gState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2220      	movs	r2, #32
 8002daa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->gState = HAL_UART_STATE_READY;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2220      	movs	r2, #32
 8002db2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2200      	movs	r2, #0
 8002dba:	631a      	str	r2, [r3, #48]	; 0x30

  return HAL_OK;
 8002dbc:	2300      	movs	r3, #0
}
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	3780      	adds	r7, #128	; 0x80
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bd80      	pop	{r7, pc}
	...

08002dc8 <HAL_UART_Abort_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort_IT(UART_HandleTypeDef *huart)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b0a2      	sub	sp, #136	; 0x88
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
  uint32_t AbortCplt = 0x01U;
 8002dd0:	2301      	movs	r3, #1
 8002dd2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

  /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	330c      	adds	r3, #12
 8002ddc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dde:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002de0:	e853 3f00 	ldrex	r3, [r3]
 8002de4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002de6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002de8:	f423 73f0 	bic.w	r3, r3, #480	; 0x1e0
 8002dec:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	330c      	adds	r3, #12
 8002df6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002dfa:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002dfc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dfe:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002e00:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002e02:	e841 2300 	strex	r3, r2, [r1]
 8002e06:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002e08:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d1e3      	bne.n	8002dd6 <HAL_UART_Abort_IT+0xe>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	3314      	adds	r3, #20
 8002e14:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e18:	e853 3f00 	ldrex	r3, [r3]
 8002e1c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002e1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e20:	f023 0301 	bic.w	r3, r3, #1
 8002e24:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	3314      	adds	r3, #20
 8002e2c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8002e2e:	65ba      	str	r2, [r7, #88]	; 0x58
 8002e30:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e32:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002e34:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002e36:	e841 2300 	strex	r3, r2, [r1]
 8002e3a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002e3c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d1e5      	bne.n	8002e0e <HAL_UART_Abort_IT+0x46>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e46:	2b01      	cmp	r3, #1
 8002e48:	d119      	bne.n	8002e7e <HAL_UART_Abort_IT+0xb6>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	330c      	adds	r3, #12
 8002e50:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e54:	e853 3f00 	ldrex	r3, [r3]
 8002e58:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002e5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e5c:	f023 0310 	bic.w	r3, r3, #16
 8002e60:	67bb      	str	r3, [r7, #120]	; 0x78
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	330c      	adds	r3, #12
 8002e68:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8002e6a:	647a      	str	r2, [r7, #68]	; 0x44
 8002e6c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e6e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002e70:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002e72:	e841 2300 	strex	r3, r2, [r1]
 8002e76:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002e78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d1e5      	bne.n	8002e4a <HAL_UART_Abort_IT+0x82>
  }

  /* If DMA Tx and/or DMA Rx Handles are associated to UART Handle, DMA Abort complete callbacks should be initialised
     before any call to DMA Abort functions */
  /* DMA Tx Handle is valid */
  if (huart->hdmatx != NULL)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d00f      	beq.n	8002ea6 <HAL_UART_Abort_IT+0xde>
  {
    /* Set DMA Abort Complete callback if UART DMA Tx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	695b      	ldr	r3, [r3, #20]
 8002e8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e90:	2b80      	cmp	r3, #128	; 0x80
 8002e92:	d104      	bne.n	8002e9e <HAL_UART_Abort_IT+0xd6>
    {
      huart->hdmatx->XferAbortCallback = UART_DMATxAbortCallback;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e98:	4a53      	ldr	r2, [pc, #332]	; (8002fe8 <HAL_UART_Abort_IT+0x220>)
 8002e9a:	651a      	str	r2, [r3, #80]	; 0x50
 8002e9c:	e003      	b.n	8002ea6 <HAL_UART_Abort_IT+0xde>
    }
    else
    {
      huart->hdmatx->XferAbortCallback = NULL;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }
  /* DMA Rx Handle is valid */
  if (huart->hdmarx != NULL)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d00f      	beq.n	8002ece <HAL_UART_Abort_IT+0x106>
  {
    /* Set DMA Abort Complete callback if UART DMA Rx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	695b      	ldr	r3, [r3, #20]
 8002eb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002eb8:	2b40      	cmp	r3, #64	; 0x40
 8002eba:	d104      	bne.n	8002ec6 <HAL_UART_Abort_IT+0xfe>
    {
      huart->hdmarx->XferAbortCallback = UART_DMARxAbortCallback;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ec0:	4a4a      	ldr	r2, [pc, #296]	; (8002fec <HAL_UART_Abort_IT+0x224>)
 8002ec2:	651a      	str	r2, [r3, #80]	; 0x50
 8002ec4:	e003      	b.n	8002ece <HAL_UART_Abort_IT+0x106>
    }
    else
    {
      huart->hdmarx->XferAbortCallback = NULL;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eca:	2200      	movs	r2, #0
 8002ecc:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	695b      	ldr	r3, [r3, #20]
 8002ed4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ed8:	2b80      	cmp	r3, #128	; 0x80
 8002eda:	d12d      	bne.n	8002f38 <HAL_UART_Abort_IT+0x170>
  {
    /* Disable DMA Tx at UART level */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	3314      	adds	r3, #20
 8002ee2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ee6:	e853 3f00 	ldrex	r3, [r3]
 8002eea:	623b      	str	r3, [r7, #32]
   return(result);
 8002eec:	6a3b      	ldr	r3, [r7, #32]
 8002eee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002ef2:	677b      	str	r3, [r7, #116]	; 0x74
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	3314      	adds	r3, #20
 8002efa:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002efc:	633a      	str	r2, [r7, #48]	; 0x30
 8002efe:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f00:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002f02:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f04:	e841 2300 	strex	r3, r2, [r1]
 8002f08:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002f0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d1e5      	bne.n	8002edc <HAL_UART_Abort_IT+0x114>

    /* Abort the UART DMA Tx stream : use non blocking DMA Abort API (callback) */
    if (huart->hdmatx != NULL)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d00f      	beq.n	8002f38 <HAL_UART_Abort_IT+0x170>
    {
      /* UART Tx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	f7fe fe0c 	bl	8001b3a <HAL_DMA_Abort_IT>
 8002f22:	4603      	mov	r3, r0
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d004      	beq.n	8002f32 <HAL_UART_Abort_IT+0x16a>
      {
        huart->hdmatx->XferAbortCallback = NULL;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	651a      	str	r2, [r3, #80]	; 0x50
 8002f30:	e002      	b.n	8002f38 <HAL_UART_Abort_IT+0x170>
      }
      else
      {
        AbortCplt = 0x00U;
 8002f32:	2300      	movs	r3, #0
 8002f34:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
      }
    }
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	695b      	ldr	r3, [r3, #20]
 8002f3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f42:	2b40      	cmp	r3, #64	; 0x40
 8002f44:	d130      	bne.n	8002fa8 <HAL_UART_Abort_IT+0x1e0>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	3314      	adds	r3, #20
 8002f4c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f4e:	693b      	ldr	r3, [r7, #16]
 8002f50:	e853 3f00 	ldrex	r3, [r3]
 8002f54:	60fb      	str	r3, [r7, #12]
   return(result);
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002f5c:	673b      	str	r3, [r7, #112]	; 0x70
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	3314      	adds	r3, #20
 8002f64:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8002f66:	61fa      	str	r2, [r7, #28]
 8002f68:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f6a:	69b9      	ldr	r1, [r7, #24]
 8002f6c:	69fa      	ldr	r2, [r7, #28]
 8002f6e:	e841 2300 	strex	r3, r2, [r1]
 8002f72:	617b      	str	r3, [r7, #20]
   return(result);
 8002f74:	697b      	ldr	r3, [r7, #20]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d1e5      	bne.n	8002f46 <HAL_UART_Abort_IT+0x17e>

    /* Abort the UART DMA Rx stream : use non blocking DMA Abort API (callback) */
    if (huart->hdmarx != NULL)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d012      	beq.n	8002fa8 <HAL_UART_Abort_IT+0x1e0>
    {
      /* UART Rx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f86:	4618      	mov	r0, r3
 8002f88:	f7fe fdd7 	bl	8001b3a <HAL_DMA_Abort_IT>
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d007      	beq.n	8002fa2 <HAL_UART_Abort_IT+0x1da>
      {
        huart->hdmarx->XferAbortCallback = NULL;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f96:	2200      	movs	r2, #0
 8002f98:	651a      	str	r2, [r3, #80]	; 0x50
        AbortCplt = 0x01U;
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002fa0:	e002      	b.n	8002fa8 <HAL_UART_Abort_IT+0x1e0>
      }
      else
      {
        AbortCplt = 0x00U;
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
      }
    }
  }

  /* if no DMA abort complete callback execution is required => call user Abort Complete callback */
  if (AbortCplt == 0x01U)
 8002fa8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002fac:	2b01      	cmp	r3, #1
 8002fae:	d116      	bne.n	8002fde <HAL_UART_Abort_IT+0x216>
  {
    /* Reset Tx and Rx transfer counters */
    huart->TxXferCount = 0x00U;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	84da      	strh	r2, [r3, #38]	; 0x26
    huart->RxXferCount = 0x00U;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2200      	movs	r2, #0
 8002fba:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Reset ErrorCode */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Restore huart->gState and huart->RxState to Ready */
    huart->gState  = HAL_UART_STATE_READY;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2220      	movs	r2, #32
 8002fc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    huart->RxState = HAL_UART_STATE_READY;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2220      	movs	r2, #32
 8002fce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort complete callback */
    huart->AbortCpltCallback(huart);
#else
    /* Call legacy weak Abort complete callback */
    HAL_UART_AbortCpltCallback(huart);
 8002fd8:	6878      	ldr	r0, [r7, #4]
 8002fda:	f000 faa1 	bl	8003520 <HAL_UART_AbortCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8002fde:	2300      	movs	r3, #0
}
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	3788      	adds	r7, #136	; 0x88
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	bd80      	pop	{r7, pc}
 8002fe8:	08003793 	.word	0x08003793
 8002fec:	080037f3 	.word	0x080037f3

08002ff0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b0ba      	sub	sp, #232	; 0xe8
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	68db      	ldr	r3, [r3, #12]
 8003008:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	695b      	ldr	r3, [r3, #20]
 8003012:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003016:	2300      	movs	r3, #0
 8003018:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800301c:	2300      	movs	r3, #0
 800301e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003022:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003026:	f003 030f 	and.w	r3, r3, #15
 800302a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800302e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003032:	2b00      	cmp	r3, #0
 8003034:	d10f      	bne.n	8003056 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003036:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800303a:	f003 0320 	and.w	r3, r3, #32
 800303e:	2b00      	cmp	r3, #0
 8003040:	d009      	beq.n	8003056 <HAL_UART_IRQHandler+0x66>
 8003042:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003046:	f003 0320 	and.w	r3, r3, #32
 800304a:	2b00      	cmp	r3, #0
 800304c:	d003      	beq.n	8003056 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800304e:	6878      	ldr	r0, [r7, #4]
 8003050:	f000 fc67 	bl	8003922 <UART_Receive_IT>
      return;
 8003054:	e256      	b.n	8003504 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003056:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800305a:	2b00      	cmp	r3, #0
 800305c:	f000 80de 	beq.w	800321c <HAL_UART_IRQHandler+0x22c>
 8003060:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003064:	f003 0301 	and.w	r3, r3, #1
 8003068:	2b00      	cmp	r3, #0
 800306a:	d106      	bne.n	800307a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800306c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003070:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003074:	2b00      	cmp	r3, #0
 8003076:	f000 80d1 	beq.w	800321c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800307a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800307e:	f003 0301 	and.w	r3, r3, #1
 8003082:	2b00      	cmp	r3, #0
 8003084:	d00b      	beq.n	800309e <HAL_UART_IRQHandler+0xae>
 8003086:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800308a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800308e:	2b00      	cmp	r3, #0
 8003090:	d005      	beq.n	800309e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003096:	f043 0201 	orr.w	r2, r3, #1
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800309e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030a2:	f003 0304 	and.w	r3, r3, #4
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d00b      	beq.n	80030c2 <HAL_UART_IRQHandler+0xd2>
 80030aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80030ae:	f003 0301 	and.w	r3, r3, #1
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d005      	beq.n	80030c2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ba:	f043 0202 	orr.w	r2, r3, #2
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80030c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030c6:	f003 0302 	and.w	r3, r3, #2
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d00b      	beq.n	80030e6 <HAL_UART_IRQHandler+0xf6>
 80030ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80030d2:	f003 0301 	and.w	r3, r3, #1
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d005      	beq.n	80030e6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030de:	f043 0204 	orr.w	r2, r3, #4
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80030e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030ea:	f003 0308 	and.w	r3, r3, #8
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d011      	beq.n	8003116 <HAL_UART_IRQHandler+0x126>
 80030f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80030f6:	f003 0320 	and.w	r3, r3, #32
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d105      	bne.n	800310a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80030fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003102:	f003 0301 	and.w	r3, r3, #1
 8003106:	2b00      	cmp	r3, #0
 8003108:	d005      	beq.n	8003116 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800310e:	f043 0208 	orr.w	r2, r3, #8
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800311a:	2b00      	cmp	r3, #0
 800311c:	f000 81ed 	beq.w	80034fa <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003120:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003124:	f003 0320 	and.w	r3, r3, #32
 8003128:	2b00      	cmp	r3, #0
 800312a:	d008      	beq.n	800313e <HAL_UART_IRQHandler+0x14e>
 800312c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003130:	f003 0320 	and.w	r3, r3, #32
 8003134:	2b00      	cmp	r3, #0
 8003136:	d002      	beq.n	800313e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003138:	6878      	ldr	r0, [r7, #4]
 800313a:	f000 fbf2 	bl	8003922 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	695b      	ldr	r3, [r3, #20]
 8003144:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003148:	2b40      	cmp	r3, #64	; 0x40
 800314a:	bf0c      	ite	eq
 800314c:	2301      	moveq	r3, #1
 800314e:	2300      	movne	r3, #0
 8003150:	b2db      	uxtb	r3, r3
 8003152:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800315a:	f003 0308 	and.w	r3, r3, #8
 800315e:	2b00      	cmp	r3, #0
 8003160:	d103      	bne.n	800316a <HAL_UART_IRQHandler+0x17a>
 8003162:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003166:	2b00      	cmp	r3, #0
 8003168:	d04f      	beq.n	800320a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800316a:	6878      	ldr	r0, [r7, #4]
 800316c:	f000 fa9a 	bl	80036a4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	695b      	ldr	r3, [r3, #20]
 8003176:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800317a:	2b40      	cmp	r3, #64	; 0x40
 800317c:	d141      	bne.n	8003202 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	3314      	adds	r3, #20
 8003184:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003188:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800318c:	e853 3f00 	ldrex	r3, [r3]
 8003190:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003194:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003198:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800319c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	3314      	adds	r3, #20
 80031a6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80031aa:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80031ae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031b2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80031b6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80031ba:	e841 2300 	strex	r3, r2, [r1]
 80031be:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80031c2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d1d9      	bne.n	800317e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d013      	beq.n	80031fa <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031d6:	4a7d      	ldr	r2, [pc, #500]	; (80033cc <HAL_UART_IRQHandler+0x3dc>)
 80031d8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031de:	4618      	mov	r0, r3
 80031e0:	f7fe fcab 	bl	8001b3a <HAL_DMA_Abort_IT>
 80031e4:	4603      	mov	r3, r0
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d016      	beq.n	8003218 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031f0:	687a      	ldr	r2, [r7, #4]
 80031f2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80031f4:	4610      	mov	r0, r2
 80031f6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031f8:	e00e      	b.n	8003218 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80031fa:	6878      	ldr	r0, [r7, #4]
 80031fc:	f000 f986 	bl	800350c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003200:	e00a      	b.n	8003218 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003202:	6878      	ldr	r0, [r7, #4]
 8003204:	f000 f982 	bl	800350c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003208:	e006      	b.n	8003218 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800320a:	6878      	ldr	r0, [r7, #4]
 800320c:	f000 f97e 	bl	800350c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2200      	movs	r2, #0
 8003214:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003216:	e170      	b.n	80034fa <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003218:	bf00      	nop
    return;
 800321a:	e16e      	b.n	80034fa <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003220:	2b01      	cmp	r3, #1
 8003222:	f040 814a 	bne.w	80034ba <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003226:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800322a:	f003 0310 	and.w	r3, r3, #16
 800322e:	2b00      	cmp	r3, #0
 8003230:	f000 8143 	beq.w	80034ba <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003234:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003238:	f003 0310 	and.w	r3, r3, #16
 800323c:	2b00      	cmp	r3, #0
 800323e:	f000 813c 	beq.w	80034ba <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003242:	2300      	movs	r3, #0
 8003244:	60bb      	str	r3, [r7, #8]
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	60bb      	str	r3, [r7, #8]
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	60bb      	str	r3, [r7, #8]
 8003256:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	695b      	ldr	r3, [r3, #20]
 800325e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003262:	2b40      	cmp	r3, #64	; 0x40
 8003264:	f040 80b4 	bne.w	80033d0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	685b      	ldr	r3, [r3, #4]
 8003270:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003274:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003278:	2b00      	cmp	r3, #0
 800327a:	f000 8140 	beq.w	80034fe <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003282:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003286:	429a      	cmp	r2, r3
 8003288:	f080 8139 	bcs.w	80034fe <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003292:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003298:	69db      	ldr	r3, [r3, #28]
 800329a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800329e:	f000 8088 	beq.w	80033b2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	330c      	adds	r3, #12
 80032a8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032ac:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80032b0:	e853 3f00 	ldrex	r3, [r3]
 80032b4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80032b8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80032bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80032c0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	330c      	adds	r3, #12
 80032ca:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80032ce:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80032d2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032d6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80032da:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80032de:	e841 2300 	strex	r3, r2, [r1]
 80032e2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80032e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d1d9      	bne.n	80032a2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	3314      	adds	r3, #20
 80032f4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80032f8:	e853 3f00 	ldrex	r3, [r3]
 80032fc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80032fe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003300:	f023 0301 	bic.w	r3, r3, #1
 8003304:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	3314      	adds	r3, #20
 800330e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003312:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003316:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003318:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800331a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800331e:	e841 2300 	strex	r3, r2, [r1]
 8003322:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003324:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003326:	2b00      	cmp	r3, #0
 8003328:	d1e1      	bne.n	80032ee <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	3314      	adds	r3, #20
 8003330:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003332:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003334:	e853 3f00 	ldrex	r3, [r3]
 8003338:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800333a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800333c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003340:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	3314      	adds	r3, #20
 800334a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800334e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003350:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003352:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003354:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003356:	e841 2300 	strex	r3, r2, [r1]
 800335a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800335c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800335e:	2b00      	cmp	r3, #0
 8003360:	d1e3      	bne.n	800332a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2220      	movs	r2, #32
 8003366:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2200      	movs	r2, #0
 800336e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	330c      	adds	r3, #12
 8003376:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003378:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800337a:	e853 3f00 	ldrex	r3, [r3]
 800337e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003380:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003382:	f023 0310 	bic.w	r3, r3, #16
 8003386:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	330c      	adds	r3, #12
 8003390:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003394:	65ba      	str	r2, [r7, #88]	; 0x58
 8003396:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003398:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800339a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800339c:	e841 2300 	strex	r3, r2, [r1]
 80033a0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80033a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d1e3      	bne.n	8003370 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033ac:	4618      	mov	r0, r3
 80033ae:	f7fe fb54 	bl	8001a5a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80033ba:	b29b      	uxth	r3, r3
 80033bc:	1ad3      	subs	r3, r2, r3
 80033be:	b29b      	uxth	r3, r3
 80033c0:	4619      	mov	r1, r3
 80033c2:	6878      	ldr	r0, [r7, #4]
 80033c4:	f000 f8b6 	bl	8003534 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80033c8:	e099      	b.n	80034fe <HAL_UART_IRQHandler+0x50e>
 80033ca:	bf00      	nop
 80033cc:	0800376b 	.word	0x0800376b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80033d8:	b29b      	uxth	r3, r3
 80033da:	1ad3      	subs	r3, r2, r3
 80033dc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80033e4:	b29b      	uxth	r3, r3
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	f000 808b 	beq.w	8003502 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80033ec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	f000 8086 	beq.w	8003502 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	330c      	adds	r3, #12
 80033fc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003400:	e853 3f00 	ldrex	r3, [r3]
 8003404:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003406:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003408:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800340c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	330c      	adds	r3, #12
 8003416:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800341a:	647a      	str	r2, [r7, #68]	; 0x44
 800341c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800341e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003420:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003422:	e841 2300 	strex	r3, r2, [r1]
 8003426:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003428:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800342a:	2b00      	cmp	r3, #0
 800342c:	d1e3      	bne.n	80033f6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	3314      	adds	r3, #20
 8003434:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003438:	e853 3f00 	ldrex	r3, [r3]
 800343c:	623b      	str	r3, [r7, #32]
   return(result);
 800343e:	6a3b      	ldr	r3, [r7, #32]
 8003440:	f023 0301 	bic.w	r3, r3, #1
 8003444:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	3314      	adds	r3, #20
 800344e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003452:	633a      	str	r2, [r7, #48]	; 0x30
 8003454:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003456:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003458:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800345a:	e841 2300 	strex	r3, r2, [r1]
 800345e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003460:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003462:	2b00      	cmp	r3, #0
 8003464:	d1e3      	bne.n	800342e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2220      	movs	r2, #32
 800346a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2200      	movs	r2, #0
 8003472:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	330c      	adds	r3, #12
 800347a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800347c:	693b      	ldr	r3, [r7, #16]
 800347e:	e853 3f00 	ldrex	r3, [r3]
 8003482:	60fb      	str	r3, [r7, #12]
   return(result);
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	f023 0310 	bic.w	r3, r3, #16
 800348a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	330c      	adds	r3, #12
 8003494:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003498:	61fa      	str	r2, [r7, #28]
 800349a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800349c:	69b9      	ldr	r1, [r7, #24]
 800349e:	69fa      	ldr	r2, [r7, #28]
 80034a0:	e841 2300 	strex	r3, r2, [r1]
 80034a4:	617b      	str	r3, [r7, #20]
   return(result);
 80034a6:	697b      	ldr	r3, [r7, #20]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d1e3      	bne.n	8003474 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80034ac:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80034b0:	4619      	mov	r1, r3
 80034b2:	6878      	ldr	r0, [r7, #4]
 80034b4:	f000 f83e 	bl	8003534 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80034b8:	e023      	b.n	8003502 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80034ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80034be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d009      	beq.n	80034da <HAL_UART_IRQHandler+0x4ea>
 80034c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80034ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d003      	beq.n	80034da <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80034d2:	6878      	ldr	r0, [r7, #4]
 80034d4:	f000 f9bd 	bl	8003852 <UART_Transmit_IT>
    return;
 80034d8:	e014      	b.n	8003504 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80034da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80034de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d00e      	beq.n	8003504 <HAL_UART_IRQHandler+0x514>
 80034e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80034ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d008      	beq.n	8003504 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80034f2:	6878      	ldr	r0, [r7, #4]
 80034f4:	f000 f9fd 	bl	80038f2 <UART_EndTransmit_IT>
    return;
 80034f8:	e004      	b.n	8003504 <HAL_UART_IRQHandler+0x514>
    return;
 80034fa:	bf00      	nop
 80034fc:	e002      	b.n	8003504 <HAL_UART_IRQHandler+0x514>
      return;
 80034fe:	bf00      	nop
 8003500:	e000      	b.n	8003504 <HAL_UART_IRQHandler+0x514>
      return;
 8003502:	bf00      	nop
  }
}
 8003504:	37e8      	adds	r7, #232	; 0xe8
 8003506:	46bd      	mov	sp, r7
 8003508:	bd80      	pop	{r7, pc}
 800350a:	bf00      	nop

0800350c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800350c:	b480      	push	{r7}
 800350e:	b083      	sub	sp, #12
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003514:	bf00      	nop
 8003516:	370c      	adds	r7, #12
 8003518:	46bd      	mov	sp, r7
 800351a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351e:	4770      	bx	lr

08003520 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8003520:	b480      	push	{r7}
 8003522:	b083      	sub	sp, #12
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8003528:	bf00      	nop
 800352a:	370c      	adds	r7, #12
 800352c:	46bd      	mov	sp, r7
 800352e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003532:	4770      	bx	lr

08003534 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003534:	b480      	push	{r7}
 8003536:	b083      	sub	sp, #12
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
 800353c:	460b      	mov	r3, r1
 800353e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003540:	bf00      	nop
 8003542:	370c      	adds	r7, #12
 8003544:	46bd      	mov	sp, r7
 8003546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354a:	4770      	bx	lr

0800354c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b090      	sub	sp, #64	; 0x40
 8003550:	af00      	add	r7, sp, #0
 8003552:	60f8      	str	r0, [r7, #12]
 8003554:	60b9      	str	r1, [r7, #8]
 8003556:	603b      	str	r3, [r7, #0]
 8003558:	4613      	mov	r3, r2
 800355a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800355c:	e050      	b.n	8003600 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800355e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003560:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003564:	d04c      	beq.n	8003600 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003566:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003568:	2b00      	cmp	r3, #0
 800356a:	d007      	beq.n	800357c <UART_WaitOnFlagUntilTimeout+0x30>
 800356c:	f7fe f926 	bl	80017bc <HAL_GetTick>
 8003570:	4602      	mov	r2, r0
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	1ad3      	subs	r3, r2, r3
 8003576:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003578:	429a      	cmp	r2, r3
 800357a:	d241      	bcs.n	8003600 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	330c      	adds	r3, #12
 8003582:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003584:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003586:	e853 3f00 	ldrex	r3, [r3]
 800358a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800358c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800358e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003592:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	330c      	adds	r3, #12
 800359a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800359c:	637a      	str	r2, [r7, #52]	; 0x34
 800359e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035a0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80035a2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80035a4:	e841 2300 	strex	r3, r2, [r1]
 80035a8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80035aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d1e5      	bne.n	800357c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	3314      	adds	r3, #20
 80035b6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035b8:	697b      	ldr	r3, [r7, #20]
 80035ba:	e853 3f00 	ldrex	r3, [r3]
 80035be:	613b      	str	r3, [r7, #16]
   return(result);
 80035c0:	693b      	ldr	r3, [r7, #16]
 80035c2:	f023 0301 	bic.w	r3, r3, #1
 80035c6:	63bb      	str	r3, [r7, #56]	; 0x38
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	3314      	adds	r3, #20
 80035ce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80035d0:	623a      	str	r2, [r7, #32]
 80035d2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035d4:	69f9      	ldr	r1, [r7, #28]
 80035d6:	6a3a      	ldr	r2, [r7, #32]
 80035d8:	e841 2300 	strex	r3, r2, [r1]
 80035dc:	61bb      	str	r3, [r7, #24]
   return(result);
 80035de:	69bb      	ldr	r3, [r7, #24]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d1e5      	bne.n	80035b0 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	2220      	movs	r2, #32
 80035e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	2220      	movs	r2, #32
 80035f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	2200      	movs	r2, #0
 80035f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80035fc:	2303      	movs	r3, #3
 80035fe:	e00f      	b.n	8003620 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	681a      	ldr	r2, [r3, #0]
 8003606:	68bb      	ldr	r3, [r7, #8]
 8003608:	4013      	ands	r3, r2
 800360a:	68ba      	ldr	r2, [r7, #8]
 800360c:	429a      	cmp	r2, r3
 800360e:	bf0c      	ite	eq
 8003610:	2301      	moveq	r3, #1
 8003612:	2300      	movne	r3, #0
 8003614:	b2db      	uxtb	r3, r3
 8003616:	461a      	mov	r2, r3
 8003618:	79fb      	ldrb	r3, [r7, #7]
 800361a:	429a      	cmp	r2, r3
 800361c:	d09f      	beq.n	800355e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800361e:	2300      	movs	r3, #0
}
 8003620:	4618      	mov	r0, r3
 8003622:	3740      	adds	r7, #64	; 0x40
 8003624:	46bd      	mov	sp, r7
 8003626:	bd80      	pop	{r7, pc}

08003628 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003628:	b480      	push	{r7}
 800362a:	b085      	sub	sp, #20
 800362c:	af00      	add	r7, sp, #0
 800362e:	60f8      	str	r0, [r7, #12]
 8003630:	60b9      	str	r1, [r7, #8]
 8003632:	4613      	mov	r3, r2
 8003634:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	68ba      	ldr	r2, [r7, #8]
 800363a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	88fa      	ldrh	r2, [r7, #6]
 8003640:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	88fa      	ldrh	r2, [r7, #6]
 8003646:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	2200      	movs	r2, #0
 800364c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	2222      	movs	r2, #34	; 0x22
 8003652:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	2200      	movs	r2, #0
 800365a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	691b      	ldr	r3, [r3, #16]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d007      	beq.n	8003676 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	68da      	ldr	r2, [r3, #12]
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003674:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	695a      	ldr	r2, [r3, #20]
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f042 0201 	orr.w	r2, r2, #1
 8003684:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	68da      	ldr	r2, [r3, #12]
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f042 0220 	orr.w	r2, r2, #32
 8003694:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003696:	2300      	movs	r3, #0
}
 8003698:	4618      	mov	r0, r3
 800369a:	3714      	adds	r7, #20
 800369c:	46bd      	mov	sp, r7
 800369e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a2:	4770      	bx	lr

080036a4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80036a4:	b480      	push	{r7}
 80036a6:	b095      	sub	sp, #84	; 0x54
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	330c      	adds	r3, #12
 80036b2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036b6:	e853 3f00 	ldrex	r3, [r3]
 80036ba:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80036bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036be:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80036c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	330c      	adds	r3, #12
 80036ca:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80036cc:	643a      	str	r2, [r7, #64]	; 0x40
 80036ce:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036d0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80036d2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80036d4:	e841 2300 	strex	r3, r2, [r1]
 80036d8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80036da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d1e5      	bne.n	80036ac <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	3314      	adds	r3, #20
 80036e6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036e8:	6a3b      	ldr	r3, [r7, #32]
 80036ea:	e853 3f00 	ldrex	r3, [r3]
 80036ee:	61fb      	str	r3, [r7, #28]
   return(result);
 80036f0:	69fb      	ldr	r3, [r7, #28]
 80036f2:	f023 0301 	bic.w	r3, r3, #1
 80036f6:	64bb      	str	r3, [r7, #72]	; 0x48
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	3314      	adds	r3, #20
 80036fe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003700:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003702:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003704:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003706:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003708:	e841 2300 	strex	r3, r2, [r1]
 800370c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800370e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003710:	2b00      	cmp	r3, #0
 8003712:	d1e5      	bne.n	80036e0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003718:	2b01      	cmp	r3, #1
 800371a:	d119      	bne.n	8003750 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	330c      	adds	r3, #12
 8003722:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	e853 3f00 	ldrex	r3, [r3]
 800372a:	60bb      	str	r3, [r7, #8]
   return(result);
 800372c:	68bb      	ldr	r3, [r7, #8]
 800372e:	f023 0310 	bic.w	r3, r3, #16
 8003732:	647b      	str	r3, [r7, #68]	; 0x44
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	330c      	adds	r3, #12
 800373a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800373c:	61ba      	str	r2, [r7, #24]
 800373e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003740:	6979      	ldr	r1, [r7, #20]
 8003742:	69ba      	ldr	r2, [r7, #24]
 8003744:	e841 2300 	strex	r3, r2, [r1]
 8003748:	613b      	str	r3, [r7, #16]
   return(result);
 800374a:	693b      	ldr	r3, [r7, #16]
 800374c:	2b00      	cmp	r3, #0
 800374e:	d1e5      	bne.n	800371c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2220      	movs	r2, #32
 8003754:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2200      	movs	r2, #0
 800375c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800375e:	bf00      	nop
 8003760:	3754      	adds	r7, #84	; 0x54
 8003762:	46bd      	mov	sp, r7
 8003764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003768:	4770      	bx	lr

0800376a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800376a:	b580      	push	{r7, lr}
 800376c:	b084      	sub	sp, #16
 800376e:	af00      	add	r7, sp, #0
 8003770:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003776:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	2200      	movs	r2, #0
 800377c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	2200      	movs	r2, #0
 8003782:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003784:	68f8      	ldr	r0, [r7, #12]
 8003786:	f7ff fec1 	bl	800350c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800378a:	bf00      	nop
 800378c:	3710      	adds	r7, #16
 800378e:	46bd      	mov	sp, r7
 8003790:	bd80      	pop	{r7, pc}

08003792 <UART_DMATxAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxAbortCallback(DMA_HandleTypeDef *hdma)
{
 8003792:	b580      	push	{r7, lr}
 8003794:	b084      	sub	sp, #16
 8003796:	af00      	add	r7, sp, #0
 8003798:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800379e:	60fb      	str	r3, [r7, #12]

  huart->hdmatx->XferAbortCallback = NULL;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037a4:	2200      	movs	r2, #0
 80037a6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check if an Abort process is still ongoing */
  if (huart->hdmarx != NULL)
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d004      	beq.n	80037ba <UART_DMATxAbortCallback+0x28>
  {
    if (huart->hdmarx->XferAbortCallback != NULL)
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d117      	bne.n	80037ea <UART_DMATxAbortCallback+0x58>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0x00U;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	2200      	movs	r2, #0
 80037be:	84da      	strh	r2, [r3, #38]	; 0x26
  huart->RxXferCount = 0x00U;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	2200      	movs	r2, #0
 80037c4:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Reset ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	2200      	movs	r2, #0
 80037ca:	641a      	str	r2, [r3, #64]	; 0x40

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	2220      	movs	r2, #32
 80037d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	2220      	movs	r2, #32
 80037d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	2200      	movs	r2, #0
 80037e0:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 80037e2:	68f8      	ldr	r0, [r7, #12]
 80037e4:	f7ff fe9c 	bl	8003520 <HAL_UART_AbortCpltCallback>
 80037e8:	e000      	b.n	80037ec <UART_DMATxAbortCallback+0x5a>
      return;
 80037ea:	bf00      	nop
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80037ec:	3710      	adds	r7, #16
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bd80      	pop	{r7, pc}

080037f2 <UART_DMARxAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxAbortCallback(DMA_HandleTypeDef *hdma)
{
 80037f2:	b580      	push	{r7, lr}
 80037f4:	b084      	sub	sp, #16
 80037f6:	af00      	add	r7, sp, #0
 80037f8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037fe:	60fb      	str	r3, [r7, #12]

  huart->hdmarx->XferAbortCallback = NULL;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003804:	2200      	movs	r2, #0
 8003806:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check if an Abort process is still ongoing */
  if (huart->hdmatx != NULL)
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800380c:	2b00      	cmp	r3, #0
 800380e:	d004      	beq.n	800381a <UART_DMARxAbortCallback+0x28>
  {
    if (huart->hdmatx->XferAbortCallback != NULL)
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003814:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003816:	2b00      	cmp	r3, #0
 8003818:	d117      	bne.n	800384a <UART_DMARxAbortCallback+0x58>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0x00U;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	2200      	movs	r2, #0
 800381e:	84da      	strh	r2, [r3, #38]	; 0x26
  huart->RxXferCount = 0x00U;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	2200      	movs	r2, #0
 8003824:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Reset ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	2200      	movs	r2, #0
 800382a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	2220      	movs	r2, #32
 8003830:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	2220      	movs	r2, #32
 8003838:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	2200      	movs	r2, #0
 8003840:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 8003842:	68f8      	ldr	r0, [r7, #12]
 8003844:	f7ff fe6c 	bl	8003520 <HAL_UART_AbortCpltCallback>
 8003848:	e000      	b.n	800384c <UART_DMARxAbortCallback+0x5a>
      return;
 800384a:	bf00      	nop
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800384c:	3710      	adds	r7, #16
 800384e:	46bd      	mov	sp, r7
 8003850:	bd80      	pop	{r7, pc}

08003852 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003852:	b480      	push	{r7}
 8003854:	b085      	sub	sp, #20
 8003856:	af00      	add	r7, sp, #0
 8003858:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003860:	b2db      	uxtb	r3, r3
 8003862:	2b21      	cmp	r3, #33	; 0x21
 8003864:	d13e      	bne.n	80038e4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	689b      	ldr	r3, [r3, #8]
 800386a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800386e:	d114      	bne.n	800389a <UART_Transmit_IT+0x48>
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	691b      	ldr	r3, [r3, #16]
 8003874:	2b00      	cmp	r3, #0
 8003876:	d110      	bne.n	800389a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6a1b      	ldr	r3, [r3, #32]
 800387c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	881b      	ldrh	r3, [r3, #0]
 8003882:	461a      	mov	r2, r3
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800388c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6a1b      	ldr	r3, [r3, #32]
 8003892:	1c9a      	adds	r2, r3, #2
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	621a      	str	r2, [r3, #32]
 8003898:	e008      	b.n	80038ac <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6a1b      	ldr	r3, [r3, #32]
 800389e:	1c59      	adds	r1, r3, #1
 80038a0:	687a      	ldr	r2, [r7, #4]
 80038a2:	6211      	str	r1, [r2, #32]
 80038a4:	781a      	ldrb	r2, [r3, #0]
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80038b0:	b29b      	uxth	r3, r3
 80038b2:	3b01      	subs	r3, #1
 80038b4:	b29b      	uxth	r3, r3
 80038b6:	687a      	ldr	r2, [r7, #4]
 80038b8:	4619      	mov	r1, r3
 80038ba:	84d1      	strh	r1, [r2, #38]	; 0x26
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d10f      	bne.n	80038e0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	68da      	ldr	r2, [r3, #12]
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80038ce:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	68da      	ldr	r2, [r3, #12]
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80038de:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80038e0:	2300      	movs	r3, #0
 80038e2:	e000      	b.n	80038e6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80038e4:	2302      	movs	r3, #2
  }
}
 80038e6:	4618      	mov	r0, r3
 80038e8:	3714      	adds	r7, #20
 80038ea:	46bd      	mov	sp, r7
 80038ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f0:	4770      	bx	lr

080038f2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80038f2:	b580      	push	{r7, lr}
 80038f4:	b082      	sub	sp, #8
 80038f6:	af00      	add	r7, sp, #0
 80038f8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	68da      	ldr	r2, [r3, #12]
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003908:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2220      	movs	r2, #32
 800390e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003912:	6878      	ldr	r0, [r7, #4]
 8003914:	f7fd fc92 	bl	800123c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003918:	2300      	movs	r3, #0
}
 800391a:	4618      	mov	r0, r3
 800391c:	3708      	adds	r7, #8
 800391e:	46bd      	mov	sp, r7
 8003920:	bd80      	pop	{r7, pc}

08003922 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003922:	b580      	push	{r7, lr}
 8003924:	b08c      	sub	sp, #48	; 0x30
 8003926:	af00      	add	r7, sp, #0
 8003928:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003930:	b2db      	uxtb	r3, r3
 8003932:	2b22      	cmp	r3, #34	; 0x22
 8003934:	f040 80ab 	bne.w	8003a8e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	689b      	ldr	r3, [r3, #8]
 800393c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003940:	d117      	bne.n	8003972 <UART_Receive_IT+0x50>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	691b      	ldr	r3, [r3, #16]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d113      	bne.n	8003972 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800394a:	2300      	movs	r3, #0
 800394c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003952:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	b29b      	uxth	r3, r3
 800395c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003960:	b29a      	uxth	r2, r3
 8003962:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003964:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800396a:	1c9a      	adds	r2, r3, #2
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	629a      	str	r2, [r3, #40]	; 0x28
 8003970:	e026      	b.n	80039c0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003976:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003978:	2300      	movs	r3, #0
 800397a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	689b      	ldr	r3, [r3, #8]
 8003980:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003984:	d007      	beq.n	8003996 <UART_Receive_IT+0x74>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	689b      	ldr	r3, [r3, #8]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d10a      	bne.n	80039a4 <UART_Receive_IT+0x82>
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	691b      	ldr	r3, [r3, #16]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d106      	bne.n	80039a4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	685b      	ldr	r3, [r3, #4]
 800399c:	b2da      	uxtb	r2, r3
 800399e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039a0:	701a      	strb	r2, [r3, #0]
 80039a2:	e008      	b.n	80039b6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	685b      	ldr	r3, [r3, #4]
 80039aa:	b2db      	uxtb	r3, r3
 80039ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80039b0:	b2da      	uxtb	r2, r3
 80039b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039b4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039ba:	1c5a      	adds	r2, r3, #1
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80039c4:	b29b      	uxth	r3, r3
 80039c6:	3b01      	subs	r3, #1
 80039c8:	b29b      	uxth	r3, r3
 80039ca:	687a      	ldr	r2, [r7, #4]
 80039cc:	4619      	mov	r1, r3
 80039ce:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d15a      	bne.n	8003a8a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	68da      	ldr	r2, [r3, #12]
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f022 0220 	bic.w	r2, r2, #32
 80039e2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	68da      	ldr	r2, [r3, #12]
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80039f2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	695a      	ldr	r2, [r3, #20]
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f022 0201 	bic.w	r2, r2, #1
 8003a02:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2220      	movs	r2, #32
 8003a08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a10:	2b01      	cmp	r3, #1
 8003a12:	d135      	bne.n	8003a80 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2200      	movs	r2, #0
 8003a18:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	330c      	adds	r3, #12
 8003a20:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a22:	697b      	ldr	r3, [r7, #20]
 8003a24:	e853 3f00 	ldrex	r3, [r3]
 8003a28:	613b      	str	r3, [r7, #16]
   return(result);
 8003a2a:	693b      	ldr	r3, [r7, #16]
 8003a2c:	f023 0310 	bic.w	r3, r3, #16
 8003a30:	627b      	str	r3, [r7, #36]	; 0x24
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	330c      	adds	r3, #12
 8003a38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a3a:	623a      	str	r2, [r7, #32]
 8003a3c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a3e:	69f9      	ldr	r1, [r7, #28]
 8003a40:	6a3a      	ldr	r2, [r7, #32]
 8003a42:	e841 2300 	strex	r3, r2, [r1]
 8003a46:	61bb      	str	r3, [r7, #24]
   return(result);
 8003a48:	69bb      	ldr	r3, [r7, #24]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d1e5      	bne.n	8003a1a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f003 0310 	and.w	r3, r3, #16
 8003a58:	2b10      	cmp	r3, #16
 8003a5a:	d10a      	bne.n	8003a72 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	60fb      	str	r3, [r7, #12]
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	60fb      	str	r3, [r7, #12]
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	685b      	ldr	r3, [r3, #4]
 8003a6e:	60fb      	str	r3, [r7, #12]
 8003a70:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003a76:	4619      	mov	r1, r3
 8003a78:	6878      	ldr	r0, [r7, #4]
 8003a7a:	f7ff fd5b 	bl	8003534 <HAL_UARTEx_RxEventCallback>
 8003a7e:	e002      	b.n	8003a86 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003a80:	6878      	ldr	r0, [r7, #4]
 8003a82:	f7fd fbab 	bl	80011dc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003a86:	2300      	movs	r3, #0
 8003a88:	e002      	b.n	8003a90 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	e000      	b.n	8003a90 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8003a8e:	2302      	movs	r3, #2
  }
}
 8003a90:	4618      	mov	r0, r3
 8003a92:	3730      	adds	r7, #48	; 0x30
 8003a94:	46bd      	mov	sp, r7
 8003a96:	bd80      	pop	{r7, pc}

08003a98 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003a98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a9c:	b0c0      	sub	sp, #256	; 0x100
 8003a9e:	af00      	add	r7, sp, #0
 8003aa0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003aa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	691b      	ldr	r3, [r3, #16]
 8003aac:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003ab0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ab4:	68d9      	ldr	r1, [r3, #12]
 8003ab6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003aba:	681a      	ldr	r2, [r3, #0]
 8003abc:	ea40 0301 	orr.w	r3, r0, r1
 8003ac0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003ac2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ac6:	689a      	ldr	r2, [r3, #8]
 8003ac8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003acc:	691b      	ldr	r3, [r3, #16]
 8003ace:	431a      	orrs	r2, r3
 8003ad0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ad4:	695b      	ldr	r3, [r3, #20]
 8003ad6:	431a      	orrs	r2, r3
 8003ad8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003adc:	69db      	ldr	r3, [r3, #28]
 8003ade:	4313      	orrs	r3, r2
 8003ae0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003ae4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	68db      	ldr	r3, [r3, #12]
 8003aec:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003af0:	f021 010c 	bic.w	r1, r1, #12
 8003af4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003af8:	681a      	ldr	r2, [r3, #0]
 8003afa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003afe:	430b      	orrs	r3, r1
 8003b00:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003b02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	695b      	ldr	r3, [r3, #20]
 8003b0a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003b0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b12:	6999      	ldr	r1, [r3, #24]
 8003b14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b18:	681a      	ldr	r2, [r3, #0]
 8003b1a:	ea40 0301 	orr.w	r3, r0, r1
 8003b1e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003b20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b24:	681a      	ldr	r2, [r3, #0]
 8003b26:	4b8f      	ldr	r3, [pc, #572]	; (8003d64 <UART_SetConfig+0x2cc>)
 8003b28:	429a      	cmp	r2, r3
 8003b2a:	d005      	beq.n	8003b38 <UART_SetConfig+0xa0>
 8003b2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b30:	681a      	ldr	r2, [r3, #0]
 8003b32:	4b8d      	ldr	r3, [pc, #564]	; (8003d68 <UART_SetConfig+0x2d0>)
 8003b34:	429a      	cmp	r2, r3
 8003b36:	d104      	bne.n	8003b42 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003b38:	f7fe fe50 	bl	80027dc <HAL_RCC_GetPCLK2Freq>
 8003b3c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003b40:	e003      	b.n	8003b4a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003b42:	f7fe fe37 	bl	80027b4 <HAL_RCC_GetPCLK1Freq>
 8003b46:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003b4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b4e:	69db      	ldr	r3, [r3, #28]
 8003b50:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b54:	f040 810c 	bne.w	8003d70 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003b58:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003b62:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003b66:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003b6a:	4622      	mov	r2, r4
 8003b6c:	462b      	mov	r3, r5
 8003b6e:	1891      	adds	r1, r2, r2
 8003b70:	65b9      	str	r1, [r7, #88]	; 0x58
 8003b72:	415b      	adcs	r3, r3
 8003b74:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003b76:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003b7a:	4621      	mov	r1, r4
 8003b7c:	eb12 0801 	adds.w	r8, r2, r1
 8003b80:	4629      	mov	r1, r5
 8003b82:	eb43 0901 	adc.w	r9, r3, r1
 8003b86:	f04f 0200 	mov.w	r2, #0
 8003b8a:	f04f 0300 	mov.w	r3, #0
 8003b8e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003b92:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003b96:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003b9a:	4690      	mov	r8, r2
 8003b9c:	4699      	mov	r9, r3
 8003b9e:	4623      	mov	r3, r4
 8003ba0:	eb18 0303 	adds.w	r3, r8, r3
 8003ba4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003ba8:	462b      	mov	r3, r5
 8003baa:	eb49 0303 	adc.w	r3, r9, r3
 8003bae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003bb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	2200      	movs	r2, #0
 8003bba:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003bbe:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003bc2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003bc6:	460b      	mov	r3, r1
 8003bc8:	18db      	adds	r3, r3, r3
 8003bca:	653b      	str	r3, [r7, #80]	; 0x50
 8003bcc:	4613      	mov	r3, r2
 8003bce:	eb42 0303 	adc.w	r3, r2, r3
 8003bd2:	657b      	str	r3, [r7, #84]	; 0x54
 8003bd4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003bd8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003bdc:	f7fc fb70 	bl	80002c0 <__aeabi_uldivmod>
 8003be0:	4602      	mov	r2, r0
 8003be2:	460b      	mov	r3, r1
 8003be4:	4b61      	ldr	r3, [pc, #388]	; (8003d6c <UART_SetConfig+0x2d4>)
 8003be6:	fba3 2302 	umull	r2, r3, r3, r2
 8003bea:	095b      	lsrs	r3, r3, #5
 8003bec:	011c      	lsls	r4, r3, #4
 8003bee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003bf8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003bfc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003c00:	4642      	mov	r2, r8
 8003c02:	464b      	mov	r3, r9
 8003c04:	1891      	adds	r1, r2, r2
 8003c06:	64b9      	str	r1, [r7, #72]	; 0x48
 8003c08:	415b      	adcs	r3, r3
 8003c0a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c0c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003c10:	4641      	mov	r1, r8
 8003c12:	eb12 0a01 	adds.w	sl, r2, r1
 8003c16:	4649      	mov	r1, r9
 8003c18:	eb43 0b01 	adc.w	fp, r3, r1
 8003c1c:	f04f 0200 	mov.w	r2, #0
 8003c20:	f04f 0300 	mov.w	r3, #0
 8003c24:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003c28:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003c2c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003c30:	4692      	mov	sl, r2
 8003c32:	469b      	mov	fp, r3
 8003c34:	4643      	mov	r3, r8
 8003c36:	eb1a 0303 	adds.w	r3, sl, r3
 8003c3a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003c3e:	464b      	mov	r3, r9
 8003c40:	eb4b 0303 	adc.w	r3, fp, r3
 8003c44:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003c48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	2200      	movs	r2, #0
 8003c50:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003c54:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003c58:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003c5c:	460b      	mov	r3, r1
 8003c5e:	18db      	adds	r3, r3, r3
 8003c60:	643b      	str	r3, [r7, #64]	; 0x40
 8003c62:	4613      	mov	r3, r2
 8003c64:	eb42 0303 	adc.w	r3, r2, r3
 8003c68:	647b      	str	r3, [r7, #68]	; 0x44
 8003c6a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003c6e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003c72:	f7fc fb25 	bl	80002c0 <__aeabi_uldivmod>
 8003c76:	4602      	mov	r2, r0
 8003c78:	460b      	mov	r3, r1
 8003c7a:	4611      	mov	r1, r2
 8003c7c:	4b3b      	ldr	r3, [pc, #236]	; (8003d6c <UART_SetConfig+0x2d4>)
 8003c7e:	fba3 2301 	umull	r2, r3, r3, r1
 8003c82:	095b      	lsrs	r3, r3, #5
 8003c84:	2264      	movs	r2, #100	; 0x64
 8003c86:	fb02 f303 	mul.w	r3, r2, r3
 8003c8a:	1acb      	subs	r3, r1, r3
 8003c8c:	00db      	lsls	r3, r3, #3
 8003c8e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003c92:	4b36      	ldr	r3, [pc, #216]	; (8003d6c <UART_SetConfig+0x2d4>)
 8003c94:	fba3 2302 	umull	r2, r3, r3, r2
 8003c98:	095b      	lsrs	r3, r3, #5
 8003c9a:	005b      	lsls	r3, r3, #1
 8003c9c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003ca0:	441c      	add	r4, r3
 8003ca2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003cac:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003cb0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003cb4:	4642      	mov	r2, r8
 8003cb6:	464b      	mov	r3, r9
 8003cb8:	1891      	adds	r1, r2, r2
 8003cba:	63b9      	str	r1, [r7, #56]	; 0x38
 8003cbc:	415b      	adcs	r3, r3
 8003cbe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003cc0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003cc4:	4641      	mov	r1, r8
 8003cc6:	1851      	adds	r1, r2, r1
 8003cc8:	6339      	str	r1, [r7, #48]	; 0x30
 8003cca:	4649      	mov	r1, r9
 8003ccc:	414b      	adcs	r3, r1
 8003cce:	637b      	str	r3, [r7, #52]	; 0x34
 8003cd0:	f04f 0200 	mov.w	r2, #0
 8003cd4:	f04f 0300 	mov.w	r3, #0
 8003cd8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003cdc:	4659      	mov	r1, fp
 8003cde:	00cb      	lsls	r3, r1, #3
 8003ce0:	4651      	mov	r1, sl
 8003ce2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003ce6:	4651      	mov	r1, sl
 8003ce8:	00ca      	lsls	r2, r1, #3
 8003cea:	4610      	mov	r0, r2
 8003cec:	4619      	mov	r1, r3
 8003cee:	4603      	mov	r3, r0
 8003cf0:	4642      	mov	r2, r8
 8003cf2:	189b      	adds	r3, r3, r2
 8003cf4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003cf8:	464b      	mov	r3, r9
 8003cfa:	460a      	mov	r2, r1
 8003cfc:	eb42 0303 	adc.w	r3, r2, r3
 8003d00:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003d04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d08:	685b      	ldr	r3, [r3, #4]
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003d10:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003d14:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003d18:	460b      	mov	r3, r1
 8003d1a:	18db      	adds	r3, r3, r3
 8003d1c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d1e:	4613      	mov	r3, r2
 8003d20:	eb42 0303 	adc.w	r3, r2, r3
 8003d24:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d26:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003d2a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003d2e:	f7fc fac7 	bl	80002c0 <__aeabi_uldivmod>
 8003d32:	4602      	mov	r2, r0
 8003d34:	460b      	mov	r3, r1
 8003d36:	4b0d      	ldr	r3, [pc, #52]	; (8003d6c <UART_SetConfig+0x2d4>)
 8003d38:	fba3 1302 	umull	r1, r3, r3, r2
 8003d3c:	095b      	lsrs	r3, r3, #5
 8003d3e:	2164      	movs	r1, #100	; 0x64
 8003d40:	fb01 f303 	mul.w	r3, r1, r3
 8003d44:	1ad3      	subs	r3, r2, r3
 8003d46:	00db      	lsls	r3, r3, #3
 8003d48:	3332      	adds	r3, #50	; 0x32
 8003d4a:	4a08      	ldr	r2, [pc, #32]	; (8003d6c <UART_SetConfig+0x2d4>)
 8003d4c:	fba2 2303 	umull	r2, r3, r2, r3
 8003d50:	095b      	lsrs	r3, r3, #5
 8003d52:	f003 0207 	and.w	r2, r3, #7
 8003d56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4422      	add	r2, r4
 8003d5e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003d60:	e105      	b.n	8003f6e <UART_SetConfig+0x4d6>
 8003d62:	bf00      	nop
 8003d64:	40011000 	.word	0x40011000
 8003d68:	40011400 	.word	0x40011400
 8003d6c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003d70:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003d74:	2200      	movs	r2, #0
 8003d76:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003d7a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003d7e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003d82:	4642      	mov	r2, r8
 8003d84:	464b      	mov	r3, r9
 8003d86:	1891      	adds	r1, r2, r2
 8003d88:	6239      	str	r1, [r7, #32]
 8003d8a:	415b      	adcs	r3, r3
 8003d8c:	627b      	str	r3, [r7, #36]	; 0x24
 8003d8e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003d92:	4641      	mov	r1, r8
 8003d94:	1854      	adds	r4, r2, r1
 8003d96:	4649      	mov	r1, r9
 8003d98:	eb43 0501 	adc.w	r5, r3, r1
 8003d9c:	f04f 0200 	mov.w	r2, #0
 8003da0:	f04f 0300 	mov.w	r3, #0
 8003da4:	00eb      	lsls	r3, r5, #3
 8003da6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003daa:	00e2      	lsls	r2, r4, #3
 8003dac:	4614      	mov	r4, r2
 8003dae:	461d      	mov	r5, r3
 8003db0:	4643      	mov	r3, r8
 8003db2:	18e3      	adds	r3, r4, r3
 8003db4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003db8:	464b      	mov	r3, r9
 8003dba:	eb45 0303 	adc.w	r3, r5, r3
 8003dbe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003dc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003dc6:	685b      	ldr	r3, [r3, #4]
 8003dc8:	2200      	movs	r2, #0
 8003dca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003dce:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003dd2:	f04f 0200 	mov.w	r2, #0
 8003dd6:	f04f 0300 	mov.w	r3, #0
 8003dda:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003dde:	4629      	mov	r1, r5
 8003de0:	008b      	lsls	r3, r1, #2
 8003de2:	4621      	mov	r1, r4
 8003de4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003de8:	4621      	mov	r1, r4
 8003dea:	008a      	lsls	r2, r1, #2
 8003dec:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003df0:	f7fc fa66 	bl	80002c0 <__aeabi_uldivmod>
 8003df4:	4602      	mov	r2, r0
 8003df6:	460b      	mov	r3, r1
 8003df8:	4b60      	ldr	r3, [pc, #384]	; (8003f7c <UART_SetConfig+0x4e4>)
 8003dfa:	fba3 2302 	umull	r2, r3, r3, r2
 8003dfe:	095b      	lsrs	r3, r3, #5
 8003e00:	011c      	lsls	r4, r3, #4
 8003e02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003e06:	2200      	movs	r2, #0
 8003e08:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003e0c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003e10:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003e14:	4642      	mov	r2, r8
 8003e16:	464b      	mov	r3, r9
 8003e18:	1891      	adds	r1, r2, r2
 8003e1a:	61b9      	str	r1, [r7, #24]
 8003e1c:	415b      	adcs	r3, r3
 8003e1e:	61fb      	str	r3, [r7, #28]
 8003e20:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003e24:	4641      	mov	r1, r8
 8003e26:	1851      	adds	r1, r2, r1
 8003e28:	6139      	str	r1, [r7, #16]
 8003e2a:	4649      	mov	r1, r9
 8003e2c:	414b      	adcs	r3, r1
 8003e2e:	617b      	str	r3, [r7, #20]
 8003e30:	f04f 0200 	mov.w	r2, #0
 8003e34:	f04f 0300 	mov.w	r3, #0
 8003e38:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003e3c:	4659      	mov	r1, fp
 8003e3e:	00cb      	lsls	r3, r1, #3
 8003e40:	4651      	mov	r1, sl
 8003e42:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003e46:	4651      	mov	r1, sl
 8003e48:	00ca      	lsls	r2, r1, #3
 8003e4a:	4610      	mov	r0, r2
 8003e4c:	4619      	mov	r1, r3
 8003e4e:	4603      	mov	r3, r0
 8003e50:	4642      	mov	r2, r8
 8003e52:	189b      	adds	r3, r3, r2
 8003e54:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003e58:	464b      	mov	r3, r9
 8003e5a:	460a      	mov	r2, r1
 8003e5c:	eb42 0303 	adc.w	r3, r2, r3
 8003e60:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003e64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e68:	685b      	ldr	r3, [r3, #4]
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	67bb      	str	r3, [r7, #120]	; 0x78
 8003e6e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003e70:	f04f 0200 	mov.w	r2, #0
 8003e74:	f04f 0300 	mov.w	r3, #0
 8003e78:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003e7c:	4649      	mov	r1, r9
 8003e7e:	008b      	lsls	r3, r1, #2
 8003e80:	4641      	mov	r1, r8
 8003e82:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003e86:	4641      	mov	r1, r8
 8003e88:	008a      	lsls	r2, r1, #2
 8003e8a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003e8e:	f7fc fa17 	bl	80002c0 <__aeabi_uldivmod>
 8003e92:	4602      	mov	r2, r0
 8003e94:	460b      	mov	r3, r1
 8003e96:	4b39      	ldr	r3, [pc, #228]	; (8003f7c <UART_SetConfig+0x4e4>)
 8003e98:	fba3 1302 	umull	r1, r3, r3, r2
 8003e9c:	095b      	lsrs	r3, r3, #5
 8003e9e:	2164      	movs	r1, #100	; 0x64
 8003ea0:	fb01 f303 	mul.w	r3, r1, r3
 8003ea4:	1ad3      	subs	r3, r2, r3
 8003ea6:	011b      	lsls	r3, r3, #4
 8003ea8:	3332      	adds	r3, #50	; 0x32
 8003eaa:	4a34      	ldr	r2, [pc, #208]	; (8003f7c <UART_SetConfig+0x4e4>)
 8003eac:	fba2 2303 	umull	r2, r3, r2, r3
 8003eb0:	095b      	lsrs	r3, r3, #5
 8003eb2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003eb6:	441c      	add	r4, r3
 8003eb8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	673b      	str	r3, [r7, #112]	; 0x70
 8003ec0:	677a      	str	r2, [r7, #116]	; 0x74
 8003ec2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003ec6:	4642      	mov	r2, r8
 8003ec8:	464b      	mov	r3, r9
 8003eca:	1891      	adds	r1, r2, r2
 8003ecc:	60b9      	str	r1, [r7, #8]
 8003ece:	415b      	adcs	r3, r3
 8003ed0:	60fb      	str	r3, [r7, #12]
 8003ed2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003ed6:	4641      	mov	r1, r8
 8003ed8:	1851      	adds	r1, r2, r1
 8003eda:	6039      	str	r1, [r7, #0]
 8003edc:	4649      	mov	r1, r9
 8003ede:	414b      	adcs	r3, r1
 8003ee0:	607b      	str	r3, [r7, #4]
 8003ee2:	f04f 0200 	mov.w	r2, #0
 8003ee6:	f04f 0300 	mov.w	r3, #0
 8003eea:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003eee:	4659      	mov	r1, fp
 8003ef0:	00cb      	lsls	r3, r1, #3
 8003ef2:	4651      	mov	r1, sl
 8003ef4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003ef8:	4651      	mov	r1, sl
 8003efa:	00ca      	lsls	r2, r1, #3
 8003efc:	4610      	mov	r0, r2
 8003efe:	4619      	mov	r1, r3
 8003f00:	4603      	mov	r3, r0
 8003f02:	4642      	mov	r2, r8
 8003f04:	189b      	adds	r3, r3, r2
 8003f06:	66bb      	str	r3, [r7, #104]	; 0x68
 8003f08:	464b      	mov	r3, r9
 8003f0a:	460a      	mov	r2, r1
 8003f0c:	eb42 0303 	adc.w	r3, r2, r3
 8003f10:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003f12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f16:	685b      	ldr	r3, [r3, #4]
 8003f18:	2200      	movs	r2, #0
 8003f1a:	663b      	str	r3, [r7, #96]	; 0x60
 8003f1c:	667a      	str	r2, [r7, #100]	; 0x64
 8003f1e:	f04f 0200 	mov.w	r2, #0
 8003f22:	f04f 0300 	mov.w	r3, #0
 8003f26:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003f2a:	4649      	mov	r1, r9
 8003f2c:	008b      	lsls	r3, r1, #2
 8003f2e:	4641      	mov	r1, r8
 8003f30:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003f34:	4641      	mov	r1, r8
 8003f36:	008a      	lsls	r2, r1, #2
 8003f38:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003f3c:	f7fc f9c0 	bl	80002c0 <__aeabi_uldivmod>
 8003f40:	4602      	mov	r2, r0
 8003f42:	460b      	mov	r3, r1
 8003f44:	4b0d      	ldr	r3, [pc, #52]	; (8003f7c <UART_SetConfig+0x4e4>)
 8003f46:	fba3 1302 	umull	r1, r3, r3, r2
 8003f4a:	095b      	lsrs	r3, r3, #5
 8003f4c:	2164      	movs	r1, #100	; 0x64
 8003f4e:	fb01 f303 	mul.w	r3, r1, r3
 8003f52:	1ad3      	subs	r3, r2, r3
 8003f54:	011b      	lsls	r3, r3, #4
 8003f56:	3332      	adds	r3, #50	; 0x32
 8003f58:	4a08      	ldr	r2, [pc, #32]	; (8003f7c <UART_SetConfig+0x4e4>)
 8003f5a:	fba2 2303 	umull	r2, r3, r2, r3
 8003f5e:	095b      	lsrs	r3, r3, #5
 8003f60:	f003 020f 	and.w	r2, r3, #15
 8003f64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	4422      	add	r2, r4
 8003f6c:	609a      	str	r2, [r3, #8]
}
 8003f6e:	bf00      	nop
 8003f70:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003f74:	46bd      	mov	sp, r7
 8003f76:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003f7a:	bf00      	nop
 8003f7c:	51eb851f 	.word	0x51eb851f

08003f80 <findslot>:
 8003f80:	4b0a      	ldr	r3, [pc, #40]	; (8003fac <findslot+0x2c>)
 8003f82:	b510      	push	{r4, lr}
 8003f84:	4604      	mov	r4, r0
 8003f86:	6818      	ldr	r0, [r3, #0]
 8003f88:	b118      	cbz	r0, 8003f92 <findslot+0x12>
 8003f8a:	6983      	ldr	r3, [r0, #24]
 8003f8c:	b90b      	cbnz	r3, 8003f92 <findslot+0x12>
 8003f8e:	f000 faf7 	bl	8004580 <__sinit>
 8003f92:	2c13      	cmp	r4, #19
 8003f94:	d807      	bhi.n	8003fa6 <findslot+0x26>
 8003f96:	4806      	ldr	r0, [pc, #24]	; (8003fb0 <findslot+0x30>)
 8003f98:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 8003f9c:	3201      	adds	r2, #1
 8003f9e:	d002      	beq.n	8003fa6 <findslot+0x26>
 8003fa0:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 8003fa4:	bd10      	pop	{r4, pc}
 8003fa6:	2000      	movs	r0, #0
 8003fa8:	e7fc      	b.n	8003fa4 <findslot+0x24>
 8003faa:	bf00      	nop
 8003fac:	20000328 	.word	0x20000328
 8003fb0:	20000c94 	.word	0x20000c94

08003fb4 <error>:
 8003fb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fb6:	4604      	mov	r4, r0
 8003fb8:	f000 fa84 	bl	80044c4 <__errno>
 8003fbc:	2613      	movs	r6, #19
 8003fbe:	4605      	mov	r5, r0
 8003fc0:	2700      	movs	r7, #0
 8003fc2:	4630      	mov	r0, r6
 8003fc4:	4639      	mov	r1, r7
 8003fc6:	beab      	bkpt	0x00ab
 8003fc8:	4606      	mov	r6, r0
 8003fca:	602e      	str	r6, [r5, #0]
 8003fcc:	4620      	mov	r0, r4
 8003fce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003fd0 <checkerror>:
 8003fd0:	1c43      	adds	r3, r0, #1
 8003fd2:	d101      	bne.n	8003fd8 <checkerror+0x8>
 8003fd4:	f7ff bfee 	b.w	8003fb4 <error>
 8003fd8:	4770      	bx	lr

08003fda <_swiread>:
 8003fda:	b530      	push	{r4, r5, lr}
 8003fdc:	b085      	sub	sp, #20
 8003fde:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8003fe2:	9203      	str	r2, [sp, #12]
 8003fe4:	2406      	movs	r4, #6
 8003fe6:	ad01      	add	r5, sp, #4
 8003fe8:	4620      	mov	r0, r4
 8003fea:	4629      	mov	r1, r5
 8003fec:	beab      	bkpt	0x00ab
 8003fee:	4604      	mov	r4, r0
 8003ff0:	4620      	mov	r0, r4
 8003ff2:	f7ff ffed 	bl	8003fd0 <checkerror>
 8003ff6:	b005      	add	sp, #20
 8003ff8:	bd30      	pop	{r4, r5, pc}

08003ffa <_read>:
 8003ffa:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003ffc:	4615      	mov	r5, r2
 8003ffe:	9101      	str	r1, [sp, #4]
 8004000:	f7ff ffbe 	bl	8003f80 <findslot>
 8004004:	9901      	ldr	r1, [sp, #4]
 8004006:	4604      	mov	r4, r0
 8004008:	b938      	cbnz	r0, 800401a <_read+0x20>
 800400a:	f000 fa5b 	bl	80044c4 <__errno>
 800400e:	2309      	movs	r3, #9
 8004010:	6003      	str	r3, [r0, #0]
 8004012:	f04f 30ff 	mov.w	r0, #4294967295
 8004016:	b003      	add	sp, #12
 8004018:	bd30      	pop	{r4, r5, pc}
 800401a:	6800      	ldr	r0, [r0, #0]
 800401c:	462a      	mov	r2, r5
 800401e:	f7ff ffdc 	bl	8003fda <_swiread>
 8004022:	1c43      	adds	r3, r0, #1
 8004024:	d0f7      	beq.n	8004016 <_read+0x1c>
 8004026:	6863      	ldr	r3, [r4, #4]
 8004028:	1a2a      	subs	r2, r5, r0
 800402a:	4413      	add	r3, r2
 800402c:	6063      	str	r3, [r4, #4]
 800402e:	4610      	mov	r0, r2
 8004030:	e7f1      	b.n	8004016 <_read+0x1c>

08004032 <_swilseek>:
 8004032:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004034:	460c      	mov	r4, r1
 8004036:	4616      	mov	r6, r2
 8004038:	f7ff ffa2 	bl	8003f80 <findslot>
 800403c:	4605      	mov	r5, r0
 800403e:	b940      	cbnz	r0, 8004052 <_swilseek+0x20>
 8004040:	f000 fa40 	bl	80044c4 <__errno>
 8004044:	2309      	movs	r3, #9
 8004046:	6003      	str	r3, [r0, #0]
 8004048:	f04f 34ff 	mov.w	r4, #4294967295
 800404c:	4620      	mov	r0, r4
 800404e:	b003      	add	sp, #12
 8004050:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004052:	2e02      	cmp	r6, #2
 8004054:	d903      	bls.n	800405e <_swilseek+0x2c>
 8004056:	f000 fa35 	bl	80044c4 <__errno>
 800405a:	2316      	movs	r3, #22
 800405c:	e7f3      	b.n	8004046 <_swilseek+0x14>
 800405e:	2e01      	cmp	r6, #1
 8004060:	d112      	bne.n	8004088 <_swilseek+0x56>
 8004062:	6843      	ldr	r3, [r0, #4]
 8004064:	18e4      	adds	r4, r4, r3
 8004066:	d4f6      	bmi.n	8004056 <_swilseek+0x24>
 8004068:	682b      	ldr	r3, [r5, #0]
 800406a:	260a      	movs	r6, #10
 800406c:	e9cd 3400 	strd	r3, r4, [sp]
 8004070:	466f      	mov	r7, sp
 8004072:	4630      	mov	r0, r6
 8004074:	4639      	mov	r1, r7
 8004076:	beab      	bkpt	0x00ab
 8004078:	4606      	mov	r6, r0
 800407a:	4630      	mov	r0, r6
 800407c:	f7ff ffa8 	bl	8003fd0 <checkerror>
 8004080:	2800      	cmp	r0, #0
 8004082:	dbe1      	blt.n	8004048 <_swilseek+0x16>
 8004084:	606c      	str	r4, [r5, #4]
 8004086:	e7e1      	b.n	800404c <_swilseek+0x1a>
 8004088:	2e02      	cmp	r6, #2
 800408a:	d1ed      	bne.n	8004068 <_swilseek+0x36>
 800408c:	6803      	ldr	r3, [r0, #0]
 800408e:	9300      	str	r3, [sp, #0]
 8004090:	260c      	movs	r6, #12
 8004092:	466f      	mov	r7, sp
 8004094:	4630      	mov	r0, r6
 8004096:	4639      	mov	r1, r7
 8004098:	beab      	bkpt	0x00ab
 800409a:	4606      	mov	r6, r0
 800409c:	4630      	mov	r0, r6
 800409e:	f7ff ff97 	bl	8003fd0 <checkerror>
 80040a2:	1c43      	adds	r3, r0, #1
 80040a4:	d0d0      	beq.n	8004048 <_swilseek+0x16>
 80040a6:	4404      	add	r4, r0
 80040a8:	e7de      	b.n	8004068 <_swilseek+0x36>

080040aa <_lseek>:
 80040aa:	f7ff bfc2 	b.w	8004032 <_swilseek>

080040ae <_swiwrite>:
 80040ae:	b530      	push	{r4, r5, lr}
 80040b0:	b085      	sub	sp, #20
 80040b2:	e9cd 0101 	strd	r0, r1, [sp, #4]
 80040b6:	9203      	str	r2, [sp, #12]
 80040b8:	2405      	movs	r4, #5
 80040ba:	ad01      	add	r5, sp, #4
 80040bc:	4620      	mov	r0, r4
 80040be:	4629      	mov	r1, r5
 80040c0:	beab      	bkpt	0x00ab
 80040c2:	4604      	mov	r4, r0
 80040c4:	4620      	mov	r0, r4
 80040c6:	f7ff ff83 	bl	8003fd0 <checkerror>
 80040ca:	b005      	add	sp, #20
 80040cc:	bd30      	pop	{r4, r5, pc}

080040ce <_write>:
 80040ce:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80040d0:	4615      	mov	r5, r2
 80040d2:	9101      	str	r1, [sp, #4]
 80040d4:	f7ff ff54 	bl	8003f80 <findslot>
 80040d8:	9901      	ldr	r1, [sp, #4]
 80040da:	4604      	mov	r4, r0
 80040dc:	b930      	cbnz	r0, 80040ec <_write+0x1e>
 80040de:	f000 f9f1 	bl	80044c4 <__errno>
 80040e2:	2309      	movs	r3, #9
 80040e4:	6003      	str	r3, [r0, #0]
 80040e6:	f04f 30ff 	mov.w	r0, #4294967295
 80040ea:	e012      	b.n	8004112 <_write+0x44>
 80040ec:	6800      	ldr	r0, [r0, #0]
 80040ee:	462a      	mov	r2, r5
 80040f0:	f7ff ffdd 	bl	80040ae <_swiwrite>
 80040f4:	2800      	cmp	r0, #0
 80040f6:	dbf6      	blt.n	80040e6 <_write+0x18>
 80040f8:	6862      	ldr	r2, [r4, #4]
 80040fa:	1a2b      	subs	r3, r5, r0
 80040fc:	441a      	add	r2, r3
 80040fe:	42a8      	cmp	r0, r5
 8004100:	6062      	str	r2, [r4, #4]
 8004102:	d105      	bne.n	8004110 <_write+0x42>
 8004104:	2000      	movs	r0, #0
 8004106:	b003      	add	sp, #12
 8004108:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800410c:	f7ff bf52 	b.w	8003fb4 <error>
 8004110:	4618      	mov	r0, r3
 8004112:	b003      	add	sp, #12
 8004114:	bd30      	pop	{r4, r5, pc}

08004116 <_swiclose>:
 8004116:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004118:	2402      	movs	r4, #2
 800411a:	9001      	str	r0, [sp, #4]
 800411c:	ad01      	add	r5, sp, #4
 800411e:	4620      	mov	r0, r4
 8004120:	4629      	mov	r1, r5
 8004122:	beab      	bkpt	0x00ab
 8004124:	4604      	mov	r4, r0
 8004126:	4620      	mov	r0, r4
 8004128:	f7ff ff52 	bl	8003fd0 <checkerror>
 800412c:	b003      	add	sp, #12
 800412e:	bd30      	pop	{r4, r5, pc}

08004130 <_close>:
 8004130:	b538      	push	{r3, r4, r5, lr}
 8004132:	4605      	mov	r5, r0
 8004134:	f7ff ff24 	bl	8003f80 <findslot>
 8004138:	4604      	mov	r4, r0
 800413a:	b930      	cbnz	r0, 800414a <_close+0x1a>
 800413c:	f000 f9c2 	bl	80044c4 <__errno>
 8004140:	2309      	movs	r3, #9
 8004142:	6003      	str	r3, [r0, #0]
 8004144:	f04f 30ff 	mov.w	r0, #4294967295
 8004148:	bd38      	pop	{r3, r4, r5, pc}
 800414a:	3d01      	subs	r5, #1
 800414c:	2d01      	cmp	r5, #1
 800414e:	d809      	bhi.n	8004164 <_close+0x34>
 8004150:	4b09      	ldr	r3, [pc, #36]	; (8004178 <_close+0x48>)
 8004152:	689a      	ldr	r2, [r3, #8]
 8004154:	691b      	ldr	r3, [r3, #16]
 8004156:	429a      	cmp	r2, r3
 8004158:	d104      	bne.n	8004164 <_close+0x34>
 800415a:	f04f 33ff 	mov.w	r3, #4294967295
 800415e:	6003      	str	r3, [r0, #0]
 8004160:	2000      	movs	r0, #0
 8004162:	e7f1      	b.n	8004148 <_close+0x18>
 8004164:	6820      	ldr	r0, [r4, #0]
 8004166:	f7ff ffd6 	bl	8004116 <_swiclose>
 800416a:	2800      	cmp	r0, #0
 800416c:	d1ec      	bne.n	8004148 <_close+0x18>
 800416e:	f04f 33ff 	mov.w	r3, #4294967295
 8004172:	6023      	str	r3, [r4, #0]
 8004174:	e7e8      	b.n	8004148 <_close+0x18>
 8004176:	bf00      	nop
 8004178:	20000c94 	.word	0x20000c94

0800417c <_swistat>:
 800417c:	b570      	push	{r4, r5, r6, lr}
 800417e:	460c      	mov	r4, r1
 8004180:	f7ff fefe 	bl	8003f80 <findslot>
 8004184:	4605      	mov	r5, r0
 8004186:	b930      	cbnz	r0, 8004196 <_swistat+0x1a>
 8004188:	f000 f99c 	bl	80044c4 <__errno>
 800418c:	2309      	movs	r3, #9
 800418e:	6003      	str	r3, [r0, #0]
 8004190:	f04f 30ff 	mov.w	r0, #4294967295
 8004194:	bd70      	pop	{r4, r5, r6, pc}
 8004196:	6863      	ldr	r3, [r4, #4]
 8004198:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800419c:	6063      	str	r3, [r4, #4]
 800419e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80041a2:	64a3      	str	r3, [r4, #72]	; 0x48
 80041a4:	260c      	movs	r6, #12
 80041a6:	4630      	mov	r0, r6
 80041a8:	4629      	mov	r1, r5
 80041aa:	beab      	bkpt	0x00ab
 80041ac:	4605      	mov	r5, r0
 80041ae:	4628      	mov	r0, r5
 80041b0:	f7ff ff0e 	bl	8003fd0 <checkerror>
 80041b4:	1c43      	adds	r3, r0, #1
 80041b6:	bf1c      	itt	ne
 80041b8:	6120      	strne	r0, [r4, #16]
 80041ba:	2000      	movne	r0, #0
 80041bc:	e7ea      	b.n	8004194 <_swistat+0x18>

080041be <_fstat>:
 80041be:	460b      	mov	r3, r1
 80041c0:	b510      	push	{r4, lr}
 80041c2:	2100      	movs	r1, #0
 80041c4:	4604      	mov	r4, r0
 80041c6:	2258      	movs	r2, #88	; 0x58
 80041c8:	4618      	mov	r0, r3
 80041ca:	f000 faac 	bl	8004726 <memset>
 80041ce:	4601      	mov	r1, r0
 80041d0:	4620      	mov	r0, r4
 80041d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80041d6:	f7ff bfd1 	b.w	800417c <_swistat>

080041da <_stat>:
 80041da:	b538      	push	{r3, r4, r5, lr}
 80041dc:	460d      	mov	r5, r1
 80041de:	4604      	mov	r4, r0
 80041e0:	2258      	movs	r2, #88	; 0x58
 80041e2:	2100      	movs	r1, #0
 80041e4:	4628      	mov	r0, r5
 80041e6:	f000 fa9e 	bl	8004726 <memset>
 80041ea:	4620      	mov	r0, r4
 80041ec:	2100      	movs	r1, #0
 80041ee:	f000 f811 	bl	8004214 <_swiopen>
 80041f2:	1c43      	adds	r3, r0, #1
 80041f4:	4604      	mov	r4, r0
 80041f6:	d00b      	beq.n	8004210 <_stat+0x36>
 80041f8:	686b      	ldr	r3, [r5, #4]
 80041fa:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80041fe:	606b      	str	r3, [r5, #4]
 8004200:	4629      	mov	r1, r5
 8004202:	f7ff ffbb 	bl	800417c <_swistat>
 8004206:	4605      	mov	r5, r0
 8004208:	4620      	mov	r0, r4
 800420a:	f7ff ff91 	bl	8004130 <_close>
 800420e:	462c      	mov	r4, r5
 8004210:	4620      	mov	r0, r4
 8004212:	bd38      	pop	{r3, r4, r5, pc}

08004214 <_swiopen>:
 8004214:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004218:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 80042c4 <_swiopen+0xb0>
 800421c:	b097      	sub	sp, #92	; 0x5c
 800421e:	4607      	mov	r7, r0
 8004220:	460e      	mov	r6, r1
 8004222:	2500      	movs	r5, #0
 8004224:	f858 4035 	ldr.w	r4, [r8, r5, lsl #3]
 8004228:	1c61      	adds	r1, r4, #1
 800422a:	d037      	beq.n	800429c <_swiopen+0x88>
 800422c:	3501      	adds	r5, #1
 800422e:	2d14      	cmp	r5, #20
 8004230:	d1f8      	bne.n	8004224 <_swiopen+0x10>
 8004232:	f000 f947 	bl	80044c4 <__errno>
 8004236:	2318      	movs	r3, #24
 8004238:	6003      	str	r3, [r0, #0]
 800423a:	f04f 34ff 	mov.w	r4, #4294967295
 800423e:	e03d      	b.n	80042bc <_swiopen+0xa8>
 8004240:	f3c6 4400 	ubfx	r4, r6, #16, #1
 8004244:	f240 6301 	movw	r3, #1537	; 0x601
 8004248:	07b2      	lsls	r2, r6, #30
 800424a:	bf48      	it	mi
 800424c:	f044 0402 	orrmi.w	r4, r4, #2
 8004250:	421e      	tst	r6, r3
 8004252:	bf18      	it	ne
 8004254:	f044 0404 	orrne.w	r4, r4, #4
 8004258:	0733      	lsls	r3, r6, #28
 800425a:	bf48      	it	mi
 800425c:	f024 0404 	bicmi.w	r4, r4, #4
 8004260:	4638      	mov	r0, r7
 8004262:	bf48      	it	mi
 8004264:	f044 0408 	orrmi.w	r4, r4, #8
 8004268:	9700      	str	r7, [sp, #0]
 800426a:	f7fb ffcb 	bl	8000204 <strlen>
 800426e:	e9cd 4001 	strd	r4, r0, [sp, #4]
 8004272:	2401      	movs	r4, #1
 8004274:	4620      	mov	r0, r4
 8004276:	4649      	mov	r1, r9
 8004278:	beab      	bkpt	0x00ab
 800427a:	4604      	mov	r4, r0
 800427c:	2c00      	cmp	r4, #0
 800427e:	db08      	blt.n	8004292 <_swiopen+0x7e>
 8004280:	f848 4035 	str.w	r4, [r8, r5, lsl #3]
 8004284:	eb08 08c5 	add.w	r8, r8, r5, lsl #3
 8004288:	2300      	movs	r3, #0
 800428a:	f8c8 3004 	str.w	r3, [r8, #4]
 800428e:	462c      	mov	r4, r5
 8004290:	e014      	b.n	80042bc <_swiopen+0xa8>
 8004292:	4620      	mov	r0, r4
 8004294:	f7ff fe8e 	bl	8003fb4 <error>
 8004298:	4604      	mov	r4, r0
 800429a:	e00f      	b.n	80042bc <_swiopen+0xa8>
 800429c:	f406 6320 	and.w	r3, r6, #2560	; 0xa00
 80042a0:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 80042a4:	46e9      	mov	r9, sp
 80042a6:	d1cb      	bne.n	8004240 <_swiopen+0x2c>
 80042a8:	4649      	mov	r1, r9
 80042aa:	4638      	mov	r0, r7
 80042ac:	f7ff ff95 	bl	80041da <_stat>
 80042b0:	3001      	adds	r0, #1
 80042b2:	d0c5      	beq.n	8004240 <_swiopen+0x2c>
 80042b4:	f000 f906 	bl	80044c4 <__errno>
 80042b8:	2311      	movs	r3, #17
 80042ba:	6003      	str	r3, [r0, #0]
 80042bc:	4620      	mov	r0, r4
 80042be:	b017      	add	sp, #92	; 0x5c
 80042c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80042c4:	20000c94 	.word	0x20000c94

080042c8 <_get_semihosting_exts>:
 80042c8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80042cc:	4606      	mov	r6, r0
 80042ce:	460f      	mov	r7, r1
 80042d0:	482a      	ldr	r0, [pc, #168]	; (800437c <_get_semihosting_exts+0xb4>)
 80042d2:	2100      	movs	r1, #0
 80042d4:	4615      	mov	r5, r2
 80042d6:	f7ff ff9d 	bl	8004214 <_swiopen>
 80042da:	462a      	mov	r2, r5
 80042dc:	4604      	mov	r4, r0
 80042de:	2100      	movs	r1, #0
 80042e0:	4630      	mov	r0, r6
 80042e2:	f000 fa20 	bl	8004726 <memset>
 80042e6:	1c63      	adds	r3, r4, #1
 80042e8:	d016      	beq.n	8004318 <_get_semihosting_exts+0x50>
 80042ea:	4620      	mov	r0, r4
 80042ec:	f7ff fe48 	bl	8003f80 <findslot>
 80042f0:	f04f 090c 	mov.w	r9, #12
 80042f4:	4680      	mov	r8, r0
 80042f6:	4648      	mov	r0, r9
 80042f8:	4641      	mov	r1, r8
 80042fa:	beab      	bkpt	0x00ab
 80042fc:	4680      	mov	r8, r0
 80042fe:	4640      	mov	r0, r8
 8004300:	f7ff fe66 	bl	8003fd0 <checkerror>
 8004304:	2803      	cmp	r0, #3
 8004306:	dd02      	ble.n	800430e <_get_semihosting_exts+0x46>
 8004308:	1ec3      	subs	r3, r0, #3
 800430a:	42ab      	cmp	r3, r5
 800430c:	dc08      	bgt.n	8004320 <_get_semihosting_exts+0x58>
 800430e:	4620      	mov	r0, r4
 8004310:	f7ff ff0e 	bl	8004130 <_close>
 8004314:	f04f 34ff 	mov.w	r4, #4294967295
 8004318:	4620      	mov	r0, r4
 800431a:	b003      	add	sp, #12
 800431c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004320:	2204      	movs	r2, #4
 8004322:	eb0d 0102 	add.w	r1, sp, r2
 8004326:	4620      	mov	r0, r4
 8004328:	f7ff fe67 	bl	8003ffa <_read>
 800432c:	2803      	cmp	r0, #3
 800432e:	ddee      	ble.n	800430e <_get_semihosting_exts+0x46>
 8004330:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8004334:	2b53      	cmp	r3, #83	; 0x53
 8004336:	d1ea      	bne.n	800430e <_get_semihosting_exts+0x46>
 8004338:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800433c:	2b48      	cmp	r3, #72	; 0x48
 800433e:	d1e6      	bne.n	800430e <_get_semihosting_exts+0x46>
 8004340:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8004344:	2b46      	cmp	r3, #70	; 0x46
 8004346:	d1e2      	bne.n	800430e <_get_semihosting_exts+0x46>
 8004348:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800434c:	2b42      	cmp	r3, #66	; 0x42
 800434e:	d1de      	bne.n	800430e <_get_semihosting_exts+0x46>
 8004350:	2201      	movs	r2, #1
 8004352:	4639      	mov	r1, r7
 8004354:	4620      	mov	r0, r4
 8004356:	f7ff fe6c 	bl	8004032 <_swilseek>
 800435a:	2800      	cmp	r0, #0
 800435c:	dbd7      	blt.n	800430e <_get_semihosting_exts+0x46>
 800435e:	462a      	mov	r2, r5
 8004360:	4631      	mov	r1, r6
 8004362:	4620      	mov	r0, r4
 8004364:	f7ff fe49 	bl	8003ffa <_read>
 8004368:	4605      	mov	r5, r0
 800436a:	4620      	mov	r0, r4
 800436c:	f7ff fee0 	bl	8004130 <_close>
 8004370:	4628      	mov	r0, r5
 8004372:	f7ff fe2d 	bl	8003fd0 <checkerror>
 8004376:	4604      	mov	r4, r0
 8004378:	e7ce      	b.n	8004318 <_get_semihosting_exts+0x50>
 800437a:	bf00      	nop
 800437c:	08006388 	.word	0x08006388

08004380 <initialise_semihosting_exts>:
 8004380:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004382:	4d0a      	ldr	r5, [pc, #40]	; (80043ac <initialise_semihosting_exts+0x2c>)
 8004384:	4c0a      	ldr	r4, [pc, #40]	; (80043b0 <initialise_semihosting_exts+0x30>)
 8004386:	2100      	movs	r1, #0
 8004388:	2201      	movs	r2, #1
 800438a:	a801      	add	r0, sp, #4
 800438c:	6029      	str	r1, [r5, #0]
 800438e:	6022      	str	r2, [r4, #0]
 8004390:	f7ff ff9a 	bl	80042c8 <_get_semihosting_exts>
 8004394:	2800      	cmp	r0, #0
 8004396:	dd07      	ble.n	80043a8 <initialise_semihosting_exts+0x28>
 8004398:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800439c:	f003 0201 	and.w	r2, r3, #1
 80043a0:	f003 0302 	and.w	r3, r3, #2
 80043a4:	602a      	str	r2, [r5, #0]
 80043a6:	6023      	str	r3, [r4, #0]
 80043a8:	b003      	add	sp, #12
 80043aa:	bd30      	pop	{r4, r5, pc}
 80043ac:	20000320 	.word	0x20000320
 80043b0:	20000324 	.word	0x20000324

080043b4 <_has_ext_stdout_stderr>:
 80043b4:	b510      	push	{r4, lr}
 80043b6:	4c04      	ldr	r4, [pc, #16]	; (80043c8 <_has_ext_stdout_stderr+0x14>)
 80043b8:	6823      	ldr	r3, [r4, #0]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	da01      	bge.n	80043c2 <_has_ext_stdout_stderr+0xe>
 80043be:	f7ff ffdf 	bl	8004380 <initialise_semihosting_exts>
 80043c2:	6820      	ldr	r0, [r4, #0]
 80043c4:	bd10      	pop	{r4, pc}
 80043c6:	bf00      	nop
 80043c8:	20000324 	.word	0x20000324

080043cc <initialise_monitor_handles>:
 80043cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043d0:	b085      	sub	sp, #20
 80043d2:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 8004484 <initialise_monitor_handles+0xb8>
 80043d6:	f8cd 9004 	str.w	r9, [sp, #4]
 80043da:	2303      	movs	r3, #3
 80043dc:	2400      	movs	r4, #0
 80043de:	9303      	str	r3, [sp, #12]
 80043e0:	af01      	add	r7, sp, #4
 80043e2:	9402      	str	r4, [sp, #8]
 80043e4:	2501      	movs	r5, #1
 80043e6:	4628      	mov	r0, r5
 80043e8:	4639      	mov	r1, r7
 80043ea:	beab      	bkpt	0x00ab
 80043ec:	4605      	mov	r5, r0
 80043ee:	f8df 8098 	ldr.w	r8, [pc, #152]	; 8004488 <initialise_monitor_handles+0xbc>
 80043f2:	4623      	mov	r3, r4
 80043f4:	4c20      	ldr	r4, [pc, #128]	; (8004478 <initialise_monitor_handles+0xac>)
 80043f6:	f8c8 5000 	str.w	r5, [r8]
 80043fa:	f04f 32ff 	mov.w	r2, #4294967295
 80043fe:	f844 2033 	str.w	r2, [r4, r3, lsl #3]
 8004402:	3301      	adds	r3, #1
 8004404:	2b14      	cmp	r3, #20
 8004406:	d1fa      	bne.n	80043fe <initialise_monitor_handles+0x32>
 8004408:	f7ff ffd4 	bl	80043b4 <_has_ext_stdout_stderr>
 800440c:	4d1b      	ldr	r5, [pc, #108]	; (800447c <initialise_monitor_handles+0xb0>)
 800440e:	b1d0      	cbz	r0, 8004446 <initialise_monitor_handles+0x7a>
 8004410:	f04f 0a03 	mov.w	sl, #3
 8004414:	2304      	movs	r3, #4
 8004416:	f8cd 9004 	str.w	r9, [sp, #4]
 800441a:	2601      	movs	r6, #1
 800441c:	f8cd a00c 	str.w	sl, [sp, #12]
 8004420:	9302      	str	r3, [sp, #8]
 8004422:	4630      	mov	r0, r6
 8004424:	4639      	mov	r1, r7
 8004426:	beab      	bkpt	0x00ab
 8004428:	4683      	mov	fp, r0
 800442a:	4b15      	ldr	r3, [pc, #84]	; (8004480 <initialise_monitor_handles+0xb4>)
 800442c:	f8cd 9004 	str.w	r9, [sp, #4]
 8004430:	f8c3 b000 	str.w	fp, [r3]
 8004434:	2308      	movs	r3, #8
 8004436:	f8cd a00c 	str.w	sl, [sp, #12]
 800443a:	9302      	str	r3, [sp, #8]
 800443c:	4630      	mov	r0, r6
 800443e:	4639      	mov	r1, r7
 8004440:	beab      	bkpt	0x00ab
 8004442:	4606      	mov	r6, r0
 8004444:	602e      	str	r6, [r5, #0]
 8004446:	682b      	ldr	r3, [r5, #0]
 8004448:	3301      	adds	r3, #1
 800444a:	bf02      	ittt	eq
 800444c:	4b0c      	ldreq	r3, [pc, #48]	; (8004480 <initialise_monitor_handles+0xb4>)
 800444e:	681b      	ldreq	r3, [r3, #0]
 8004450:	602b      	streq	r3, [r5, #0]
 8004452:	2600      	movs	r6, #0
 8004454:	f8d8 3000 	ldr.w	r3, [r8]
 8004458:	6023      	str	r3, [r4, #0]
 800445a:	6066      	str	r6, [r4, #4]
 800445c:	f7ff ffaa 	bl	80043b4 <_has_ext_stdout_stderr>
 8004460:	b130      	cbz	r0, 8004470 <initialise_monitor_handles+0xa4>
 8004462:	4b07      	ldr	r3, [pc, #28]	; (8004480 <initialise_monitor_handles+0xb4>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	e9c4 3602 	strd	r3, r6, [r4, #8]
 800446a:	682b      	ldr	r3, [r5, #0]
 800446c:	e9c4 3604 	strd	r3, r6, [r4, #16]
 8004470:	b005      	add	sp, #20
 8004472:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004476:	bf00      	nop
 8004478:	20000c94 	.word	0x20000c94
 800447c:	20000c88 	.word	0x20000c88
 8004480:	20000c90 	.word	0x20000c90
 8004484:	0800639e 	.word	0x0800639e
 8004488:	20000c8c 	.word	0x20000c8c

0800448c <_isatty>:
 800448c:	b570      	push	{r4, r5, r6, lr}
 800448e:	f7ff fd77 	bl	8003f80 <findslot>
 8004492:	2509      	movs	r5, #9
 8004494:	4604      	mov	r4, r0
 8004496:	b920      	cbnz	r0, 80044a2 <_isatty+0x16>
 8004498:	f000 f814 	bl	80044c4 <__errno>
 800449c:	6005      	str	r5, [r0, #0]
 800449e:	4620      	mov	r0, r4
 80044a0:	bd70      	pop	{r4, r5, r6, pc}
 80044a2:	4628      	mov	r0, r5
 80044a4:	4621      	mov	r1, r4
 80044a6:	beab      	bkpt	0x00ab
 80044a8:	4604      	mov	r4, r0
 80044aa:	2c01      	cmp	r4, #1
 80044ac:	d0f7      	beq.n	800449e <_isatty+0x12>
 80044ae:	f000 f809 	bl	80044c4 <__errno>
 80044b2:	2400      	movs	r4, #0
 80044b4:	4605      	mov	r5, r0
 80044b6:	2613      	movs	r6, #19
 80044b8:	4630      	mov	r0, r6
 80044ba:	4621      	mov	r1, r4
 80044bc:	beab      	bkpt	0x00ab
 80044be:	4606      	mov	r6, r0
 80044c0:	602e      	str	r6, [r5, #0]
 80044c2:	e7ec      	b.n	800449e <_isatty+0x12>

080044c4 <__errno>:
 80044c4:	4b01      	ldr	r3, [pc, #4]	; (80044cc <__errno+0x8>)
 80044c6:	6818      	ldr	r0, [r3, #0]
 80044c8:	4770      	bx	lr
 80044ca:	bf00      	nop
 80044cc:	20000328 	.word	0x20000328

080044d0 <std>:
 80044d0:	2300      	movs	r3, #0
 80044d2:	b510      	push	{r4, lr}
 80044d4:	4604      	mov	r4, r0
 80044d6:	e9c0 3300 	strd	r3, r3, [r0]
 80044da:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80044de:	6083      	str	r3, [r0, #8]
 80044e0:	8181      	strh	r1, [r0, #12]
 80044e2:	6643      	str	r3, [r0, #100]	; 0x64
 80044e4:	81c2      	strh	r2, [r0, #14]
 80044e6:	6183      	str	r3, [r0, #24]
 80044e8:	4619      	mov	r1, r3
 80044ea:	2208      	movs	r2, #8
 80044ec:	305c      	adds	r0, #92	; 0x5c
 80044ee:	f000 f91a 	bl	8004726 <memset>
 80044f2:	4b05      	ldr	r3, [pc, #20]	; (8004508 <std+0x38>)
 80044f4:	6263      	str	r3, [r4, #36]	; 0x24
 80044f6:	4b05      	ldr	r3, [pc, #20]	; (800450c <std+0x3c>)
 80044f8:	62a3      	str	r3, [r4, #40]	; 0x28
 80044fa:	4b05      	ldr	r3, [pc, #20]	; (8004510 <std+0x40>)
 80044fc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80044fe:	4b05      	ldr	r3, [pc, #20]	; (8004514 <std+0x44>)
 8004500:	6224      	str	r4, [r4, #32]
 8004502:	6323      	str	r3, [r4, #48]	; 0x30
 8004504:	bd10      	pop	{r4, pc}
 8004506:	bf00      	nop
 8004508:	08004a35 	.word	0x08004a35
 800450c:	08004a5b 	.word	0x08004a5b
 8004510:	08004a93 	.word	0x08004a93
 8004514:	08004ab7 	.word	0x08004ab7

08004518 <_cleanup_r>:
 8004518:	4901      	ldr	r1, [pc, #4]	; (8004520 <_cleanup_r+0x8>)
 800451a:	f000 b8af 	b.w	800467c <_fwalk_reent>
 800451e:	bf00      	nop
 8004520:	08004dc9 	.word	0x08004dc9

08004524 <__sfmoreglue>:
 8004524:	b570      	push	{r4, r5, r6, lr}
 8004526:	2268      	movs	r2, #104	; 0x68
 8004528:	1e4d      	subs	r5, r1, #1
 800452a:	4355      	muls	r5, r2
 800452c:	460e      	mov	r6, r1
 800452e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004532:	f000 f921 	bl	8004778 <_malloc_r>
 8004536:	4604      	mov	r4, r0
 8004538:	b140      	cbz	r0, 800454c <__sfmoreglue+0x28>
 800453a:	2100      	movs	r1, #0
 800453c:	e9c0 1600 	strd	r1, r6, [r0]
 8004540:	300c      	adds	r0, #12
 8004542:	60a0      	str	r0, [r4, #8]
 8004544:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004548:	f000 f8ed 	bl	8004726 <memset>
 800454c:	4620      	mov	r0, r4
 800454e:	bd70      	pop	{r4, r5, r6, pc}

08004550 <__sfp_lock_acquire>:
 8004550:	4801      	ldr	r0, [pc, #4]	; (8004558 <__sfp_lock_acquire+0x8>)
 8004552:	f000 b8d8 	b.w	8004706 <__retarget_lock_acquire_recursive>
 8004556:	bf00      	nop
 8004558:	20000d35 	.word	0x20000d35

0800455c <__sfp_lock_release>:
 800455c:	4801      	ldr	r0, [pc, #4]	; (8004564 <__sfp_lock_release+0x8>)
 800455e:	f000 b8d3 	b.w	8004708 <__retarget_lock_release_recursive>
 8004562:	bf00      	nop
 8004564:	20000d35 	.word	0x20000d35

08004568 <__sinit_lock_acquire>:
 8004568:	4801      	ldr	r0, [pc, #4]	; (8004570 <__sinit_lock_acquire+0x8>)
 800456a:	f000 b8cc 	b.w	8004706 <__retarget_lock_acquire_recursive>
 800456e:	bf00      	nop
 8004570:	20000d36 	.word	0x20000d36

08004574 <__sinit_lock_release>:
 8004574:	4801      	ldr	r0, [pc, #4]	; (800457c <__sinit_lock_release+0x8>)
 8004576:	f000 b8c7 	b.w	8004708 <__retarget_lock_release_recursive>
 800457a:	bf00      	nop
 800457c:	20000d36 	.word	0x20000d36

08004580 <__sinit>:
 8004580:	b510      	push	{r4, lr}
 8004582:	4604      	mov	r4, r0
 8004584:	f7ff fff0 	bl	8004568 <__sinit_lock_acquire>
 8004588:	69a3      	ldr	r3, [r4, #24]
 800458a:	b11b      	cbz	r3, 8004594 <__sinit+0x14>
 800458c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004590:	f7ff bff0 	b.w	8004574 <__sinit_lock_release>
 8004594:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004598:	6523      	str	r3, [r4, #80]	; 0x50
 800459a:	4b13      	ldr	r3, [pc, #76]	; (80045e8 <__sinit+0x68>)
 800459c:	4a13      	ldr	r2, [pc, #76]	; (80045ec <__sinit+0x6c>)
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	62a2      	str	r2, [r4, #40]	; 0x28
 80045a2:	42a3      	cmp	r3, r4
 80045a4:	bf04      	itt	eq
 80045a6:	2301      	moveq	r3, #1
 80045a8:	61a3      	streq	r3, [r4, #24]
 80045aa:	4620      	mov	r0, r4
 80045ac:	f000 f820 	bl	80045f0 <__sfp>
 80045b0:	6060      	str	r0, [r4, #4]
 80045b2:	4620      	mov	r0, r4
 80045b4:	f000 f81c 	bl	80045f0 <__sfp>
 80045b8:	60a0      	str	r0, [r4, #8]
 80045ba:	4620      	mov	r0, r4
 80045bc:	f000 f818 	bl	80045f0 <__sfp>
 80045c0:	2200      	movs	r2, #0
 80045c2:	60e0      	str	r0, [r4, #12]
 80045c4:	2104      	movs	r1, #4
 80045c6:	6860      	ldr	r0, [r4, #4]
 80045c8:	f7ff ff82 	bl	80044d0 <std>
 80045cc:	68a0      	ldr	r0, [r4, #8]
 80045ce:	2201      	movs	r2, #1
 80045d0:	2109      	movs	r1, #9
 80045d2:	f7ff ff7d 	bl	80044d0 <std>
 80045d6:	68e0      	ldr	r0, [r4, #12]
 80045d8:	2202      	movs	r2, #2
 80045da:	2112      	movs	r1, #18
 80045dc:	f7ff ff78 	bl	80044d0 <std>
 80045e0:	2301      	movs	r3, #1
 80045e2:	61a3      	str	r3, [r4, #24]
 80045e4:	e7d2      	b.n	800458c <__sinit+0xc>
 80045e6:	bf00      	nop
 80045e8:	08006404 	.word	0x08006404
 80045ec:	08004519 	.word	0x08004519

080045f0 <__sfp>:
 80045f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045f2:	4607      	mov	r7, r0
 80045f4:	f7ff ffac 	bl	8004550 <__sfp_lock_acquire>
 80045f8:	4b1e      	ldr	r3, [pc, #120]	; (8004674 <__sfp+0x84>)
 80045fa:	681e      	ldr	r6, [r3, #0]
 80045fc:	69b3      	ldr	r3, [r6, #24]
 80045fe:	b913      	cbnz	r3, 8004606 <__sfp+0x16>
 8004600:	4630      	mov	r0, r6
 8004602:	f7ff ffbd 	bl	8004580 <__sinit>
 8004606:	3648      	adds	r6, #72	; 0x48
 8004608:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800460c:	3b01      	subs	r3, #1
 800460e:	d503      	bpl.n	8004618 <__sfp+0x28>
 8004610:	6833      	ldr	r3, [r6, #0]
 8004612:	b30b      	cbz	r3, 8004658 <__sfp+0x68>
 8004614:	6836      	ldr	r6, [r6, #0]
 8004616:	e7f7      	b.n	8004608 <__sfp+0x18>
 8004618:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800461c:	b9d5      	cbnz	r5, 8004654 <__sfp+0x64>
 800461e:	4b16      	ldr	r3, [pc, #88]	; (8004678 <__sfp+0x88>)
 8004620:	60e3      	str	r3, [r4, #12]
 8004622:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004626:	6665      	str	r5, [r4, #100]	; 0x64
 8004628:	f000 f86c 	bl	8004704 <__retarget_lock_init_recursive>
 800462c:	f7ff ff96 	bl	800455c <__sfp_lock_release>
 8004630:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004634:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004638:	6025      	str	r5, [r4, #0]
 800463a:	61a5      	str	r5, [r4, #24]
 800463c:	2208      	movs	r2, #8
 800463e:	4629      	mov	r1, r5
 8004640:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004644:	f000 f86f 	bl	8004726 <memset>
 8004648:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800464c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004650:	4620      	mov	r0, r4
 8004652:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004654:	3468      	adds	r4, #104	; 0x68
 8004656:	e7d9      	b.n	800460c <__sfp+0x1c>
 8004658:	2104      	movs	r1, #4
 800465a:	4638      	mov	r0, r7
 800465c:	f7ff ff62 	bl	8004524 <__sfmoreglue>
 8004660:	4604      	mov	r4, r0
 8004662:	6030      	str	r0, [r6, #0]
 8004664:	2800      	cmp	r0, #0
 8004666:	d1d5      	bne.n	8004614 <__sfp+0x24>
 8004668:	f7ff ff78 	bl	800455c <__sfp_lock_release>
 800466c:	230c      	movs	r3, #12
 800466e:	603b      	str	r3, [r7, #0]
 8004670:	e7ee      	b.n	8004650 <__sfp+0x60>
 8004672:	bf00      	nop
 8004674:	08006404 	.word	0x08006404
 8004678:	ffff0001 	.word	0xffff0001

0800467c <_fwalk_reent>:
 800467c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004680:	4606      	mov	r6, r0
 8004682:	4688      	mov	r8, r1
 8004684:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004688:	2700      	movs	r7, #0
 800468a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800468e:	f1b9 0901 	subs.w	r9, r9, #1
 8004692:	d505      	bpl.n	80046a0 <_fwalk_reent+0x24>
 8004694:	6824      	ldr	r4, [r4, #0]
 8004696:	2c00      	cmp	r4, #0
 8004698:	d1f7      	bne.n	800468a <_fwalk_reent+0xe>
 800469a:	4638      	mov	r0, r7
 800469c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80046a0:	89ab      	ldrh	r3, [r5, #12]
 80046a2:	2b01      	cmp	r3, #1
 80046a4:	d907      	bls.n	80046b6 <_fwalk_reent+0x3a>
 80046a6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80046aa:	3301      	adds	r3, #1
 80046ac:	d003      	beq.n	80046b6 <_fwalk_reent+0x3a>
 80046ae:	4629      	mov	r1, r5
 80046b0:	4630      	mov	r0, r6
 80046b2:	47c0      	blx	r8
 80046b4:	4307      	orrs	r7, r0
 80046b6:	3568      	adds	r5, #104	; 0x68
 80046b8:	e7e9      	b.n	800468e <_fwalk_reent+0x12>
	...

080046bc <__libc_init_array>:
 80046bc:	b570      	push	{r4, r5, r6, lr}
 80046be:	4d0d      	ldr	r5, [pc, #52]	; (80046f4 <__libc_init_array+0x38>)
 80046c0:	4c0d      	ldr	r4, [pc, #52]	; (80046f8 <__libc_init_array+0x3c>)
 80046c2:	1b64      	subs	r4, r4, r5
 80046c4:	10a4      	asrs	r4, r4, #2
 80046c6:	2600      	movs	r6, #0
 80046c8:	42a6      	cmp	r6, r4
 80046ca:	d109      	bne.n	80046e0 <__libc_init_array+0x24>
 80046cc:	4d0b      	ldr	r5, [pc, #44]	; (80046fc <__libc_init_array+0x40>)
 80046ce:	4c0c      	ldr	r4, [pc, #48]	; (8004700 <__libc_init_array+0x44>)
 80046d0:	f001 fde4 	bl	800629c <_init>
 80046d4:	1b64      	subs	r4, r4, r5
 80046d6:	10a4      	asrs	r4, r4, #2
 80046d8:	2600      	movs	r6, #0
 80046da:	42a6      	cmp	r6, r4
 80046dc:	d105      	bne.n	80046ea <__libc_init_array+0x2e>
 80046de:	bd70      	pop	{r4, r5, r6, pc}
 80046e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80046e4:	4798      	blx	r3
 80046e6:	3601      	adds	r6, #1
 80046e8:	e7ee      	b.n	80046c8 <__libc_init_array+0xc>
 80046ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80046ee:	4798      	blx	r3
 80046f0:	3601      	adds	r6, #1
 80046f2:	e7f2      	b.n	80046da <__libc_init_array+0x1e>
 80046f4:	08006560 	.word	0x08006560
 80046f8:	08006560 	.word	0x08006560
 80046fc:	08006560 	.word	0x08006560
 8004700:	08006564 	.word	0x08006564

08004704 <__retarget_lock_init_recursive>:
 8004704:	4770      	bx	lr

08004706 <__retarget_lock_acquire_recursive>:
 8004706:	4770      	bx	lr

08004708 <__retarget_lock_release_recursive>:
 8004708:	4770      	bx	lr

0800470a <memcpy>:
 800470a:	440a      	add	r2, r1
 800470c:	4291      	cmp	r1, r2
 800470e:	f100 33ff 	add.w	r3, r0, #4294967295
 8004712:	d100      	bne.n	8004716 <memcpy+0xc>
 8004714:	4770      	bx	lr
 8004716:	b510      	push	{r4, lr}
 8004718:	f811 4b01 	ldrb.w	r4, [r1], #1
 800471c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004720:	4291      	cmp	r1, r2
 8004722:	d1f9      	bne.n	8004718 <memcpy+0xe>
 8004724:	bd10      	pop	{r4, pc}

08004726 <memset>:
 8004726:	4402      	add	r2, r0
 8004728:	4603      	mov	r3, r0
 800472a:	4293      	cmp	r3, r2
 800472c:	d100      	bne.n	8004730 <memset+0xa>
 800472e:	4770      	bx	lr
 8004730:	f803 1b01 	strb.w	r1, [r3], #1
 8004734:	e7f9      	b.n	800472a <memset+0x4>
	...

08004738 <sbrk_aligned>:
 8004738:	b570      	push	{r4, r5, r6, lr}
 800473a:	4e0e      	ldr	r6, [pc, #56]	; (8004774 <sbrk_aligned+0x3c>)
 800473c:	460c      	mov	r4, r1
 800473e:	6831      	ldr	r1, [r6, #0]
 8004740:	4605      	mov	r5, r0
 8004742:	b911      	cbnz	r1, 800474a <sbrk_aligned+0x12>
 8004744:	f000 f91a 	bl	800497c <_sbrk_r>
 8004748:	6030      	str	r0, [r6, #0]
 800474a:	4621      	mov	r1, r4
 800474c:	4628      	mov	r0, r5
 800474e:	f000 f915 	bl	800497c <_sbrk_r>
 8004752:	1c43      	adds	r3, r0, #1
 8004754:	d00a      	beq.n	800476c <sbrk_aligned+0x34>
 8004756:	1cc4      	adds	r4, r0, #3
 8004758:	f024 0403 	bic.w	r4, r4, #3
 800475c:	42a0      	cmp	r0, r4
 800475e:	d007      	beq.n	8004770 <sbrk_aligned+0x38>
 8004760:	1a21      	subs	r1, r4, r0
 8004762:	4628      	mov	r0, r5
 8004764:	f000 f90a 	bl	800497c <_sbrk_r>
 8004768:	3001      	adds	r0, #1
 800476a:	d101      	bne.n	8004770 <sbrk_aligned+0x38>
 800476c:	f04f 34ff 	mov.w	r4, #4294967295
 8004770:	4620      	mov	r0, r4
 8004772:	bd70      	pop	{r4, r5, r6, pc}
 8004774:	20000d3c 	.word	0x20000d3c

08004778 <_malloc_r>:
 8004778:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800477c:	1ccd      	adds	r5, r1, #3
 800477e:	f025 0503 	bic.w	r5, r5, #3
 8004782:	3508      	adds	r5, #8
 8004784:	2d0c      	cmp	r5, #12
 8004786:	bf38      	it	cc
 8004788:	250c      	movcc	r5, #12
 800478a:	2d00      	cmp	r5, #0
 800478c:	4607      	mov	r7, r0
 800478e:	db01      	blt.n	8004794 <_malloc_r+0x1c>
 8004790:	42a9      	cmp	r1, r5
 8004792:	d905      	bls.n	80047a0 <_malloc_r+0x28>
 8004794:	230c      	movs	r3, #12
 8004796:	603b      	str	r3, [r7, #0]
 8004798:	2600      	movs	r6, #0
 800479a:	4630      	mov	r0, r6
 800479c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80047a0:	4e2e      	ldr	r6, [pc, #184]	; (800485c <_malloc_r+0xe4>)
 80047a2:	f000 fbc5 	bl	8004f30 <__malloc_lock>
 80047a6:	6833      	ldr	r3, [r6, #0]
 80047a8:	461c      	mov	r4, r3
 80047aa:	bb34      	cbnz	r4, 80047fa <_malloc_r+0x82>
 80047ac:	4629      	mov	r1, r5
 80047ae:	4638      	mov	r0, r7
 80047b0:	f7ff ffc2 	bl	8004738 <sbrk_aligned>
 80047b4:	1c43      	adds	r3, r0, #1
 80047b6:	4604      	mov	r4, r0
 80047b8:	d14d      	bne.n	8004856 <_malloc_r+0xde>
 80047ba:	6834      	ldr	r4, [r6, #0]
 80047bc:	4626      	mov	r6, r4
 80047be:	2e00      	cmp	r6, #0
 80047c0:	d140      	bne.n	8004844 <_malloc_r+0xcc>
 80047c2:	6823      	ldr	r3, [r4, #0]
 80047c4:	4631      	mov	r1, r6
 80047c6:	4638      	mov	r0, r7
 80047c8:	eb04 0803 	add.w	r8, r4, r3
 80047cc:	f000 f8d6 	bl	800497c <_sbrk_r>
 80047d0:	4580      	cmp	r8, r0
 80047d2:	d13a      	bne.n	800484a <_malloc_r+0xd2>
 80047d4:	6821      	ldr	r1, [r4, #0]
 80047d6:	3503      	adds	r5, #3
 80047d8:	1a6d      	subs	r5, r5, r1
 80047da:	f025 0503 	bic.w	r5, r5, #3
 80047de:	3508      	adds	r5, #8
 80047e0:	2d0c      	cmp	r5, #12
 80047e2:	bf38      	it	cc
 80047e4:	250c      	movcc	r5, #12
 80047e6:	4629      	mov	r1, r5
 80047e8:	4638      	mov	r0, r7
 80047ea:	f7ff ffa5 	bl	8004738 <sbrk_aligned>
 80047ee:	3001      	adds	r0, #1
 80047f0:	d02b      	beq.n	800484a <_malloc_r+0xd2>
 80047f2:	6823      	ldr	r3, [r4, #0]
 80047f4:	442b      	add	r3, r5
 80047f6:	6023      	str	r3, [r4, #0]
 80047f8:	e00e      	b.n	8004818 <_malloc_r+0xa0>
 80047fa:	6822      	ldr	r2, [r4, #0]
 80047fc:	1b52      	subs	r2, r2, r5
 80047fe:	d41e      	bmi.n	800483e <_malloc_r+0xc6>
 8004800:	2a0b      	cmp	r2, #11
 8004802:	d916      	bls.n	8004832 <_malloc_r+0xba>
 8004804:	1961      	adds	r1, r4, r5
 8004806:	42a3      	cmp	r3, r4
 8004808:	6025      	str	r5, [r4, #0]
 800480a:	bf18      	it	ne
 800480c:	6059      	strne	r1, [r3, #4]
 800480e:	6863      	ldr	r3, [r4, #4]
 8004810:	bf08      	it	eq
 8004812:	6031      	streq	r1, [r6, #0]
 8004814:	5162      	str	r2, [r4, r5]
 8004816:	604b      	str	r3, [r1, #4]
 8004818:	4638      	mov	r0, r7
 800481a:	f104 060b 	add.w	r6, r4, #11
 800481e:	f000 fb8d 	bl	8004f3c <__malloc_unlock>
 8004822:	f026 0607 	bic.w	r6, r6, #7
 8004826:	1d23      	adds	r3, r4, #4
 8004828:	1af2      	subs	r2, r6, r3
 800482a:	d0b6      	beq.n	800479a <_malloc_r+0x22>
 800482c:	1b9b      	subs	r3, r3, r6
 800482e:	50a3      	str	r3, [r4, r2]
 8004830:	e7b3      	b.n	800479a <_malloc_r+0x22>
 8004832:	6862      	ldr	r2, [r4, #4]
 8004834:	42a3      	cmp	r3, r4
 8004836:	bf0c      	ite	eq
 8004838:	6032      	streq	r2, [r6, #0]
 800483a:	605a      	strne	r2, [r3, #4]
 800483c:	e7ec      	b.n	8004818 <_malloc_r+0xa0>
 800483e:	4623      	mov	r3, r4
 8004840:	6864      	ldr	r4, [r4, #4]
 8004842:	e7b2      	b.n	80047aa <_malloc_r+0x32>
 8004844:	4634      	mov	r4, r6
 8004846:	6876      	ldr	r6, [r6, #4]
 8004848:	e7b9      	b.n	80047be <_malloc_r+0x46>
 800484a:	230c      	movs	r3, #12
 800484c:	603b      	str	r3, [r7, #0]
 800484e:	4638      	mov	r0, r7
 8004850:	f000 fb74 	bl	8004f3c <__malloc_unlock>
 8004854:	e7a1      	b.n	800479a <_malloc_r+0x22>
 8004856:	6025      	str	r5, [r4, #0]
 8004858:	e7de      	b.n	8004818 <_malloc_r+0xa0>
 800485a:	bf00      	nop
 800485c:	20000d38 	.word	0x20000d38

08004860 <iprintf>:
 8004860:	b40f      	push	{r0, r1, r2, r3}
 8004862:	4b0a      	ldr	r3, [pc, #40]	; (800488c <iprintf+0x2c>)
 8004864:	b513      	push	{r0, r1, r4, lr}
 8004866:	681c      	ldr	r4, [r3, #0]
 8004868:	b124      	cbz	r4, 8004874 <iprintf+0x14>
 800486a:	69a3      	ldr	r3, [r4, #24]
 800486c:	b913      	cbnz	r3, 8004874 <iprintf+0x14>
 800486e:	4620      	mov	r0, r4
 8004870:	f7ff fe86 	bl	8004580 <__sinit>
 8004874:	ab05      	add	r3, sp, #20
 8004876:	9a04      	ldr	r2, [sp, #16]
 8004878:	68a1      	ldr	r1, [r4, #8]
 800487a:	9301      	str	r3, [sp, #4]
 800487c:	4620      	mov	r0, r4
 800487e:	f000 ff07 	bl	8005690 <_vfiprintf_r>
 8004882:	b002      	add	sp, #8
 8004884:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004888:	b004      	add	sp, #16
 800488a:	4770      	bx	lr
 800488c:	20000328 	.word	0x20000328

08004890 <_puts_r>:
 8004890:	b570      	push	{r4, r5, r6, lr}
 8004892:	460e      	mov	r6, r1
 8004894:	4605      	mov	r5, r0
 8004896:	b118      	cbz	r0, 80048a0 <_puts_r+0x10>
 8004898:	6983      	ldr	r3, [r0, #24]
 800489a:	b90b      	cbnz	r3, 80048a0 <_puts_r+0x10>
 800489c:	f7ff fe70 	bl	8004580 <__sinit>
 80048a0:	69ab      	ldr	r3, [r5, #24]
 80048a2:	68ac      	ldr	r4, [r5, #8]
 80048a4:	b913      	cbnz	r3, 80048ac <_puts_r+0x1c>
 80048a6:	4628      	mov	r0, r5
 80048a8:	f7ff fe6a 	bl	8004580 <__sinit>
 80048ac:	4b2c      	ldr	r3, [pc, #176]	; (8004960 <_puts_r+0xd0>)
 80048ae:	429c      	cmp	r4, r3
 80048b0:	d120      	bne.n	80048f4 <_puts_r+0x64>
 80048b2:	686c      	ldr	r4, [r5, #4]
 80048b4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80048b6:	07db      	lsls	r3, r3, #31
 80048b8:	d405      	bmi.n	80048c6 <_puts_r+0x36>
 80048ba:	89a3      	ldrh	r3, [r4, #12]
 80048bc:	0598      	lsls	r0, r3, #22
 80048be:	d402      	bmi.n	80048c6 <_puts_r+0x36>
 80048c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80048c2:	f7ff ff20 	bl	8004706 <__retarget_lock_acquire_recursive>
 80048c6:	89a3      	ldrh	r3, [r4, #12]
 80048c8:	0719      	lsls	r1, r3, #28
 80048ca:	d51d      	bpl.n	8004908 <_puts_r+0x78>
 80048cc:	6923      	ldr	r3, [r4, #16]
 80048ce:	b1db      	cbz	r3, 8004908 <_puts_r+0x78>
 80048d0:	3e01      	subs	r6, #1
 80048d2:	68a3      	ldr	r3, [r4, #8]
 80048d4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80048d8:	3b01      	subs	r3, #1
 80048da:	60a3      	str	r3, [r4, #8]
 80048dc:	bb39      	cbnz	r1, 800492e <_puts_r+0x9e>
 80048de:	2b00      	cmp	r3, #0
 80048e0:	da38      	bge.n	8004954 <_puts_r+0xc4>
 80048e2:	4622      	mov	r2, r4
 80048e4:	210a      	movs	r1, #10
 80048e6:	4628      	mov	r0, r5
 80048e8:	f000 f906 	bl	8004af8 <__swbuf_r>
 80048ec:	3001      	adds	r0, #1
 80048ee:	d011      	beq.n	8004914 <_puts_r+0x84>
 80048f0:	250a      	movs	r5, #10
 80048f2:	e011      	b.n	8004918 <_puts_r+0x88>
 80048f4:	4b1b      	ldr	r3, [pc, #108]	; (8004964 <_puts_r+0xd4>)
 80048f6:	429c      	cmp	r4, r3
 80048f8:	d101      	bne.n	80048fe <_puts_r+0x6e>
 80048fa:	68ac      	ldr	r4, [r5, #8]
 80048fc:	e7da      	b.n	80048b4 <_puts_r+0x24>
 80048fe:	4b1a      	ldr	r3, [pc, #104]	; (8004968 <_puts_r+0xd8>)
 8004900:	429c      	cmp	r4, r3
 8004902:	bf08      	it	eq
 8004904:	68ec      	ldreq	r4, [r5, #12]
 8004906:	e7d5      	b.n	80048b4 <_puts_r+0x24>
 8004908:	4621      	mov	r1, r4
 800490a:	4628      	mov	r0, r5
 800490c:	f000 f958 	bl	8004bc0 <__swsetup_r>
 8004910:	2800      	cmp	r0, #0
 8004912:	d0dd      	beq.n	80048d0 <_puts_r+0x40>
 8004914:	f04f 35ff 	mov.w	r5, #4294967295
 8004918:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800491a:	07da      	lsls	r2, r3, #31
 800491c:	d405      	bmi.n	800492a <_puts_r+0x9a>
 800491e:	89a3      	ldrh	r3, [r4, #12]
 8004920:	059b      	lsls	r3, r3, #22
 8004922:	d402      	bmi.n	800492a <_puts_r+0x9a>
 8004924:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004926:	f7ff feef 	bl	8004708 <__retarget_lock_release_recursive>
 800492a:	4628      	mov	r0, r5
 800492c:	bd70      	pop	{r4, r5, r6, pc}
 800492e:	2b00      	cmp	r3, #0
 8004930:	da04      	bge.n	800493c <_puts_r+0xac>
 8004932:	69a2      	ldr	r2, [r4, #24]
 8004934:	429a      	cmp	r2, r3
 8004936:	dc06      	bgt.n	8004946 <_puts_r+0xb6>
 8004938:	290a      	cmp	r1, #10
 800493a:	d004      	beq.n	8004946 <_puts_r+0xb6>
 800493c:	6823      	ldr	r3, [r4, #0]
 800493e:	1c5a      	adds	r2, r3, #1
 8004940:	6022      	str	r2, [r4, #0]
 8004942:	7019      	strb	r1, [r3, #0]
 8004944:	e7c5      	b.n	80048d2 <_puts_r+0x42>
 8004946:	4622      	mov	r2, r4
 8004948:	4628      	mov	r0, r5
 800494a:	f000 f8d5 	bl	8004af8 <__swbuf_r>
 800494e:	3001      	adds	r0, #1
 8004950:	d1bf      	bne.n	80048d2 <_puts_r+0x42>
 8004952:	e7df      	b.n	8004914 <_puts_r+0x84>
 8004954:	6823      	ldr	r3, [r4, #0]
 8004956:	250a      	movs	r5, #10
 8004958:	1c5a      	adds	r2, r3, #1
 800495a:	6022      	str	r2, [r4, #0]
 800495c:	701d      	strb	r5, [r3, #0]
 800495e:	e7db      	b.n	8004918 <_puts_r+0x88>
 8004960:	080063c4 	.word	0x080063c4
 8004964:	080063e4 	.word	0x080063e4
 8004968:	080063a4 	.word	0x080063a4

0800496c <puts>:
 800496c:	4b02      	ldr	r3, [pc, #8]	; (8004978 <puts+0xc>)
 800496e:	4601      	mov	r1, r0
 8004970:	6818      	ldr	r0, [r3, #0]
 8004972:	f7ff bf8d 	b.w	8004890 <_puts_r>
 8004976:	bf00      	nop
 8004978:	20000328 	.word	0x20000328

0800497c <_sbrk_r>:
 800497c:	b538      	push	{r3, r4, r5, lr}
 800497e:	4d06      	ldr	r5, [pc, #24]	; (8004998 <_sbrk_r+0x1c>)
 8004980:	2300      	movs	r3, #0
 8004982:	4604      	mov	r4, r0
 8004984:	4608      	mov	r0, r1
 8004986:	602b      	str	r3, [r5, #0]
 8004988:	f7fc fdc6 	bl	8001518 <_sbrk>
 800498c:	1c43      	adds	r3, r0, #1
 800498e:	d102      	bne.n	8004996 <_sbrk_r+0x1a>
 8004990:	682b      	ldr	r3, [r5, #0]
 8004992:	b103      	cbz	r3, 8004996 <_sbrk_r+0x1a>
 8004994:	6023      	str	r3, [r4, #0]
 8004996:	bd38      	pop	{r3, r4, r5, pc}
 8004998:	20000d40 	.word	0x20000d40

0800499c <siprintf>:
 800499c:	b40e      	push	{r1, r2, r3}
 800499e:	b500      	push	{lr}
 80049a0:	b09c      	sub	sp, #112	; 0x70
 80049a2:	ab1d      	add	r3, sp, #116	; 0x74
 80049a4:	9002      	str	r0, [sp, #8]
 80049a6:	9006      	str	r0, [sp, #24]
 80049a8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80049ac:	4809      	ldr	r0, [pc, #36]	; (80049d4 <siprintf+0x38>)
 80049ae:	9107      	str	r1, [sp, #28]
 80049b0:	9104      	str	r1, [sp, #16]
 80049b2:	4909      	ldr	r1, [pc, #36]	; (80049d8 <siprintf+0x3c>)
 80049b4:	f853 2b04 	ldr.w	r2, [r3], #4
 80049b8:	9105      	str	r1, [sp, #20]
 80049ba:	6800      	ldr	r0, [r0, #0]
 80049bc:	9301      	str	r3, [sp, #4]
 80049be:	a902      	add	r1, sp, #8
 80049c0:	f000 fb6a 	bl	8005098 <_svfiprintf_r>
 80049c4:	9b02      	ldr	r3, [sp, #8]
 80049c6:	2200      	movs	r2, #0
 80049c8:	701a      	strb	r2, [r3, #0]
 80049ca:	b01c      	add	sp, #112	; 0x70
 80049cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80049d0:	b003      	add	sp, #12
 80049d2:	4770      	bx	lr
 80049d4:	20000328 	.word	0x20000328
 80049d8:	ffff0208 	.word	0xffff0208

080049dc <siscanf>:
 80049dc:	b40e      	push	{r1, r2, r3}
 80049de:	b510      	push	{r4, lr}
 80049e0:	b09f      	sub	sp, #124	; 0x7c
 80049e2:	ac21      	add	r4, sp, #132	; 0x84
 80049e4:	f44f 7101 	mov.w	r1, #516	; 0x204
 80049e8:	f854 2b04 	ldr.w	r2, [r4], #4
 80049ec:	9201      	str	r2, [sp, #4]
 80049ee:	f8ad 101c 	strh.w	r1, [sp, #28]
 80049f2:	9004      	str	r0, [sp, #16]
 80049f4:	9008      	str	r0, [sp, #32]
 80049f6:	f7fb fc05 	bl	8000204 <strlen>
 80049fa:	4b0c      	ldr	r3, [pc, #48]	; (8004a2c <siscanf+0x50>)
 80049fc:	9005      	str	r0, [sp, #20]
 80049fe:	9009      	str	r0, [sp, #36]	; 0x24
 8004a00:	930d      	str	r3, [sp, #52]	; 0x34
 8004a02:	480b      	ldr	r0, [pc, #44]	; (8004a30 <siscanf+0x54>)
 8004a04:	9a01      	ldr	r2, [sp, #4]
 8004a06:	6800      	ldr	r0, [r0, #0]
 8004a08:	9403      	str	r4, [sp, #12]
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	9311      	str	r3, [sp, #68]	; 0x44
 8004a0e:	9316      	str	r3, [sp, #88]	; 0x58
 8004a10:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004a14:	f8ad 301e 	strh.w	r3, [sp, #30]
 8004a18:	a904      	add	r1, sp, #16
 8004a1a:	4623      	mov	r3, r4
 8004a1c:	f000 fc96 	bl	800534c <__ssvfiscanf_r>
 8004a20:	b01f      	add	sp, #124	; 0x7c
 8004a22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004a26:	b003      	add	sp, #12
 8004a28:	4770      	bx	lr
 8004a2a:	bf00      	nop
 8004a2c:	08004a57 	.word	0x08004a57
 8004a30:	20000328 	.word	0x20000328

08004a34 <__sread>:
 8004a34:	b510      	push	{r4, lr}
 8004a36:	460c      	mov	r4, r1
 8004a38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a3c:	f001 fa3e 	bl	8005ebc <_read_r>
 8004a40:	2800      	cmp	r0, #0
 8004a42:	bfab      	itete	ge
 8004a44:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004a46:	89a3      	ldrhlt	r3, [r4, #12]
 8004a48:	181b      	addge	r3, r3, r0
 8004a4a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004a4e:	bfac      	ite	ge
 8004a50:	6563      	strge	r3, [r4, #84]	; 0x54
 8004a52:	81a3      	strhlt	r3, [r4, #12]
 8004a54:	bd10      	pop	{r4, pc}

08004a56 <__seofread>:
 8004a56:	2000      	movs	r0, #0
 8004a58:	4770      	bx	lr

08004a5a <__swrite>:
 8004a5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a5e:	461f      	mov	r7, r3
 8004a60:	898b      	ldrh	r3, [r1, #12]
 8004a62:	05db      	lsls	r3, r3, #23
 8004a64:	4605      	mov	r5, r0
 8004a66:	460c      	mov	r4, r1
 8004a68:	4616      	mov	r6, r2
 8004a6a:	d505      	bpl.n	8004a78 <__swrite+0x1e>
 8004a6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a70:	2302      	movs	r3, #2
 8004a72:	2200      	movs	r2, #0
 8004a74:	f000 f9e4 	bl	8004e40 <_lseek_r>
 8004a78:	89a3      	ldrh	r3, [r4, #12]
 8004a7a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004a7e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004a82:	81a3      	strh	r3, [r4, #12]
 8004a84:	4632      	mov	r2, r6
 8004a86:	463b      	mov	r3, r7
 8004a88:	4628      	mov	r0, r5
 8004a8a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004a8e:	f000 b885 	b.w	8004b9c <_write_r>

08004a92 <__sseek>:
 8004a92:	b510      	push	{r4, lr}
 8004a94:	460c      	mov	r4, r1
 8004a96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a9a:	f000 f9d1 	bl	8004e40 <_lseek_r>
 8004a9e:	1c43      	adds	r3, r0, #1
 8004aa0:	89a3      	ldrh	r3, [r4, #12]
 8004aa2:	bf15      	itete	ne
 8004aa4:	6560      	strne	r0, [r4, #84]	; 0x54
 8004aa6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004aaa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004aae:	81a3      	strheq	r3, [r4, #12]
 8004ab0:	bf18      	it	ne
 8004ab2:	81a3      	strhne	r3, [r4, #12]
 8004ab4:	bd10      	pop	{r4, pc}

08004ab6 <__sclose>:
 8004ab6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004aba:	f000 b8ef 	b.w	8004c9c <_close_r>

08004abe <strcpy>:
 8004abe:	4603      	mov	r3, r0
 8004ac0:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004ac4:	f803 2b01 	strb.w	r2, [r3], #1
 8004ac8:	2a00      	cmp	r2, #0
 8004aca:	d1f9      	bne.n	8004ac0 <strcpy+0x2>
 8004acc:	4770      	bx	lr

08004ace <strncmp>:
 8004ace:	b510      	push	{r4, lr}
 8004ad0:	b17a      	cbz	r2, 8004af2 <strncmp+0x24>
 8004ad2:	4603      	mov	r3, r0
 8004ad4:	3901      	subs	r1, #1
 8004ad6:	1884      	adds	r4, r0, r2
 8004ad8:	f813 0b01 	ldrb.w	r0, [r3], #1
 8004adc:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8004ae0:	4290      	cmp	r0, r2
 8004ae2:	d101      	bne.n	8004ae8 <strncmp+0x1a>
 8004ae4:	42a3      	cmp	r3, r4
 8004ae6:	d101      	bne.n	8004aec <strncmp+0x1e>
 8004ae8:	1a80      	subs	r0, r0, r2
 8004aea:	bd10      	pop	{r4, pc}
 8004aec:	2800      	cmp	r0, #0
 8004aee:	d1f3      	bne.n	8004ad8 <strncmp+0xa>
 8004af0:	e7fa      	b.n	8004ae8 <strncmp+0x1a>
 8004af2:	4610      	mov	r0, r2
 8004af4:	e7f9      	b.n	8004aea <strncmp+0x1c>
	...

08004af8 <__swbuf_r>:
 8004af8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004afa:	460e      	mov	r6, r1
 8004afc:	4614      	mov	r4, r2
 8004afe:	4605      	mov	r5, r0
 8004b00:	b118      	cbz	r0, 8004b0a <__swbuf_r+0x12>
 8004b02:	6983      	ldr	r3, [r0, #24]
 8004b04:	b90b      	cbnz	r3, 8004b0a <__swbuf_r+0x12>
 8004b06:	f7ff fd3b 	bl	8004580 <__sinit>
 8004b0a:	4b21      	ldr	r3, [pc, #132]	; (8004b90 <__swbuf_r+0x98>)
 8004b0c:	429c      	cmp	r4, r3
 8004b0e:	d12b      	bne.n	8004b68 <__swbuf_r+0x70>
 8004b10:	686c      	ldr	r4, [r5, #4]
 8004b12:	69a3      	ldr	r3, [r4, #24]
 8004b14:	60a3      	str	r3, [r4, #8]
 8004b16:	89a3      	ldrh	r3, [r4, #12]
 8004b18:	071a      	lsls	r2, r3, #28
 8004b1a:	d52f      	bpl.n	8004b7c <__swbuf_r+0x84>
 8004b1c:	6923      	ldr	r3, [r4, #16]
 8004b1e:	b36b      	cbz	r3, 8004b7c <__swbuf_r+0x84>
 8004b20:	6923      	ldr	r3, [r4, #16]
 8004b22:	6820      	ldr	r0, [r4, #0]
 8004b24:	1ac0      	subs	r0, r0, r3
 8004b26:	6963      	ldr	r3, [r4, #20]
 8004b28:	b2f6      	uxtb	r6, r6
 8004b2a:	4283      	cmp	r3, r0
 8004b2c:	4637      	mov	r7, r6
 8004b2e:	dc04      	bgt.n	8004b3a <__swbuf_r+0x42>
 8004b30:	4621      	mov	r1, r4
 8004b32:	4628      	mov	r0, r5
 8004b34:	f000 f948 	bl	8004dc8 <_fflush_r>
 8004b38:	bb30      	cbnz	r0, 8004b88 <__swbuf_r+0x90>
 8004b3a:	68a3      	ldr	r3, [r4, #8]
 8004b3c:	3b01      	subs	r3, #1
 8004b3e:	60a3      	str	r3, [r4, #8]
 8004b40:	6823      	ldr	r3, [r4, #0]
 8004b42:	1c5a      	adds	r2, r3, #1
 8004b44:	6022      	str	r2, [r4, #0]
 8004b46:	701e      	strb	r6, [r3, #0]
 8004b48:	6963      	ldr	r3, [r4, #20]
 8004b4a:	3001      	adds	r0, #1
 8004b4c:	4283      	cmp	r3, r0
 8004b4e:	d004      	beq.n	8004b5a <__swbuf_r+0x62>
 8004b50:	89a3      	ldrh	r3, [r4, #12]
 8004b52:	07db      	lsls	r3, r3, #31
 8004b54:	d506      	bpl.n	8004b64 <__swbuf_r+0x6c>
 8004b56:	2e0a      	cmp	r6, #10
 8004b58:	d104      	bne.n	8004b64 <__swbuf_r+0x6c>
 8004b5a:	4621      	mov	r1, r4
 8004b5c:	4628      	mov	r0, r5
 8004b5e:	f000 f933 	bl	8004dc8 <_fflush_r>
 8004b62:	b988      	cbnz	r0, 8004b88 <__swbuf_r+0x90>
 8004b64:	4638      	mov	r0, r7
 8004b66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004b68:	4b0a      	ldr	r3, [pc, #40]	; (8004b94 <__swbuf_r+0x9c>)
 8004b6a:	429c      	cmp	r4, r3
 8004b6c:	d101      	bne.n	8004b72 <__swbuf_r+0x7a>
 8004b6e:	68ac      	ldr	r4, [r5, #8]
 8004b70:	e7cf      	b.n	8004b12 <__swbuf_r+0x1a>
 8004b72:	4b09      	ldr	r3, [pc, #36]	; (8004b98 <__swbuf_r+0xa0>)
 8004b74:	429c      	cmp	r4, r3
 8004b76:	bf08      	it	eq
 8004b78:	68ec      	ldreq	r4, [r5, #12]
 8004b7a:	e7ca      	b.n	8004b12 <__swbuf_r+0x1a>
 8004b7c:	4621      	mov	r1, r4
 8004b7e:	4628      	mov	r0, r5
 8004b80:	f000 f81e 	bl	8004bc0 <__swsetup_r>
 8004b84:	2800      	cmp	r0, #0
 8004b86:	d0cb      	beq.n	8004b20 <__swbuf_r+0x28>
 8004b88:	f04f 37ff 	mov.w	r7, #4294967295
 8004b8c:	e7ea      	b.n	8004b64 <__swbuf_r+0x6c>
 8004b8e:	bf00      	nop
 8004b90:	080063c4 	.word	0x080063c4
 8004b94:	080063e4 	.word	0x080063e4
 8004b98:	080063a4 	.word	0x080063a4

08004b9c <_write_r>:
 8004b9c:	b538      	push	{r3, r4, r5, lr}
 8004b9e:	4d07      	ldr	r5, [pc, #28]	; (8004bbc <_write_r+0x20>)
 8004ba0:	4604      	mov	r4, r0
 8004ba2:	4608      	mov	r0, r1
 8004ba4:	4611      	mov	r1, r2
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	602a      	str	r2, [r5, #0]
 8004baa:	461a      	mov	r2, r3
 8004bac:	f7ff fa8f 	bl	80040ce <_write>
 8004bb0:	1c43      	adds	r3, r0, #1
 8004bb2:	d102      	bne.n	8004bba <_write_r+0x1e>
 8004bb4:	682b      	ldr	r3, [r5, #0]
 8004bb6:	b103      	cbz	r3, 8004bba <_write_r+0x1e>
 8004bb8:	6023      	str	r3, [r4, #0]
 8004bba:	bd38      	pop	{r3, r4, r5, pc}
 8004bbc:	20000d40 	.word	0x20000d40

08004bc0 <__swsetup_r>:
 8004bc0:	4b32      	ldr	r3, [pc, #200]	; (8004c8c <__swsetup_r+0xcc>)
 8004bc2:	b570      	push	{r4, r5, r6, lr}
 8004bc4:	681d      	ldr	r5, [r3, #0]
 8004bc6:	4606      	mov	r6, r0
 8004bc8:	460c      	mov	r4, r1
 8004bca:	b125      	cbz	r5, 8004bd6 <__swsetup_r+0x16>
 8004bcc:	69ab      	ldr	r3, [r5, #24]
 8004bce:	b913      	cbnz	r3, 8004bd6 <__swsetup_r+0x16>
 8004bd0:	4628      	mov	r0, r5
 8004bd2:	f7ff fcd5 	bl	8004580 <__sinit>
 8004bd6:	4b2e      	ldr	r3, [pc, #184]	; (8004c90 <__swsetup_r+0xd0>)
 8004bd8:	429c      	cmp	r4, r3
 8004bda:	d10f      	bne.n	8004bfc <__swsetup_r+0x3c>
 8004bdc:	686c      	ldr	r4, [r5, #4]
 8004bde:	89a3      	ldrh	r3, [r4, #12]
 8004be0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004be4:	0719      	lsls	r1, r3, #28
 8004be6:	d42c      	bmi.n	8004c42 <__swsetup_r+0x82>
 8004be8:	06dd      	lsls	r5, r3, #27
 8004bea:	d411      	bmi.n	8004c10 <__swsetup_r+0x50>
 8004bec:	2309      	movs	r3, #9
 8004bee:	6033      	str	r3, [r6, #0]
 8004bf0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004bf4:	81a3      	strh	r3, [r4, #12]
 8004bf6:	f04f 30ff 	mov.w	r0, #4294967295
 8004bfa:	e03e      	b.n	8004c7a <__swsetup_r+0xba>
 8004bfc:	4b25      	ldr	r3, [pc, #148]	; (8004c94 <__swsetup_r+0xd4>)
 8004bfe:	429c      	cmp	r4, r3
 8004c00:	d101      	bne.n	8004c06 <__swsetup_r+0x46>
 8004c02:	68ac      	ldr	r4, [r5, #8]
 8004c04:	e7eb      	b.n	8004bde <__swsetup_r+0x1e>
 8004c06:	4b24      	ldr	r3, [pc, #144]	; (8004c98 <__swsetup_r+0xd8>)
 8004c08:	429c      	cmp	r4, r3
 8004c0a:	bf08      	it	eq
 8004c0c:	68ec      	ldreq	r4, [r5, #12]
 8004c0e:	e7e6      	b.n	8004bde <__swsetup_r+0x1e>
 8004c10:	0758      	lsls	r0, r3, #29
 8004c12:	d512      	bpl.n	8004c3a <__swsetup_r+0x7a>
 8004c14:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004c16:	b141      	cbz	r1, 8004c2a <__swsetup_r+0x6a>
 8004c18:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004c1c:	4299      	cmp	r1, r3
 8004c1e:	d002      	beq.n	8004c26 <__swsetup_r+0x66>
 8004c20:	4630      	mov	r0, r6
 8004c22:	f000 f991 	bl	8004f48 <_free_r>
 8004c26:	2300      	movs	r3, #0
 8004c28:	6363      	str	r3, [r4, #52]	; 0x34
 8004c2a:	89a3      	ldrh	r3, [r4, #12]
 8004c2c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004c30:	81a3      	strh	r3, [r4, #12]
 8004c32:	2300      	movs	r3, #0
 8004c34:	6063      	str	r3, [r4, #4]
 8004c36:	6923      	ldr	r3, [r4, #16]
 8004c38:	6023      	str	r3, [r4, #0]
 8004c3a:	89a3      	ldrh	r3, [r4, #12]
 8004c3c:	f043 0308 	orr.w	r3, r3, #8
 8004c40:	81a3      	strh	r3, [r4, #12]
 8004c42:	6923      	ldr	r3, [r4, #16]
 8004c44:	b94b      	cbnz	r3, 8004c5a <__swsetup_r+0x9a>
 8004c46:	89a3      	ldrh	r3, [r4, #12]
 8004c48:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004c4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c50:	d003      	beq.n	8004c5a <__swsetup_r+0x9a>
 8004c52:	4621      	mov	r1, r4
 8004c54:	4630      	mov	r0, r6
 8004c56:	f000 f92b 	bl	8004eb0 <__smakebuf_r>
 8004c5a:	89a0      	ldrh	r0, [r4, #12]
 8004c5c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004c60:	f010 0301 	ands.w	r3, r0, #1
 8004c64:	d00a      	beq.n	8004c7c <__swsetup_r+0xbc>
 8004c66:	2300      	movs	r3, #0
 8004c68:	60a3      	str	r3, [r4, #8]
 8004c6a:	6963      	ldr	r3, [r4, #20]
 8004c6c:	425b      	negs	r3, r3
 8004c6e:	61a3      	str	r3, [r4, #24]
 8004c70:	6923      	ldr	r3, [r4, #16]
 8004c72:	b943      	cbnz	r3, 8004c86 <__swsetup_r+0xc6>
 8004c74:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004c78:	d1ba      	bne.n	8004bf0 <__swsetup_r+0x30>
 8004c7a:	bd70      	pop	{r4, r5, r6, pc}
 8004c7c:	0781      	lsls	r1, r0, #30
 8004c7e:	bf58      	it	pl
 8004c80:	6963      	ldrpl	r3, [r4, #20]
 8004c82:	60a3      	str	r3, [r4, #8]
 8004c84:	e7f4      	b.n	8004c70 <__swsetup_r+0xb0>
 8004c86:	2000      	movs	r0, #0
 8004c88:	e7f7      	b.n	8004c7a <__swsetup_r+0xba>
 8004c8a:	bf00      	nop
 8004c8c:	20000328 	.word	0x20000328
 8004c90:	080063c4 	.word	0x080063c4
 8004c94:	080063e4 	.word	0x080063e4
 8004c98:	080063a4 	.word	0x080063a4

08004c9c <_close_r>:
 8004c9c:	b538      	push	{r3, r4, r5, lr}
 8004c9e:	4d06      	ldr	r5, [pc, #24]	; (8004cb8 <_close_r+0x1c>)
 8004ca0:	2300      	movs	r3, #0
 8004ca2:	4604      	mov	r4, r0
 8004ca4:	4608      	mov	r0, r1
 8004ca6:	602b      	str	r3, [r5, #0]
 8004ca8:	f7ff fa42 	bl	8004130 <_close>
 8004cac:	1c43      	adds	r3, r0, #1
 8004cae:	d102      	bne.n	8004cb6 <_close_r+0x1a>
 8004cb0:	682b      	ldr	r3, [r5, #0]
 8004cb2:	b103      	cbz	r3, 8004cb6 <_close_r+0x1a>
 8004cb4:	6023      	str	r3, [r4, #0]
 8004cb6:	bd38      	pop	{r3, r4, r5, pc}
 8004cb8:	20000d40 	.word	0x20000d40

08004cbc <__sflush_r>:
 8004cbc:	898a      	ldrh	r2, [r1, #12]
 8004cbe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004cc2:	4605      	mov	r5, r0
 8004cc4:	0710      	lsls	r0, r2, #28
 8004cc6:	460c      	mov	r4, r1
 8004cc8:	d458      	bmi.n	8004d7c <__sflush_r+0xc0>
 8004cca:	684b      	ldr	r3, [r1, #4]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	dc05      	bgt.n	8004cdc <__sflush_r+0x20>
 8004cd0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	dc02      	bgt.n	8004cdc <__sflush_r+0x20>
 8004cd6:	2000      	movs	r0, #0
 8004cd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004cdc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004cde:	2e00      	cmp	r6, #0
 8004ce0:	d0f9      	beq.n	8004cd6 <__sflush_r+0x1a>
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004ce8:	682f      	ldr	r7, [r5, #0]
 8004cea:	602b      	str	r3, [r5, #0]
 8004cec:	d032      	beq.n	8004d54 <__sflush_r+0x98>
 8004cee:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004cf0:	89a3      	ldrh	r3, [r4, #12]
 8004cf2:	075a      	lsls	r2, r3, #29
 8004cf4:	d505      	bpl.n	8004d02 <__sflush_r+0x46>
 8004cf6:	6863      	ldr	r3, [r4, #4]
 8004cf8:	1ac0      	subs	r0, r0, r3
 8004cfa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004cfc:	b10b      	cbz	r3, 8004d02 <__sflush_r+0x46>
 8004cfe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004d00:	1ac0      	subs	r0, r0, r3
 8004d02:	2300      	movs	r3, #0
 8004d04:	4602      	mov	r2, r0
 8004d06:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004d08:	6a21      	ldr	r1, [r4, #32]
 8004d0a:	4628      	mov	r0, r5
 8004d0c:	47b0      	blx	r6
 8004d0e:	1c43      	adds	r3, r0, #1
 8004d10:	89a3      	ldrh	r3, [r4, #12]
 8004d12:	d106      	bne.n	8004d22 <__sflush_r+0x66>
 8004d14:	6829      	ldr	r1, [r5, #0]
 8004d16:	291d      	cmp	r1, #29
 8004d18:	d82c      	bhi.n	8004d74 <__sflush_r+0xb8>
 8004d1a:	4a2a      	ldr	r2, [pc, #168]	; (8004dc4 <__sflush_r+0x108>)
 8004d1c:	40ca      	lsrs	r2, r1
 8004d1e:	07d6      	lsls	r6, r2, #31
 8004d20:	d528      	bpl.n	8004d74 <__sflush_r+0xb8>
 8004d22:	2200      	movs	r2, #0
 8004d24:	6062      	str	r2, [r4, #4]
 8004d26:	04d9      	lsls	r1, r3, #19
 8004d28:	6922      	ldr	r2, [r4, #16]
 8004d2a:	6022      	str	r2, [r4, #0]
 8004d2c:	d504      	bpl.n	8004d38 <__sflush_r+0x7c>
 8004d2e:	1c42      	adds	r2, r0, #1
 8004d30:	d101      	bne.n	8004d36 <__sflush_r+0x7a>
 8004d32:	682b      	ldr	r3, [r5, #0]
 8004d34:	b903      	cbnz	r3, 8004d38 <__sflush_r+0x7c>
 8004d36:	6560      	str	r0, [r4, #84]	; 0x54
 8004d38:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004d3a:	602f      	str	r7, [r5, #0]
 8004d3c:	2900      	cmp	r1, #0
 8004d3e:	d0ca      	beq.n	8004cd6 <__sflush_r+0x1a>
 8004d40:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004d44:	4299      	cmp	r1, r3
 8004d46:	d002      	beq.n	8004d4e <__sflush_r+0x92>
 8004d48:	4628      	mov	r0, r5
 8004d4a:	f000 f8fd 	bl	8004f48 <_free_r>
 8004d4e:	2000      	movs	r0, #0
 8004d50:	6360      	str	r0, [r4, #52]	; 0x34
 8004d52:	e7c1      	b.n	8004cd8 <__sflush_r+0x1c>
 8004d54:	6a21      	ldr	r1, [r4, #32]
 8004d56:	2301      	movs	r3, #1
 8004d58:	4628      	mov	r0, r5
 8004d5a:	47b0      	blx	r6
 8004d5c:	1c41      	adds	r1, r0, #1
 8004d5e:	d1c7      	bne.n	8004cf0 <__sflush_r+0x34>
 8004d60:	682b      	ldr	r3, [r5, #0]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d0c4      	beq.n	8004cf0 <__sflush_r+0x34>
 8004d66:	2b1d      	cmp	r3, #29
 8004d68:	d001      	beq.n	8004d6e <__sflush_r+0xb2>
 8004d6a:	2b16      	cmp	r3, #22
 8004d6c:	d101      	bne.n	8004d72 <__sflush_r+0xb6>
 8004d6e:	602f      	str	r7, [r5, #0]
 8004d70:	e7b1      	b.n	8004cd6 <__sflush_r+0x1a>
 8004d72:	89a3      	ldrh	r3, [r4, #12]
 8004d74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004d78:	81a3      	strh	r3, [r4, #12]
 8004d7a:	e7ad      	b.n	8004cd8 <__sflush_r+0x1c>
 8004d7c:	690f      	ldr	r7, [r1, #16]
 8004d7e:	2f00      	cmp	r7, #0
 8004d80:	d0a9      	beq.n	8004cd6 <__sflush_r+0x1a>
 8004d82:	0793      	lsls	r3, r2, #30
 8004d84:	680e      	ldr	r6, [r1, #0]
 8004d86:	bf08      	it	eq
 8004d88:	694b      	ldreq	r3, [r1, #20]
 8004d8a:	600f      	str	r7, [r1, #0]
 8004d8c:	bf18      	it	ne
 8004d8e:	2300      	movne	r3, #0
 8004d90:	eba6 0807 	sub.w	r8, r6, r7
 8004d94:	608b      	str	r3, [r1, #8]
 8004d96:	f1b8 0f00 	cmp.w	r8, #0
 8004d9a:	dd9c      	ble.n	8004cd6 <__sflush_r+0x1a>
 8004d9c:	6a21      	ldr	r1, [r4, #32]
 8004d9e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004da0:	4643      	mov	r3, r8
 8004da2:	463a      	mov	r2, r7
 8004da4:	4628      	mov	r0, r5
 8004da6:	47b0      	blx	r6
 8004da8:	2800      	cmp	r0, #0
 8004daa:	dc06      	bgt.n	8004dba <__sflush_r+0xfe>
 8004dac:	89a3      	ldrh	r3, [r4, #12]
 8004dae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004db2:	81a3      	strh	r3, [r4, #12]
 8004db4:	f04f 30ff 	mov.w	r0, #4294967295
 8004db8:	e78e      	b.n	8004cd8 <__sflush_r+0x1c>
 8004dba:	4407      	add	r7, r0
 8004dbc:	eba8 0800 	sub.w	r8, r8, r0
 8004dc0:	e7e9      	b.n	8004d96 <__sflush_r+0xda>
 8004dc2:	bf00      	nop
 8004dc4:	20400001 	.word	0x20400001

08004dc8 <_fflush_r>:
 8004dc8:	b538      	push	{r3, r4, r5, lr}
 8004dca:	690b      	ldr	r3, [r1, #16]
 8004dcc:	4605      	mov	r5, r0
 8004dce:	460c      	mov	r4, r1
 8004dd0:	b913      	cbnz	r3, 8004dd8 <_fflush_r+0x10>
 8004dd2:	2500      	movs	r5, #0
 8004dd4:	4628      	mov	r0, r5
 8004dd6:	bd38      	pop	{r3, r4, r5, pc}
 8004dd8:	b118      	cbz	r0, 8004de2 <_fflush_r+0x1a>
 8004dda:	6983      	ldr	r3, [r0, #24]
 8004ddc:	b90b      	cbnz	r3, 8004de2 <_fflush_r+0x1a>
 8004dde:	f7ff fbcf 	bl	8004580 <__sinit>
 8004de2:	4b14      	ldr	r3, [pc, #80]	; (8004e34 <_fflush_r+0x6c>)
 8004de4:	429c      	cmp	r4, r3
 8004de6:	d11b      	bne.n	8004e20 <_fflush_r+0x58>
 8004de8:	686c      	ldr	r4, [r5, #4]
 8004dea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d0ef      	beq.n	8004dd2 <_fflush_r+0xa>
 8004df2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004df4:	07d0      	lsls	r0, r2, #31
 8004df6:	d404      	bmi.n	8004e02 <_fflush_r+0x3a>
 8004df8:	0599      	lsls	r1, r3, #22
 8004dfa:	d402      	bmi.n	8004e02 <_fflush_r+0x3a>
 8004dfc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004dfe:	f7ff fc82 	bl	8004706 <__retarget_lock_acquire_recursive>
 8004e02:	4628      	mov	r0, r5
 8004e04:	4621      	mov	r1, r4
 8004e06:	f7ff ff59 	bl	8004cbc <__sflush_r>
 8004e0a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004e0c:	07da      	lsls	r2, r3, #31
 8004e0e:	4605      	mov	r5, r0
 8004e10:	d4e0      	bmi.n	8004dd4 <_fflush_r+0xc>
 8004e12:	89a3      	ldrh	r3, [r4, #12]
 8004e14:	059b      	lsls	r3, r3, #22
 8004e16:	d4dd      	bmi.n	8004dd4 <_fflush_r+0xc>
 8004e18:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004e1a:	f7ff fc75 	bl	8004708 <__retarget_lock_release_recursive>
 8004e1e:	e7d9      	b.n	8004dd4 <_fflush_r+0xc>
 8004e20:	4b05      	ldr	r3, [pc, #20]	; (8004e38 <_fflush_r+0x70>)
 8004e22:	429c      	cmp	r4, r3
 8004e24:	d101      	bne.n	8004e2a <_fflush_r+0x62>
 8004e26:	68ac      	ldr	r4, [r5, #8]
 8004e28:	e7df      	b.n	8004dea <_fflush_r+0x22>
 8004e2a:	4b04      	ldr	r3, [pc, #16]	; (8004e3c <_fflush_r+0x74>)
 8004e2c:	429c      	cmp	r4, r3
 8004e2e:	bf08      	it	eq
 8004e30:	68ec      	ldreq	r4, [r5, #12]
 8004e32:	e7da      	b.n	8004dea <_fflush_r+0x22>
 8004e34:	080063c4 	.word	0x080063c4
 8004e38:	080063e4 	.word	0x080063e4
 8004e3c:	080063a4 	.word	0x080063a4

08004e40 <_lseek_r>:
 8004e40:	b538      	push	{r3, r4, r5, lr}
 8004e42:	4d07      	ldr	r5, [pc, #28]	; (8004e60 <_lseek_r+0x20>)
 8004e44:	4604      	mov	r4, r0
 8004e46:	4608      	mov	r0, r1
 8004e48:	4611      	mov	r1, r2
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	602a      	str	r2, [r5, #0]
 8004e4e:	461a      	mov	r2, r3
 8004e50:	f7ff f92b 	bl	80040aa <_lseek>
 8004e54:	1c43      	adds	r3, r0, #1
 8004e56:	d102      	bne.n	8004e5e <_lseek_r+0x1e>
 8004e58:	682b      	ldr	r3, [r5, #0]
 8004e5a:	b103      	cbz	r3, 8004e5e <_lseek_r+0x1e>
 8004e5c:	6023      	str	r3, [r4, #0]
 8004e5e:	bd38      	pop	{r3, r4, r5, pc}
 8004e60:	20000d40 	.word	0x20000d40

08004e64 <__swhatbuf_r>:
 8004e64:	b570      	push	{r4, r5, r6, lr}
 8004e66:	460e      	mov	r6, r1
 8004e68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e6c:	2900      	cmp	r1, #0
 8004e6e:	b096      	sub	sp, #88	; 0x58
 8004e70:	4614      	mov	r4, r2
 8004e72:	461d      	mov	r5, r3
 8004e74:	da08      	bge.n	8004e88 <__swhatbuf_r+0x24>
 8004e76:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	602a      	str	r2, [r5, #0]
 8004e7e:	061a      	lsls	r2, r3, #24
 8004e80:	d410      	bmi.n	8004ea4 <__swhatbuf_r+0x40>
 8004e82:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004e86:	e00e      	b.n	8004ea6 <__swhatbuf_r+0x42>
 8004e88:	466a      	mov	r2, sp
 8004e8a:	f001 f993 	bl	80061b4 <_fstat_r>
 8004e8e:	2800      	cmp	r0, #0
 8004e90:	dbf1      	blt.n	8004e76 <__swhatbuf_r+0x12>
 8004e92:	9a01      	ldr	r2, [sp, #4]
 8004e94:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004e98:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004e9c:	425a      	negs	r2, r3
 8004e9e:	415a      	adcs	r2, r3
 8004ea0:	602a      	str	r2, [r5, #0]
 8004ea2:	e7ee      	b.n	8004e82 <__swhatbuf_r+0x1e>
 8004ea4:	2340      	movs	r3, #64	; 0x40
 8004ea6:	2000      	movs	r0, #0
 8004ea8:	6023      	str	r3, [r4, #0]
 8004eaa:	b016      	add	sp, #88	; 0x58
 8004eac:	bd70      	pop	{r4, r5, r6, pc}
	...

08004eb0 <__smakebuf_r>:
 8004eb0:	898b      	ldrh	r3, [r1, #12]
 8004eb2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004eb4:	079d      	lsls	r5, r3, #30
 8004eb6:	4606      	mov	r6, r0
 8004eb8:	460c      	mov	r4, r1
 8004eba:	d507      	bpl.n	8004ecc <__smakebuf_r+0x1c>
 8004ebc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004ec0:	6023      	str	r3, [r4, #0]
 8004ec2:	6123      	str	r3, [r4, #16]
 8004ec4:	2301      	movs	r3, #1
 8004ec6:	6163      	str	r3, [r4, #20]
 8004ec8:	b002      	add	sp, #8
 8004eca:	bd70      	pop	{r4, r5, r6, pc}
 8004ecc:	ab01      	add	r3, sp, #4
 8004ece:	466a      	mov	r2, sp
 8004ed0:	f7ff ffc8 	bl	8004e64 <__swhatbuf_r>
 8004ed4:	9900      	ldr	r1, [sp, #0]
 8004ed6:	4605      	mov	r5, r0
 8004ed8:	4630      	mov	r0, r6
 8004eda:	f7ff fc4d 	bl	8004778 <_malloc_r>
 8004ede:	b948      	cbnz	r0, 8004ef4 <__smakebuf_r+0x44>
 8004ee0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004ee4:	059a      	lsls	r2, r3, #22
 8004ee6:	d4ef      	bmi.n	8004ec8 <__smakebuf_r+0x18>
 8004ee8:	f023 0303 	bic.w	r3, r3, #3
 8004eec:	f043 0302 	orr.w	r3, r3, #2
 8004ef0:	81a3      	strh	r3, [r4, #12]
 8004ef2:	e7e3      	b.n	8004ebc <__smakebuf_r+0xc>
 8004ef4:	4b0d      	ldr	r3, [pc, #52]	; (8004f2c <__smakebuf_r+0x7c>)
 8004ef6:	62b3      	str	r3, [r6, #40]	; 0x28
 8004ef8:	89a3      	ldrh	r3, [r4, #12]
 8004efa:	6020      	str	r0, [r4, #0]
 8004efc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f00:	81a3      	strh	r3, [r4, #12]
 8004f02:	9b00      	ldr	r3, [sp, #0]
 8004f04:	6163      	str	r3, [r4, #20]
 8004f06:	9b01      	ldr	r3, [sp, #4]
 8004f08:	6120      	str	r0, [r4, #16]
 8004f0a:	b15b      	cbz	r3, 8004f24 <__smakebuf_r+0x74>
 8004f0c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004f10:	4630      	mov	r0, r6
 8004f12:	f001 f961 	bl	80061d8 <_isatty_r>
 8004f16:	b128      	cbz	r0, 8004f24 <__smakebuf_r+0x74>
 8004f18:	89a3      	ldrh	r3, [r4, #12]
 8004f1a:	f023 0303 	bic.w	r3, r3, #3
 8004f1e:	f043 0301 	orr.w	r3, r3, #1
 8004f22:	81a3      	strh	r3, [r4, #12]
 8004f24:	89a0      	ldrh	r0, [r4, #12]
 8004f26:	4305      	orrs	r5, r0
 8004f28:	81a5      	strh	r5, [r4, #12]
 8004f2a:	e7cd      	b.n	8004ec8 <__smakebuf_r+0x18>
 8004f2c:	08004519 	.word	0x08004519

08004f30 <__malloc_lock>:
 8004f30:	4801      	ldr	r0, [pc, #4]	; (8004f38 <__malloc_lock+0x8>)
 8004f32:	f7ff bbe8 	b.w	8004706 <__retarget_lock_acquire_recursive>
 8004f36:	bf00      	nop
 8004f38:	20000d34 	.word	0x20000d34

08004f3c <__malloc_unlock>:
 8004f3c:	4801      	ldr	r0, [pc, #4]	; (8004f44 <__malloc_unlock+0x8>)
 8004f3e:	f7ff bbe3 	b.w	8004708 <__retarget_lock_release_recursive>
 8004f42:	bf00      	nop
 8004f44:	20000d34 	.word	0x20000d34

08004f48 <_free_r>:
 8004f48:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004f4a:	2900      	cmp	r1, #0
 8004f4c:	d044      	beq.n	8004fd8 <_free_r+0x90>
 8004f4e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004f52:	9001      	str	r0, [sp, #4]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	f1a1 0404 	sub.w	r4, r1, #4
 8004f5a:	bfb8      	it	lt
 8004f5c:	18e4      	addlt	r4, r4, r3
 8004f5e:	f7ff ffe7 	bl	8004f30 <__malloc_lock>
 8004f62:	4a1e      	ldr	r2, [pc, #120]	; (8004fdc <_free_r+0x94>)
 8004f64:	9801      	ldr	r0, [sp, #4]
 8004f66:	6813      	ldr	r3, [r2, #0]
 8004f68:	b933      	cbnz	r3, 8004f78 <_free_r+0x30>
 8004f6a:	6063      	str	r3, [r4, #4]
 8004f6c:	6014      	str	r4, [r2, #0]
 8004f6e:	b003      	add	sp, #12
 8004f70:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004f74:	f7ff bfe2 	b.w	8004f3c <__malloc_unlock>
 8004f78:	42a3      	cmp	r3, r4
 8004f7a:	d908      	bls.n	8004f8e <_free_r+0x46>
 8004f7c:	6825      	ldr	r5, [r4, #0]
 8004f7e:	1961      	adds	r1, r4, r5
 8004f80:	428b      	cmp	r3, r1
 8004f82:	bf01      	itttt	eq
 8004f84:	6819      	ldreq	r1, [r3, #0]
 8004f86:	685b      	ldreq	r3, [r3, #4]
 8004f88:	1949      	addeq	r1, r1, r5
 8004f8a:	6021      	streq	r1, [r4, #0]
 8004f8c:	e7ed      	b.n	8004f6a <_free_r+0x22>
 8004f8e:	461a      	mov	r2, r3
 8004f90:	685b      	ldr	r3, [r3, #4]
 8004f92:	b10b      	cbz	r3, 8004f98 <_free_r+0x50>
 8004f94:	42a3      	cmp	r3, r4
 8004f96:	d9fa      	bls.n	8004f8e <_free_r+0x46>
 8004f98:	6811      	ldr	r1, [r2, #0]
 8004f9a:	1855      	adds	r5, r2, r1
 8004f9c:	42a5      	cmp	r5, r4
 8004f9e:	d10b      	bne.n	8004fb8 <_free_r+0x70>
 8004fa0:	6824      	ldr	r4, [r4, #0]
 8004fa2:	4421      	add	r1, r4
 8004fa4:	1854      	adds	r4, r2, r1
 8004fa6:	42a3      	cmp	r3, r4
 8004fa8:	6011      	str	r1, [r2, #0]
 8004faa:	d1e0      	bne.n	8004f6e <_free_r+0x26>
 8004fac:	681c      	ldr	r4, [r3, #0]
 8004fae:	685b      	ldr	r3, [r3, #4]
 8004fb0:	6053      	str	r3, [r2, #4]
 8004fb2:	4421      	add	r1, r4
 8004fb4:	6011      	str	r1, [r2, #0]
 8004fb6:	e7da      	b.n	8004f6e <_free_r+0x26>
 8004fb8:	d902      	bls.n	8004fc0 <_free_r+0x78>
 8004fba:	230c      	movs	r3, #12
 8004fbc:	6003      	str	r3, [r0, #0]
 8004fbe:	e7d6      	b.n	8004f6e <_free_r+0x26>
 8004fc0:	6825      	ldr	r5, [r4, #0]
 8004fc2:	1961      	adds	r1, r4, r5
 8004fc4:	428b      	cmp	r3, r1
 8004fc6:	bf04      	itt	eq
 8004fc8:	6819      	ldreq	r1, [r3, #0]
 8004fca:	685b      	ldreq	r3, [r3, #4]
 8004fcc:	6063      	str	r3, [r4, #4]
 8004fce:	bf04      	itt	eq
 8004fd0:	1949      	addeq	r1, r1, r5
 8004fd2:	6021      	streq	r1, [r4, #0]
 8004fd4:	6054      	str	r4, [r2, #4]
 8004fd6:	e7ca      	b.n	8004f6e <_free_r+0x26>
 8004fd8:	b003      	add	sp, #12
 8004fda:	bd30      	pop	{r4, r5, pc}
 8004fdc:	20000d38 	.word	0x20000d38

08004fe0 <__ssputs_r>:
 8004fe0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004fe4:	688e      	ldr	r6, [r1, #8]
 8004fe6:	429e      	cmp	r6, r3
 8004fe8:	4682      	mov	sl, r0
 8004fea:	460c      	mov	r4, r1
 8004fec:	4690      	mov	r8, r2
 8004fee:	461f      	mov	r7, r3
 8004ff0:	d838      	bhi.n	8005064 <__ssputs_r+0x84>
 8004ff2:	898a      	ldrh	r2, [r1, #12]
 8004ff4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004ff8:	d032      	beq.n	8005060 <__ssputs_r+0x80>
 8004ffa:	6825      	ldr	r5, [r4, #0]
 8004ffc:	6909      	ldr	r1, [r1, #16]
 8004ffe:	eba5 0901 	sub.w	r9, r5, r1
 8005002:	6965      	ldr	r5, [r4, #20]
 8005004:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005008:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800500c:	3301      	adds	r3, #1
 800500e:	444b      	add	r3, r9
 8005010:	106d      	asrs	r5, r5, #1
 8005012:	429d      	cmp	r5, r3
 8005014:	bf38      	it	cc
 8005016:	461d      	movcc	r5, r3
 8005018:	0553      	lsls	r3, r2, #21
 800501a:	d531      	bpl.n	8005080 <__ssputs_r+0xa0>
 800501c:	4629      	mov	r1, r5
 800501e:	f7ff fbab 	bl	8004778 <_malloc_r>
 8005022:	4606      	mov	r6, r0
 8005024:	b950      	cbnz	r0, 800503c <__ssputs_r+0x5c>
 8005026:	230c      	movs	r3, #12
 8005028:	f8ca 3000 	str.w	r3, [sl]
 800502c:	89a3      	ldrh	r3, [r4, #12]
 800502e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005032:	81a3      	strh	r3, [r4, #12]
 8005034:	f04f 30ff 	mov.w	r0, #4294967295
 8005038:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800503c:	6921      	ldr	r1, [r4, #16]
 800503e:	464a      	mov	r2, r9
 8005040:	f7ff fb63 	bl	800470a <memcpy>
 8005044:	89a3      	ldrh	r3, [r4, #12]
 8005046:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800504a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800504e:	81a3      	strh	r3, [r4, #12]
 8005050:	6126      	str	r6, [r4, #16]
 8005052:	6165      	str	r5, [r4, #20]
 8005054:	444e      	add	r6, r9
 8005056:	eba5 0509 	sub.w	r5, r5, r9
 800505a:	6026      	str	r6, [r4, #0]
 800505c:	60a5      	str	r5, [r4, #8]
 800505e:	463e      	mov	r6, r7
 8005060:	42be      	cmp	r6, r7
 8005062:	d900      	bls.n	8005066 <__ssputs_r+0x86>
 8005064:	463e      	mov	r6, r7
 8005066:	6820      	ldr	r0, [r4, #0]
 8005068:	4632      	mov	r2, r6
 800506a:	4641      	mov	r1, r8
 800506c:	f001 f8c4 	bl	80061f8 <memmove>
 8005070:	68a3      	ldr	r3, [r4, #8]
 8005072:	1b9b      	subs	r3, r3, r6
 8005074:	60a3      	str	r3, [r4, #8]
 8005076:	6823      	ldr	r3, [r4, #0]
 8005078:	4433      	add	r3, r6
 800507a:	6023      	str	r3, [r4, #0]
 800507c:	2000      	movs	r0, #0
 800507e:	e7db      	b.n	8005038 <__ssputs_r+0x58>
 8005080:	462a      	mov	r2, r5
 8005082:	f001 f8d3 	bl	800622c <_realloc_r>
 8005086:	4606      	mov	r6, r0
 8005088:	2800      	cmp	r0, #0
 800508a:	d1e1      	bne.n	8005050 <__ssputs_r+0x70>
 800508c:	6921      	ldr	r1, [r4, #16]
 800508e:	4650      	mov	r0, sl
 8005090:	f7ff ff5a 	bl	8004f48 <_free_r>
 8005094:	e7c7      	b.n	8005026 <__ssputs_r+0x46>
	...

08005098 <_svfiprintf_r>:
 8005098:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800509c:	4698      	mov	r8, r3
 800509e:	898b      	ldrh	r3, [r1, #12]
 80050a0:	061b      	lsls	r3, r3, #24
 80050a2:	b09d      	sub	sp, #116	; 0x74
 80050a4:	4607      	mov	r7, r0
 80050a6:	460d      	mov	r5, r1
 80050a8:	4614      	mov	r4, r2
 80050aa:	d50e      	bpl.n	80050ca <_svfiprintf_r+0x32>
 80050ac:	690b      	ldr	r3, [r1, #16]
 80050ae:	b963      	cbnz	r3, 80050ca <_svfiprintf_r+0x32>
 80050b0:	2140      	movs	r1, #64	; 0x40
 80050b2:	f7ff fb61 	bl	8004778 <_malloc_r>
 80050b6:	6028      	str	r0, [r5, #0]
 80050b8:	6128      	str	r0, [r5, #16]
 80050ba:	b920      	cbnz	r0, 80050c6 <_svfiprintf_r+0x2e>
 80050bc:	230c      	movs	r3, #12
 80050be:	603b      	str	r3, [r7, #0]
 80050c0:	f04f 30ff 	mov.w	r0, #4294967295
 80050c4:	e0d1      	b.n	800526a <_svfiprintf_r+0x1d2>
 80050c6:	2340      	movs	r3, #64	; 0x40
 80050c8:	616b      	str	r3, [r5, #20]
 80050ca:	2300      	movs	r3, #0
 80050cc:	9309      	str	r3, [sp, #36]	; 0x24
 80050ce:	2320      	movs	r3, #32
 80050d0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80050d4:	f8cd 800c 	str.w	r8, [sp, #12]
 80050d8:	2330      	movs	r3, #48	; 0x30
 80050da:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005284 <_svfiprintf_r+0x1ec>
 80050de:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80050e2:	f04f 0901 	mov.w	r9, #1
 80050e6:	4623      	mov	r3, r4
 80050e8:	469a      	mov	sl, r3
 80050ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80050ee:	b10a      	cbz	r2, 80050f4 <_svfiprintf_r+0x5c>
 80050f0:	2a25      	cmp	r2, #37	; 0x25
 80050f2:	d1f9      	bne.n	80050e8 <_svfiprintf_r+0x50>
 80050f4:	ebba 0b04 	subs.w	fp, sl, r4
 80050f8:	d00b      	beq.n	8005112 <_svfiprintf_r+0x7a>
 80050fa:	465b      	mov	r3, fp
 80050fc:	4622      	mov	r2, r4
 80050fe:	4629      	mov	r1, r5
 8005100:	4638      	mov	r0, r7
 8005102:	f7ff ff6d 	bl	8004fe0 <__ssputs_r>
 8005106:	3001      	adds	r0, #1
 8005108:	f000 80aa 	beq.w	8005260 <_svfiprintf_r+0x1c8>
 800510c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800510e:	445a      	add	r2, fp
 8005110:	9209      	str	r2, [sp, #36]	; 0x24
 8005112:	f89a 3000 	ldrb.w	r3, [sl]
 8005116:	2b00      	cmp	r3, #0
 8005118:	f000 80a2 	beq.w	8005260 <_svfiprintf_r+0x1c8>
 800511c:	2300      	movs	r3, #0
 800511e:	f04f 32ff 	mov.w	r2, #4294967295
 8005122:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005126:	f10a 0a01 	add.w	sl, sl, #1
 800512a:	9304      	str	r3, [sp, #16]
 800512c:	9307      	str	r3, [sp, #28]
 800512e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005132:	931a      	str	r3, [sp, #104]	; 0x68
 8005134:	4654      	mov	r4, sl
 8005136:	2205      	movs	r2, #5
 8005138:	f814 1b01 	ldrb.w	r1, [r4], #1
 800513c:	4851      	ldr	r0, [pc, #324]	; (8005284 <_svfiprintf_r+0x1ec>)
 800513e:	f7fb f86f 	bl	8000220 <memchr>
 8005142:	9a04      	ldr	r2, [sp, #16]
 8005144:	b9d8      	cbnz	r0, 800517e <_svfiprintf_r+0xe6>
 8005146:	06d0      	lsls	r0, r2, #27
 8005148:	bf44      	itt	mi
 800514a:	2320      	movmi	r3, #32
 800514c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005150:	0711      	lsls	r1, r2, #28
 8005152:	bf44      	itt	mi
 8005154:	232b      	movmi	r3, #43	; 0x2b
 8005156:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800515a:	f89a 3000 	ldrb.w	r3, [sl]
 800515e:	2b2a      	cmp	r3, #42	; 0x2a
 8005160:	d015      	beq.n	800518e <_svfiprintf_r+0xf6>
 8005162:	9a07      	ldr	r2, [sp, #28]
 8005164:	4654      	mov	r4, sl
 8005166:	2000      	movs	r0, #0
 8005168:	f04f 0c0a 	mov.w	ip, #10
 800516c:	4621      	mov	r1, r4
 800516e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005172:	3b30      	subs	r3, #48	; 0x30
 8005174:	2b09      	cmp	r3, #9
 8005176:	d94e      	bls.n	8005216 <_svfiprintf_r+0x17e>
 8005178:	b1b0      	cbz	r0, 80051a8 <_svfiprintf_r+0x110>
 800517a:	9207      	str	r2, [sp, #28]
 800517c:	e014      	b.n	80051a8 <_svfiprintf_r+0x110>
 800517e:	eba0 0308 	sub.w	r3, r0, r8
 8005182:	fa09 f303 	lsl.w	r3, r9, r3
 8005186:	4313      	orrs	r3, r2
 8005188:	9304      	str	r3, [sp, #16]
 800518a:	46a2      	mov	sl, r4
 800518c:	e7d2      	b.n	8005134 <_svfiprintf_r+0x9c>
 800518e:	9b03      	ldr	r3, [sp, #12]
 8005190:	1d19      	adds	r1, r3, #4
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	9103      	str	r1, [sp, #12]
 8005196:	2b00      	cmp	r3, #0
 8005198:	bfbb      	ittet	lt
 800519a:	425b      	neglt	r3, r3
 800519c:	f042 0202 	orrlt.w	r2, r2, #2
 80051a0:	9307      	strge	r3, [sp, #28]
 80051a2:	9307      	strlt	r3, [sp, #28]
 80051a4:	bfb8      	it	lt
 80051a6:	9204      	strlt	r2, [sp, #16]
 80051a8:	7823      	ldrb	r3, [r4, #0]
 80051aa:	2b2e      	cmp	r3, #46	; 0x2e
 80051ac:	d10c      	bne.n	80051c8 <_svfiprintf_r+0x130>
 80051ae:	7863      	ldrb	r3, [r4, #1]
 80051b0:	2b2a      	cmp	r3, #42	; 0x2a
 80051b2:	d135      	bne.n	8005220 <_svfiprintf_r+0x188>
 80051b4:	9b03      	ldr	r3, [sp, #12]
 80051b6:	1d1a      	adds	r2, r3, #4
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	9203      	str	r2, [sp, #12]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	bfb8      	it	lt
 80051c0:	f04f 33ff 	movlt.w	r3, #4294967295
 80051c4:	3402      	adds	r4, #2
 80051c6:	9305      	str	r3, [sp, #20]
 80051c8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005294 <_svfiprintf_r+0x1fc>
 80051cc:	7821      	ldrb	r1, [r4, #0]
 80051ce:	2203      	movs	r2, #3
 80051d0:	4650      	mov	r0, sl
 80051d2:	f7fb f825 	bl	8000220 <memchr>
 80051d6:	b140      	cbz	r0, 80051ea <_svfiprintf_r+0x152>
 80051d8:	2340      	movs	r3, #64	; 0x40
 80051da:	eba0 000a 	sub.w	r0, r0, sl
 80051de:	fa03 f000 	lsl.w	r0, r3, r0
 80051e2:	9b04      	ldr	r3, [sp, #16]
 80051e4:	4303      	orrs	r3, r0
 80051e6:	3401      	adds	r4, #1
 80051e8:	9304      	str	r3, [sp, #16]
 80051ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80051ee:	4826      	ldr	r0, [pc, #152]	; (8005288 <_svfiprintf_r+0x1f0>)
 80051f0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80051f4:	2206      	movs	r2, #6
 80051f6:	f7fb f813 	bl	8000220 <memchr>
 80051fa:	2800      	cmp	r0, #0
 80051fc:	d038      	beq.n	8005270 <_svfiprintf_r+0x1d8>
 80051fe:	4b23      	ldr	r3, [pc, #140]	; (800528c <_svfiprintf_r+0x1f4>)
 8005200:	bb1b      	cbnz	r3, 800524a <_svfiprintf_r+0x1b2>
 8005202:	9b03      	ldr	r3, [sp, #12]
 8005204:	3307      	adds	r3, #7
 8005206:	f023 0307 	bic.w	r3, r3, #7
 800520a:	3308      	adds	r3, #8
 800520c:	9303      	str	r3, [sp, #12]
 800520e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005210:	4433      	add	r3, r6
 8005212:	9309      	str	r3, [sp, #36]	; 0x24
 8005214:	e767      	b.n	80050e6 <_svfiprintf_r+0x4e>
 8005216:	fb0c 3202 	mla	r2, ip, r2, r3
 800521a:	460c      	mov	r4, r1
 800521c:	2001      	movs	r0, #1
 800521e:	e7a5      	b.n	800516c <_svfiprintf_r+0xd4>
 8005220:	2300      	movs	r3, #0
 8005222:	3401      	adds	r4, #1
 8005224:	9305      	str	r3, [sp, #20]
 8005226:	4619      	mov	r1, r3
 8005228:	f04f 0c0a 	mov.w	ip, #10
 800522c:	4620      	mov	r0, r4
 800522e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005232:	3a30      	subs	r2, #48	; 0x30
 8005234:	2a09      	cmp	r2, #9
 8005236:	d903      	bls.n	8005240 <_svfiprintf_r+0x1a8>
 8005238:	2b00      	cmp	r3, #0
 800523a:	d0c5      	beq.n	80051c8 <_svfiprintf_r+0x130>
 800523c:	9105      	str	r1, [sp, #20]
 800523e:	e7c3      	b.n	80051c8 <_svfiprintf_r+0x130>
 8005240:	fb0c 2101 	mla	r1, ip, r1, r2
 8005244:	4604      	mov	r4, r0
 8005246:	2301      	movs	r3, #1
 8005248:	e7f0      	b.n	800522c <_svfiprintf_r+0x194>
 800524a:	ab03      	add	r3, sp, #12
 800524c:	9300      	str	r3, [sp, #0]
 800524e:	462a      	mov	r2, r5
 8005250:	4b0f      	ldr	r3, [pc, #60]	; (8005290 <_svfiprintf_r+0x1f8>)
 8005252:	a904      	add	r1, sp, #16
 8005254:	4638      	mov	r0, r7
 8005256:	f3af 8000 	nop.w
 800525a:	1c42      	adds	r2, r0, #1
 800525c:	4606      	mov	r6, r0
 800525e:	d1d6      	bne.n	800520e <_svfiprintf_r+0x176>
 8005260:	89ab      	ldrh	r3, [r5, #12]
 8005262:	065b      	lsls	r3, r3, #25
 8005264:	f53f af2c 	bmi.w	80050c0 <_svfiprintf_r+0x28>
 8005268:	9809      	ldr	r0, [sp, #36]	; 0x24
 800526a:	b01d      	add	sp, #116	; 0x74
 800526c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005270:	ab03      	add	r3, sp, #12
 8005272:	9300      	str	r3, [sp, #0]
 8005274:	462a      	mov	r2, r5
 8005276:	4b06      	ldr	r3, [pc, #24]	; (8005290 <_svfiprintf_r+0x1f8>)
 8005278:	a904      	add	r1, sp, #16
 800527a:	4638      	mov	r0, r7
 800527c:	f000 fba6 	bl	80059cc <_printf_i>
 8005280:	e7eb      	b.n	800525a <_svfiprintf_r+0x1c2>
 8005282:	bf00      	nop
 8005284:	08006408 	.word	0x08006408
 8005288:	08006412 	.word	0x08006412
 800528c:	00000000 	.word	0x00000000
 8005290:	08004fe1 	.word	0x08004fe1
 8005294:	0800640e 	.word	0x0800640e

08005298 <_sungetc_r>:
 8005298:	b538      	push	{r3, r4, r5, lr}
 800529a:	1c4b      	adds	r3, r1, #1
 800529c:	4614      	mov	r4, r2
 800529e:	d103      	bne.n	80052a8 <_sungetc_r+0x10>
 80052a0:	f04f 35ff 	mov.w	r5, #4294967295
 80052a4:	4628      	mov	r0, r5
 80052a6:	bd38      	pop	{r3, r4, r5, pc}
 80052a8:	8993      	ldrh	r3, [r2, #12]
 80052aa:	f023 0320 	bic.w	r3, r3, #32
 80052ae:	8193      	strh	r3, [r2, #12]
 80052b0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80052b2:	6852      	ldr	r2, [r2, #4]
 80052b4:	b2cd      	uxtb	r5, r1
 80052b6:	b18b      	cbz	r3, 80052dc <_sungetc_r+0x44>
 80052b8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80052ba:	4293      	cmp	r3, r2
 80052bc:	dd08      	ble.n	80052d0 <_sungetc_r+0x38>
 80052be:	6823      	ldr	r3, [r4, #0]
 80052c0:	1e5a      	subs	r2, r3, #1
 80052c2:	6022      	str	r2, [r4, #0]
 80052c4:	f803 5c01 	strb.w	r5, [r3, #-1]
 80052c8:	6863      	ldr	r3, [r4, #4]
 80052ca:	3301      	adds	r3, #1
 80052cc:	6063      	str	r3, [r4, #4]
 80052ce:	e7e9      	b.n	80052a4 <_sungetc_r+0xc>
 80052d0:	4621      	mov	r1, r4
 80052d2:	f000 ff35 	bl	8006140 <__submore>
 80052d6:	2800      	cmp	r0, #0
 80052d8:	d0f1      	beq.n	80052be <_sungetc_r+0x26>
 80052da:	e7e1      	b.n	80052a0 <_sungetc_r+0x8>
 80052dc:	6921      	ldr	r1, [r4, #16]
 80052de:	6823      	ldr	r3, [r4, #0]
 80052e0:	b151      	cbz	r1, 80052f8 <_sungetc_r+0x60>
 80052e2:	4299      	cmp	r1, r3
 80052e4:	d208      	bcs.n	80052f8 <_sungetc_r+0x60>
 80052e6:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 80052ea:	42a9      	cmp	r1, r5
 80052ec:	d104      	bne.n	80052f8 <_sungetc_r+0x60>
 80052ee:	3b01      	subs	r3, #1
 80052f0:	3201      	adds	r2, #1
 80052f2:	6023      	str	r3, [r4, #0]
 80052f4:	6062      	str	r2, [r4, #4]
 80052f6:	e7d5      	b.n	80052a4 <_sungetc_r+0xc>
 80052f8:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 80052fc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005300:	6363      	str	r3, [r4, #52]	; 0x34
 8005302:	2303      	movs	r3, #3
 8005304:	63a3      	str	r3, [r4, #56]	; 0x38
 8005306:	4623      	mov	r3, r4
 8005308:	f803 5f46 	strb.w	r5, [r3, #70]!
 800530c:	6023      	str	r3, [r4, #0]
 800530e:	2301      	movs	r3, #1
 8005310:	e7dc      	b.n	80052cc <_sungetc_r+0x34>

08005312 <__ssrefill_r>:
 8005312:	b510      	push	{r4, lr}
 8005314:	460c      	mov	r4, r1
 8005316:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8005318:	b169      	cbz	r1, 8005336 <__ssrefill_r+0x24>
 800531a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800531e:	4299      	cmp	r1, r3
 8005320:	d001      	beq.n	8005326 <__ssrefill_r+0x14>
 8005322:	f7ff fe11 	bl	8004f48 <_free_r>
 8005326:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005328:	6063      	str	r3, [r4, #4]
 800532a:	2000      	movs	r0, #0
 800532c:	6360      	str	r0, [r4, #52]	; 0x34
 800532e:	b113      	cbz	r3, 8005336 <__ssrefill_r+0x24>
 8005330:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005332:	6023      	str	r3, [r4, #0]
 8005334:	bd10      	pop	{r4, pc}
 8005336:	6923      	ldr	r3, [r4, #16]
 8005338:	6023      	str	r3, [r4, #0]
 800533a:	2300      	movs	r3, #0
 800533c:	6063      	str	r3, [r4, #4]
 800533e:	89a3      	ldrh	r3, [r4, #12]
 8005340:	f043 0320 	orr.w	r3, r3, #32
 8005344:	81a3      	strh	r3, [r4, #12]
 8005346:	f04f 30ff 	mov.w	r0, #4294967295
 800534a:	e7f3      	b.n	8005334 <__ssrefill_r+0x22>

0800534c <__ssvfiscanf_r>:
 800534c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005350:	460c      	mov	r4, r1
 8005352:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8005356:	2100      	movs	r1, #0
 8005358:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800535c:	49a6      	ldr	r1, [pc, #664]	; (80055f8 <__ssvfiscanf_r+0x2ac>)
 800535e:	91a0      	str	r1, [sp, #640]	; 0x280
 8005360:	f10d 0804 	add.w	r8, sp, #4
 8005364:	49a5      	ldr	r1, [pc, #660]	; (80055fc <__ssvfiscanf_r+0x2b0>)
 8005366:	4fa6      	ldr	r7, [pc, #664]	; (8005600 <__ssvfiscanf_r+0x2b4>)
 8005368:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8005604 <__ssvfiscanf_r+0x2b8>
 800536c:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8005370:	4606      	mov	r6, r0
 8005372:	91a1      	str	r1, [sp, #644]	; 0x284
 8005374:	9300      	str	r3, [sp, #0]
 8005376:	7813      	ldrb	r3, [r2, #0]
 8005378:	2b00      	cmp	r3, #0
 800537a:	f000 815a 	beq.w	8005632 <__ssvfiscanf_r+0x2e6>
 800537e:	5dd9      	ldrb	r1, [r3, r7]
 8005380:	f011 0108 	ands.w	r1, r1, #8
 8005384:	f102 0501 	add.w	r5, r2, #1
 8005388:	d019      	beq.n	80053be <__ssvfiscanf_r+0x72>
 800538a:	6863      	ldr	r3, [r4, #4]
 800538c:	2b00      	cmp	r3, #0
 800538e:	dd0f      	ble.n	80053b0 <__ssvfiscanf_r+0x64>
 8005390:	6823      	ldr	r3, [r4, #0]
 8005392:	781a      	ldrb	r2, [r3, #0]
 8005394:	5cba      	ldrb	r2, [r7, r2]
 8005396:	0712      	lsls	r2, r2, #28
 8005398:	d401      	bmi.n	800539e <__ssvfiscanf_r+0x52>
 800539a:	462a      	mov	r2, r5
 800539c:	e7eb      	b.n	8005376 <__ssvfiscanf_r+0x2a>
 800539e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80053a0:	3201      	adds	r2, #1
 80053a2:	9245      	str	r2, [sp, #276]	; 0x114
 80053a4:	6862      	ldr	r2, [r4, #4]
 80053a6:	3301      	adds	r3, #1
 80053a8:	3a01      	subs	r2, #1
 80053aa:	6062      	str	r2, [r4, #4]
 80053ac:	6023      	str	r3, [r4, #0]
 80053ae:	e7ec      	b.n	800538a <__ssvfiscanf_r+0x3e>
 80053b0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80053b2:	4621      	mov	r1, r4
 80053b4:	4630      	mov	r0, r6
 80053b6:	4798      	blx	r3
 80053b8:	2800      	cmp	r0, #0
 80053ba:	d0e9      	beq.n	8005390 <__ssvfiscanf_r+0x44>
 80053bc:	e7ed      	b.n	800539a <__ssvfiscanf_r+0x4e>
 80053be:	2b25      	cmp	r3, #37	; 0x25
 80053c0:	d012      	beq.n	80053e8 <__ssvfiscanf_r+0x9c>
 80053c2:	469a      	mov	sl, r3
 80053c4:	6863      	ldr	r3, [r4, #4]
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	f340 8091 	ble.w	80054ee <__ssvfiscanf_r+0x1a2>
 80053cc:	6822      	ldr	r2, [r4, #0]
 80053ce:	7813      	ldrb	r3, [r2, #0]
 80053d0:	4553      	cmp	r3, sl
 80053d2:	f040 812e 	bne.w	8005632 <__ssvfiscanf_r+0x2e6>
 80053d6:	6863      	ldr	r3, [r4, #4]
 80053d8:	3b01      	subs	r3, #1
 80053da:	6063      	str	r3, [r4, #4]
 80053dc:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80053de:	3201      	adds	r2, #1
 80053e0:	3301      	adds	r3, #1
 80053e2:	6022      	str	r2, [r4, #0]
 80053e4:	9345      	str	r3, [sp, #276]	; 0x114
 80053e6:	e7d8      	b.n	800539a <__ssvfiscanf_r+0x4e>
 80053e8:	9141      	str	r1, [sp, #260]	; 0x104
 80053ea:	9143      	str	r1, [sp, #268]	; 0x10c
 80053ec:	7853      	ldrb	r3, [r2, #1]
 80053ee:	2b2a      	cmp	r3, #42	; 0x2a
 80053f0:	bf02      	ittt	eq
 80053f2:	2310      	moveq	r3, #16
 80053f4:	1c95      	addeq	r5, r2, #2
 80053f6:	9341      	streq	r3, [sp, #260]	; 0x104
 80053f8:	220a      	movs	r2, #10
 80053fa:	46aa      	mov	sl, r5
 80053fc:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8005400:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8005404:	2b09      	cmp	r3, #9
 8005406:	d91d      	bls.n	8005444 <__ssvfiscanf_r+0xf8>
 8005408:	487e      	ldr	r0, [pc, #504]	; (8005604 <__ssvfiscanf_r+0x2b8>)
 800540a:	2203      	movs	r2, #3
 800540c:	f7fa ff08 	bl	8000220 <memchr>
 8005410:	b140      	cbz	r0, 8005424 <__ssvfiscanf_r+0xd8>
 8005412:	2301      	movs	r3, #1
 8005414:	eba0 0009 	sub.w	r0, r0, r9
 8005418:	fa03 f000 	lsl.w	r0, r3, r0
 800541c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800541e:	4318      	orrs	r0, r3
 8005420:	9041      	str	r0, [sp, #260]	; 0x104
 8005422:	4655      	mov	r5, sl
 8005424:	f815 3b01 	ldrb.w	r3, [r5], #1
 8005428:	2b78      	cmp	r3, #120	; 0x78
 800542a:	d806      	bhi.n	800543a <__ssvfiscanf_r+0xee>
 800542c:	2b57      	cmp	r3, #87	; 0x57
 800542e:	d810      	bhi.n	8005452 <__ssvfiscanf_r+0x106>
 8005430:	2b25      	cmp	r3, #37	; 0x25
 8005432:	d0c6      	beq.n	80053c2 <__ssvfiscanf_r+0x76>
 8005434:	d856      	bhi.n	80054e4 <__ssvfiscanf_r+0x198>
 8005436:	2b00      	cmp	r3, #0
 8005438:	d064      	beq.n	8005504 <__ssvfiscanf_r+0x1b8>
 800543a:	2303      	movs	r3, #3
 800543c:	9347      	str	r3, [sp, #284]	; 0x11c
 800543e:	230a      	movs	r3, #10
 8005440:	9342      	str	r3, [sp, #264]	; 0x108
 8005442:	e071      	b.n	8005528 <__ssvfiscanf_r+0x1dc>
 8005444:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8005446:	fb02 1103 	mla	r1, r2, r3, r1
 800544a:	3930      	subs	r1, #48	; 0x30
 800544c:	9143      	str	r1, [sp, #268]	; 0x10c
 800544e:	4655      	mov	r5, sl
 8005450:	e7d3      	b.n	80053fa <__ssvfiscanf_r+0xae>
 8005452:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8005456:	2a20      	cmp	r2, #32
 8005458:	d8ef      	bhi.n	800543a <__ssvfiscanf_r+0xee>
 800545a:	a101      	add	r1, pc, #4	; (adr r1, 8005460 <__ssvfiscanf_r+0x114>)
 800545c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005460:	08005513 	.word	0x08005513
 8005464:	0800543b 	.word	0x0800543b
 8005468:	0800543b 	.word	0x0800543b
 800546c:	08005571 	.word	0x08005571
 8005470:	0800543b 	.word	0x0800543b
 8005474:	0800543b 	.word	0x0800543b
 8005478:	0800543b 	.word	0x0800543b
 800547c:	0800543b 	.word	0x0800543b
 8005480:	0800543b 	.word	0x0800543b
 8005484:	0800543b 	.word	0x0800543b
 8005488:	0800543b 	.word	0x0800543b
 800548c:	08005587 	.word	0x08005587
 8005490:	0800555d 	.word	0x0800555d
 8005494:	080054eb 	.word	0x080054eb
 8005498:	080054eb 	.word	0x080054eb
 800549c:	080054eb 	.word	0x080054eb
 80054a0:	0800543b 	.word	0x0800543b
 80054a4:	08005561 	.word	0x08005561
 80054a8:	0800543b 	.word	0x0800543b
 80054ac:	0800543b 	.word	0x0800543b
 80054b0:	0800543b 	.word	0x0800543b
 80054b4:	0800543b 	.word	0x0800543b
 80054b8:	08005597 	.word	0x08005597
 80054bc:	08005569 	.word	0x08005569
 80054c0:	0800550b 	.word	0x0800550b
 80054c4:	0800543b 	.word	0x0800543b
 80054c8:	0800543b 	.word	0x0800543b
 80054cc:	08005593 	.word	0x08005593
 80054d0:	0800543b 	.word	0x0800543b
 80054d4:	0800555d 	.word	0x0800555d
 80054d8:	0800543b 	.word	0x0800543b
 80054dc:	0800543b 	.word	0x0800543b
 80054e0:	08005513 	.word	0x08005513
 80054e4:	3b45      	subs	r3, #69	; 0x45
 80054e6:	2b02      	cmp	r3, #2
 80054e8:	d8a7      	bhi.n	800543a <__ssvfiscanf_r+0xee>
 80054ea:	2305      	movs	r3, #5
 80054ec:	e01b      	b.n	8005526 <__ssvfiscanf_r+0x1da>
 80054ee:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80054f0:	4621      	mov	r1, r4
 80054f2:	4630      	mov	r0, r6
 80054f4:	4798      	blx	r3
 80054f6:	2800      	cmp	r0, #0
 80054f8:	f43f af68 	beq.w	80053cc <__ssvfiscanf_r+0x80>
 80054fc:	9844      	ldr	r0, [sp, #272]	; 0x110
 80054fe:	2800      	cmp	r0, #0
 8005500:	f040 808d 	bne.w	800561e <__ssvfiscanf_r+0x2d2>
 8005504:	f04f 30ff 	mov.w	r0, #4294967295
 8005508:	e08f      	b.n	800562a <__ssvfiscanf_r+0x2de>
 800550a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800550c:	f042 0220 	orr.w	r2, r2, #32
 8005510:	9241      	str	r2, [sp, #260]	; 0x104
 8005512:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8005514:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005518:	9241      	str	r2, [sp, #260]	; 0x104
 800551a:	2210      	movs	r2, #16
 800551c:	2b6f      	cmp	r3, #111	; 0x6f
 800551e:	9242      	str	r2, [sp, #264]	; 0x108
 8005520:	bf34      	ite	cc
 8005522:	2303      	movcc	r3, #3
 8005524:	2304      	movcs	r3, #4
 8005526:	9347      	str	r3, [sp, #284]	; 0x11c
 8005528:	6863      	ldr	r3, [r4, #4]
 800552a:	2b00      	cmp	r3, #0
 800552c:	dd42      	ble.n	80055b4 <__ssvfiscanf_r+0x268>
 800552e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8005530:	0659      	lsls	r1, r3, #25
 8005532:	d404      	bmi.n	800553e <__ssvfiscanf_r+0x1f2>
 8005534:	6823      	ldr	r3, [r4, #0]
 8005536:	781a      	ldrb	r2, [r3, #0]
 8005538:	5cba      	ldrb	r2, [r7, r2]
 800553a:	0712      	lsls	r2, r2, #28
 800553c:	d441      	bmi.n	80055c2 <__ssvfiscanf_r+0x276>
 800553e:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8005540:	2b02      	cmp	r3, #2
 8005542:	dc50      	bgt.n	80055e6 <__ssvfiscanf_r+0x29a>
 8005544:	466b      	mov	r3, sp
 8005546:	4622      	mov	r2, r4
 8005548:	a941      	add	r1, sp, #260	; 0x104
 800554a:	4630      	mov	r0, r6
 800554c:	f000 fb64 	bl	8005c18 <_scanf_chars>
 8005550:	2801      	cmp	r0, #1
 8005552:	d06e      	beq.n	8005632 <__ssvfiscanf_r+0x2e6>
 8005554:	2802      	cmp	r0, #2
 8005556:	f47f af20 	bne.w	800539a <__ssvfiscanf_r+0x4e>
 800555a:	e7cf      	b.n	80054fc <__ssvfiscanf_r+0x1b0>
 800555c:	220a      	movs	r2, #10
 800555e:	e7dd      	b.n	800551c <__ssvfiscanf_r+0x1d0>
 8005560:	2300      	movs	r3, #0
 8005562:	9342      	str	r3, [sp, #264]	; 0x108
 8005564:	2303      	movs	r3, #3
 8005566:	e7de      	b.n	8005526 <__ssvfiscanf_r+0x1da>
 8005568:	2308      	movs	r3, #8
 800556a:	9342      	str	r3, [sp, #264]	; 0x108
 800556c:	2304      	movs	r3, #4
 800556e:	e7da      	b.n	8005526 <__ssvfiscanf_r+0x1da>
 8005570:	4629      	mov	r1, r5
 8005572:	4640      	mov	r0, r8
 8005574:	f000 fcb4 	bl	8005ee0 <__sccl>
 8005578:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800557a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800557e:	9341      	str	r3, [sp, #260]	; 0x104
 8005580:	4605      	mov	r5, r0
 8005582:	2301      	movs	r3, #1
 8005584:	e7cf      	b.n	8005526 <__ssvfiscanf_r+0x1da>
 8005586:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8005588:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800558c:	9341      	str	r3, [sp, #260]	; 0x104
 800558e:	2300      	movs	r3, #0
 8005590:	e7c9      	b.n	8005526 <__ssvfiscanf_r+0x1da>
 8005592:	2302      	movs	r3, #2
 8005594:	e7c7      	b.n	8005526 <__ssvfiscanf_r+0x1da>
 8005596:	9841      	ldr	r0, [sp, #260]	; 0x104
 8005598:	06c3      	lsls	r3, r0, #27
 800559a:	f53f aefe 	bmi.w	800539a <__ssvfiscanf_r+0x4e>
 800559e:	9b00      	ldr	r3, [sp, #0]
 80055a0:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80055a2:	1d19      	adds	r1, r3, #4
 80055a4:	9100      	str	r1, [sp, #0]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f010 0f01 	tst.w	r0, #1
 80055ac:	bf14      	ite	ne
 80055ae:	801a      	strhne	r2, [r3, #0]
 80055b0:	601a      	streq	r2, [r3, #0]
 80055b2:	e6f2      	b.n	800539a <__ssvfiscanf_r+0x4e>
 80055b4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80055b6:	4621      	mov	r1, r4
 80055b8:	4630      	mov	r0, r6
 80055ba:	4798      	blx	r3
 80055bc:	2800      	cmp	r0, #0
 80055be:	d0b6      	beq.n	800552e <__ssvfiscanf_r+0x1e2>
 80055c0:	e79c      	b.n	80054fc <__ssvfiscanf_r+0x1b0>
 80055c2:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80055c4:	3201      	adds	r2, #1
 80055c6:	9245      	str	r2, [sp, #276]	; 0x114
 80055c8:	6862      	ldr	r2, [r4, #4]
 80055ca:	3a01      	subs	r2, #1
 80055cc:	2a00      	cmp	r2, #0
 80055ce:	6062      	str	r2, [r4, #4]
 80055d0:	dd02      	ble.n	80055d8 <__ssvfiscanf_r+0x28c>
 80055d2:	3301      	adds	r3, #1
 80055d4:	6023      	str	r3, [r4, #0]
 80055d6:	e7ad      	b.n	8005534 <__ssvfiscanf_r+0x1e8>
 80055d8:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80055da:	4621      	mov	r1, r4
 80055dc:	4630      	mov	r0, r6
 80055de:	4798      	blx	r3
 80055e0:	2800      	cmp	r0, #0
 80055e2:	d0a7      	beq.n	8005534 <__ssvfiscanf_r+0x1e8>
 80055e4:	e78a      	b.n	80054fc <__ssvfiscanf_r+0x1b0>
 80055e6:	2b04      	cmp	r3, #4
 80055e8:	dc0e      	bgt.n	8005608 <__ssvfiscanf_r+0x2bc>
 80055ea:	466b      	mov	r3, sp
 80055ec:	4622      	mov	r2, r4
 80055ee:	a941      	add	r1, sp, #260	; 0x104
 80055f0:	4630      	mov	r0, r6
 80055f2:	f000 fb6b 	bl	8005ccc <_scanf_i>
 80055f6:	e7ab      	b.n	8005550 <__ssvfiscanf_r+0x204>
 80055f8:	08005299 	.word	0x08005299
 80055fc:	08005313 	.word	0x08005313
 8005600:	08006457 	.word	0x08006457
 8005604:	0800640e 	.word	0x0800640e
 8005608:	4b0b      	ldr	r3, [pc, #44]	; (8005638 <__ssvfiscanf_r+0x2ec>)
 800560a:	2b00      	cmp	r3, #0
 800560c:	f43f aec5 	beq.w	800539a <__ssvfiscanf_r+0x4e>
 8005610:	466b      	mov	r3, sp
 8005612:	4622      	mov	r2, r4
 8005614:	a941      	add	r1, sp, #260	; 0x104
 8005616:	4630      	mov	r0, r6
 8005618:	f3af 8000 	nop.w
 800561c:	e798      	b.n	8005550 <__ssvfiscanf_r+0x204>
 800561e:	89a3      	ldrh	r3, [r4, #12]
 8005620:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005624:	bf18      	it	ne
 8005626:	f04f 30ff 	movne.w	r0, #4294967295
 800562a:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800562e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005632:	9844      	ldr	r0, [sp, #272]	; 0x110
 8005634:	e7f9      	b.n	800562a <__ssvfiscanf_r+0x2de>
 8005636:	bf00      	nop
 8005638:	00000000 	.word	0x00000000

0800563c <__sfputc_r>:
 800563c:	6893      	ldr	r3, [r2, #8]
 800563e:	3b01      	subs	r3, #1
 8005640:	2b00      	cmp	r3, #0
 8005642:	b410      	push	{r4}
 8005644:	6093      	str	r3, [r2, #8]
 8005646:	da08      	bge.n	800565a <__sfputc_r+0x1e>
 8005648:	6994      	ldr	r4, [r2, #24]
 800564a:	42a3      	cmp	r3, r4
 800564c:	db01      	blt.n	8005652 <__sfputc_r+0x16>
 800564e:	290a      	cmp	r1, #10
 8005650:	d103      	bne.n	800565a <__sfputc_r+0x1e>
 8005652:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005656:	f7ff ba4f 	b.w	8004af8 <__swbuf_r>
 800565a:	6813      	ldr	r3, [r2, #0]
 800565c:	1c58      	adds	r0, r3, #1
 800565e:	6010      	str	r0, [r2, #0]
 8005660:	7019      	strb	r1, [r3, #0]
 8005662:	4608      	mov	r0, r1
 8005664:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005668:	4770      	bx	lr

0800566a <__sfputs_r>:
 800566a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800566c:	4606      	mov	r6, r0
 800566e:	460f      	mov	r7, r1
 8005670:	4614      	mov	r4, r2
 8005672:	18d5      	adds	r5, r2, r3
 8005674:	42ac      	cmp	r4, r5
 8005676:	d101      	bne.n	800567c <__sfputs_r+0x12>
 8005678:	2000      	movs	r0, #0
 800567a:	e007      	b.n	800568c <__sfputs_r+0x22>
 800567c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005680:	463a      	mov	r2, r7
 8005682:	4630      	mov	r0, r6
 8005684:	f7ff ffda 	bl	800563c <__sfputc_r>
 8005688:	1c43      	adds	r3, r0, #1
 800568a:	d1f3      	bne.n	8005674 <__sfputs_r+0xa>
 800568c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005690 <_vfiprintf_r>:
 8005690:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005694:	460d      	mov	r5, r1
 8005696:	b09d      	sub	sp, #116	; 0x74
 8005698:	4614      	mov	r4, r2
 800569a:	4698      	mov	r8, r3
 800569c:	4606      	mov	r6, r0
 800569e:	b118      	cbz	r0, 80056a8 <_vfiprintf_r+0x18>
 80056a0:	6983      	ldr	r3, [r0, #24]
 80056a2:	b90b      	cbnz	r3, 80056a8 <_vfiprintf_r+0x18>
 80056a4:	f7fe ff6c 	bl	8004580 <__sinit>
 80056a8:	4b89      	ldr	r3, [pc, #548]	; (80058d0 <_vfiprintf_r+0x240>)
 80056aa:	429d      	cmp	r5, r3
 80056ac:	d11b      	bne.n	80056e6 <_vfiprintf_r+0x56>
 80056ae:	6875      	ldr	r5, [r6, #4]
 80056b0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80056b2:	07d9      	lsls	r1, r3, #31
 80056b4:	d405      	bmi.n	80056c2 <_vfiprintf_r+0x32>
 80056b6:	89ab      	ldrh	r3, [r5, #12]
 80056b8:	059a      	lsls	r2, r3, #22
 80056ba:	d402      	bmi.n	80056c2 <_vfiprintf_r+0x32>
 80056bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80056be:	f7ff f822 	bl	8004706 <__retarget_lock_acquire_recursive>
 80056c2:	89ab      	ldrh	r3, [r5, #12]
 80056c4:	071b      	lsls	r3, r3, #28
 80056c6:	d501      	bpl.n	80056cc <_vfiprintf_r+0x3c>
 80056c8:	692b      	ldr	r3, [r5, #16]
 80056ca:	b9eb      	cbnz	r3, 8005708 <_vfiprintf_r+0x78>
 80056cc:	4629      	mov	r1, r5
 80056ce:	4630      	mov	r0, r6
 80056d0:	f7ff fa76 	bl	8004bc0 <__swsetup_r>
 80056d4:	b1c0      	cbz	r0, 8005708 <_vfiprintf_r+0x78>
 80056d6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80056d8:	07dc      	lsls	r4, r3, #31
 80056da:	d50e      	bpl.n	80056fa <_vfiprintf_r+0x6a>
 80056dc:	f04f 30ff 	mov.w	r0, #4294967295
 80056e0:	b01d      	add	sp, #116	; 0x74
 80056e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80056e6:	4b7b      	ldr	r3, [pc, #492]	; (80058d4 <_vfiprintf_r+0x244>)
 80056e8:	429d      	cmp	r5, r3
 80056ea:	d101      	bne.n	80056f0 <_vfiprintf_r+0x60>
 80056ec:	68b5      	ldr	r5, [r6, #8]
 80056ee:	e7df      	b.n	80056b0 <_vfiprintf_r+0x20>
 80056f0:	4b79      	ldr	r3, [pc, #484]	; (80058d8 <_vfiprintf_r+0x248>)
 80056f2:	429d      	cmp	r5, r3
 80056f4:	bf08      	it	eq
 80056f6:	68f5      	ldreq	r5, [r6, #12]
 80056f8:	e7da      	b.n	80056b0 <_vfiprintf_r+0x20>
 80056fa:	89ab      	ldrh	r3, [r5, #12]
 80056fc:	0598      	lsls	r0, r3, #22
 80056fe:	d4ed      	bmi.n	80056dc <_vfiprintf_r+0x4c>
 8005700:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005702:	f7ff f801 	bl	8004708 <__retarget_lock_release_recursive>
 8005706:	e7e9      	b.n	80056dc <_vfiprintf_r+0x4c>
 8005708:	2300      	movs	r3, #0
 800570a:	9309      	str	r3, [sp, #36]	; 0x24
 800570c:	2320      	movs	r3, #32
 800570e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005712:	f8cd 800c 	str.w	r8, [sp, #12]
 8005716:	2330      	movs	r3, #48	; 0x30
 8005718:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80058dc <_vfiprintf_r+0x24c>
 800571c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005720:	f04f 0901 	mov.w	r9, #1
 8005724:	4623      	mov	r3, r4
 8005726:	469a      	mov	sl, r3
 8005728:	f813 2b01 	ldrb.w	r2, [r3], #1
 800572c:	b10a      	cbz	r2, 8005732 <_vfiprintf_r+0xa2>
 800572e:	2a25      	cmp	r2, #37	; 0x25
 8005730:	d1f9      	bne.n	8005726 <_vfiprintf_r+0x96>
 8005732:	ebba 0b04 	subs.w	fp, sl, r4
 8005736:	d00b      	beq.n	8005750 <_vfiprintf_r+0xc0>
 8005738:	465b      	mov	r3, fp
 800573a:	4622      	mov	r2, r4
 800573c:	4629      	mov	r1, r5
 800573e:	4630      	mov	r0, r6
 8005740:	f7ff ff93 	bl	800566a <__sfputs_r>
 8005744:	3001      	adds	r0, #1
 8005746:	f000 80aa 	beq.w	800589e <_vfiprintf_r+0x20e>
 800574a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800574c:	445a      	add	r2, fp
 800574e:	9209      	str	r2, [sp, #36]	; 0x24
 8005750:	f89a 3000 	ldrb.w	r3, [sl]
 8005754:	2b00      	cmp	r3, #0
 8005756:	f000 80a2 	beq.w	800589e <_vfiprintf_r+0x20e>
 800575a:	2300      	movs	r3, #0
 800575c:	f04f 32ff 	mov.w	r2, #4294967295
 8005760:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005764:	f10a 0a01 	add.w	sl, sl, #1
 8005768:	9304      	str	r3, [sp, #16]
 800576a:	9307      	str	r3, [sp, #28]
 800576c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005770:	931a      	str	r3, [sp, #104]	; 0x68
 8005772:	4654      	mov	r4, sl
 8005774:	2205      	movs	r2, #5
 8005776:	f814 1b01 	ldrb.w	r1, [r4], #1
 800577a:	4858      	ldr	r0, [pc, #352]	; (80058dc <_vfiprintf_r+0x24c>)
 800577c:	f7fa fd50 	bl	8000220 <memchr>
 8005780:	9a04      	ldr	r2, [sp, #16]
 8005782:	b9d8      	cbnz	r0, 80057bc <_vfiprintf_r+0x12c>
 8005784:	06d1      	lsls	r1, r2, #27
 8005786:	bf44      	itt	mi
 8005788:	2320      	movmi	r3, #32
 800578a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800578e:	0713      	lsls	r3, r2, #28
 8005790:	bf44      	itt	mi
 8005792:	232b      	movmi	r3, #43	; 0x2b
 8005794:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005798:	f89a 3000 	ldrb.w	r3, [sl]
 800579c:	2b2a      	cmp	r3, #42	; 0x2a
 800579e:	d015      	beq.n	80057cc <_vfiprintf_r+0x13c>
 80057a0:	9a07      	ldr	r2, [sp, #28]
 80057a2:	4654      	mov	r4, sl
 80057a4:	2000      	movs	r0, #0
 80057a6:	f04f 0c0a 	mov.w	ip, #10
 80057aa:	4621      	mov	r1, r4
 80057ac:	f811 3b01 	ldrb.w	r3, [r1], #1
 80057b0:	3b30      	subs	r3, #48	; 0x30
 80057b2:	2b09      	cmp	r3, #9
 80057b4:	d94e      	bls.n	8005854 <_vfiprintf_r+0x1c4>
 80057b6:	b1b0      	cbz	r0, 80057e6 <_vfiprintf_r+0x156>
 80057b8:	9207      	str	r2, [sp, #28]
 80057ba:	e014      	b.n	80057e6 <_vfiprintf_r+0x156>
 80057bc:	eba0 0308 	sub.w	r3, r0, r8
 80057c0:	fa09 f303 	lsl.w	r3, r9, r3
 80057c4:	4313      	orrs	r3, r2
 80057c6:	9304      	str	r3, [sp, #16]
 80057c8:	46a2      	mov	sl, r4
 80057ca:	e7d2      	b.n	8005772 <_vfiprintf_r+0xe2>
 80057cc:	9b03      	ldr	r3, [sp, #12]
 80057ce:	1d19      	adds	r1, r3, #4
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	9103      	str	r1, [sp, #12]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	bfbb      	ittet	lt
 80057d8:	425b      	neglt	r3, r3
 80057da:	f042 0202 	orrlt.w	r2, r2, #2
 80057de:	9307      	strge	r3, [sp, #28]
 80057e0:	9307      	strlt	r3, [sp, #28]
 80057e2:	bfb8      	it	lt
 80057e4:	9204      	strlt	r2, [sp, #16]
 80057e6:	7823      	ldrb	r3, [r4, #0]
 80057e8:	2b2e      	cmp	r3, #46	; 0x2e
 80057ea:	d10c      	bne.n	8005806 <_vfiprintf_r+0x176>
 80057ec:	7863      	ldrb	r3, [r4, #1]
 80057ee:	2b2a      	cmp	r3, #42	; 0x2a
 80057f0:	d135      	bne.n	800585e <_vfiprintf_r+0x1ce>
 80057f2:	9b03      	ldr	r3, [sp, #12]
 80057f4:	1d1a      	adds	r2, r3, #4
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	9203      	str	r2, [sp, #12]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	bfb8      	it	lt
 80057fe:	f04f 33ff 	movlt.w	r3, #4294967295
 8005802:	3402      	adds	r4, #2
 8005804:	9305      	str	r3, [sp, #20]
 8005806:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80058ec <_vfiprintf_r+0x25c>
 800580a:	7821      	ldrb	r1, [r4, #0]
 800580c:	2203      	movs	r2, #3
 800580e:	4650      	mov	r0, sl
 8005810:	f7fa fd06 	bl	8000220 <memchr>
 8005814:	b140      	cbz	r0, 8005828 <_vfiprintf_r+0x198>
 8005816:	2340      	movs	r3, #64	; 0x40
 8005818:	eba0 000a 	sub.w	r0, r0, sl
 800581c:	fa03 f000 	lsl.w	r0, r3, r0
 8005820:	9b04      	ldr	r3, [sp, #16]
 8005822:	4303      	orrs	r3, r0
 8005824:	3401      	adds	r4, #1
 8005826:	9304      	str	r3, [sp, #16]
 8005828:	f814 1b01 	ldrb.w	r1, [r4], #1
 800582c:	482c      	ldr	r0, [pc, #176]	; (80058e0 <_vfiprintf_r+0x250>)
 800582e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005832:	2206      	movs	r2, #6
 8005834:	f7fa fcf4 	bl	8000220 <memchr>
 8005838:	2800      	cmp	r0, #0
 800583a:	d03f      	beq.n	80058bc <_vfiprintf_r+0x22c>
 800583c:	4b29      	ldr	r3, [pc, #164]	; (80058e4 <_vfiprintf_r+0x254>)
 800583e:	bb1b      	cbnz	r3, 8005888 <_vfiprintf_r+0x1f8>
 8005840:	9b03      	ldr	r3, [sp, #12]
 8005842:	3307      	adds	r3, #7
 8005844:	f023 0307 	bic.w	r3, r3, #7
 8005848:	3308      	adds	r3, #8
 800584a:	9303      	str	r3, [sp, #12]
 800584c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800584e:	443b      	add	r3, r7
 8005850:	9309      	str	r3, [sp, #36]	; 0x24
 8005852:	e767      	b.n	8005724 <_vfiprintf_r+0x94>
 8005854:	fb0c 3202 	mla	r2, ip, r2, r3
 8005858:	460c      	mov	r4, r1
 800585a:	2001      	movs	r0, #1
 800585c:	e7a5      	b.n	80057aa <_vfiprintf_r+0x11a>
 800585e:	2300      	movs	r3, #0
 8005860:	3401      	adds	r4, #1
 8005862:	9305      	str	r3, [sp, #20]
 8005864:	4619      	mov	r1, r3
 8005866:	f04f 0c0a 	mov.w	ip, #10
 800586a:	4620      	mov	r0, r4
 800586c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005870:	3a30      	subs	r2, #48	; 0x30
 8005872:	2a09      	cmp	r2, #9
 8005874:	d903      	bls.n	800587e <_vfiprintf_r+0x1ee>
 8005876:	2b00      	cmp	r3, #0
 8005878:	d0c5      	beq.n	8005806 <_vfiprintf_r+0x176>
 800587a:	9105      	str	r1, [sp, #20]
 800587c:	e7c3      	b.n	8005806 <_vfiprintf_r+0x176>
 800587e:	fb0c 2101 	mla	r1, ip, r1, r2
 8005882:	4604      	mov	r4, r0
 8005884:	2301      	movs	r3, #1
 8005886:	e7f0      	b.n	800586a <_vfiprintf_r+0x1da>
 8005888:	ab03      	add	r3, sp, #12
 800588a:	9300      	str	r3, [sp, #0]
 800588c:	462a      	mov	r2, r5
 800588e:	4b16      	ldr	r3, [pc, #88]	; (80058e8 <_vfiprintf_r+0x258>)
 8005890:	a904      	add	r1, sp, #16
 8005892:	4630      	mov	r0, r6
 8005894:	f3af 8000 	nop.w
 8005898:	4607      	mov	r7, r0
 800589a:	1c78      	adds	r0, r7, #1
 800589c:	d1d6      	bne.n	800584c <_vfiprintf_r+0x1bc>
 800589e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80058a0:	07d9      	lsls	r1, r3, #31
 80058a2:	d405      	bmi.n	80058b0 <_vfiprintf_r+0x220>
 80058a4:	89ab      	ldrh	r3, [r5, #12]
 80058a6:	059a      	lsls	r2, r3, #22
 80058a8:	d402      	bmi.n	80058b0 <_vfiprintf_r+0x220>
 80058aa:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80058ac:	f7fe ff2c 	bl	8004708 <__retarget_lock_release_recursive>
 80058b0:	89ab      	ldrh	r3, [r5, #12]
 80058b2:	065b      	lsls	r3, r3, #25
 80058b4:	f53f af12 	bmi.w	80056dc <_vfiprintf_r+0x4c>
 80058b8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80058ba:	e711      	b.n	80056e0 <_vfiprintf_r+0x50>
 80058bc:	ab03      	add	r3, sp, #12
 80058be:	9300      	str	r3, [sp, #0]
 80058c0:	462a      	mov	r2, r5
 80058c2:	4b09      	ldr	r3, [pc, #36]	; (80058e8 <_vfiprintf_r+0x258>)
 80058c4:	a904      	add	r1, sp, #16
 80058c6:	4630      	mov	r0, r6
 80058c8:	f000 f880 	bl	80059cc <_printf_i>
 80058cc:	e7e4      	b.n	8005898 <_vfiprintf_r+0x208>
 80058ce:	bf00      	nop
 80058d0:	080063c4 	.word	0x080063c4
 80058d4:	080063e4 	.word	0x080063e4
 80058d8:	080063a4 	.word	0x080063a4
 80058dc:	08006408 	.word	0x08006408
 80058e0:	08006412 	.word	0x08006412
 80058e4:	00000000 	.word	0x00000000
 80058e8:	0800566b 	.word	0x0800566b
 80058ec:	0800640e 	.word	0x0800640e

080058f0 <_printf_common>:
 80058f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80058f4:	4616      	mov	r6, r2
 80058f6:	4699      	mov	r9, r3
 80058f8:	688a      	ldr	r2, [r1, #8]
 80058fa:	690b      	ldr	r3, [r1, #16]
 80058fc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005900:	4293      	cmp	r3, r2
 8005902:	bfb8      	it	lt
 8005904:	4613      	movlt	r3, r2
 8005906:	6033      	str	r3, [r6, #0]
 8005908:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800590c:	4607      	mov	r7, r0
 800590e:	460c      	mov	r4, r1
 8005910:	b10a      	cbz	r2, 8005916 <_printf_common+0x26>
 8005912:	3301      	adds	r3, #1
 8005914:	6033      	str	r3, [r6, #0]
 8005916:	6823      	ldr	r3, [r4, #0]
 8005918:	0699      	lsls	r1, r3, #26
 800591a:	bf42      	ittt	mi
 800591c:	6833      	ldrmi	r3, [r6, #0]
 800591e:	3302      	addmi	r3, #2
 8005920:	6033      	strmi	r3, [r6, #0]
 8005922:	6825      	ldr	r5, [r4, #0]
 8005924:	f015 0506 	ands.w	r5, r5, #6
 8005928:	d106      	bne.n	8005938 <_printf_common+0x48>
 800592a:	f104 0a19 	add.w	sl, r4, #25
 800592e:	68e3      	ldr	r3, [r4, #12]
 8005930:	6832      	ldr	r2, [r6, #0]
 8005932:	1a9b      	subs	r3, r3, r2
 8005934:	42ab      	cmp	r3, r5
 8005936:	dc26      	bgt.n	8005986 <_printf_common+0x96>
 8005938:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800593c:	1e13      	subs	r3, r2, #0
 800593e:	6822      	ldr	r2, [r4, #0]
 8005940:	bf18      	it	ne
 8005942:	2301      	movne	r3, #1
 8005944:	0692      	lsls	r2, r2, #26
 8005946:	d42b      	bmi.n	80059a0 <_printf_common+0xb0>
 8005948:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800594c:	4649      	mov	r1, r9
 800594e:	4638      	mov	r0, r7
 8005950:	47c0      	blx	r8
 8005952:	3001      	adds	r0, #1
 8005954:	d01e      	beq.n	8005994 <_printf_common+0xa4>
 8005956:	6823      	ldr	r3, [r4, #0]
 8005958:	68e5      	ldr	r5, [r4, #12]
 800595a:	6832      	ldr	r2, [r6, #0]
 800595c:	f003 0306 	and.w	r3, r3, #6
 8005960:	2b04      	cmp	r3, #4
 8005962:	bf08      	it	eq
 8005964:	1aad      	subeq	r5, r5, r2
 8005966:	68a3      	ldr	r3, [r4, #8]
 8005968:	6922      	ldr	r2, [r4, #16]
 800596a:	bf0c      	ite	eq
 800596c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005970:	2500      	movne	r5, #0
 8005972:	4293      	cmp	r3, r2
 8005974:	bfc4      	itt	gt
 8005976:	1a9b      	subgt	r3, r3, r2
 8005978:	18ed      	addgt	r5, r5, r3
 800597a:	2600      	movs	r6, #0
 800597c:	341a      	adds	r4, #26
 800597e:	42b5      	cmp	r5, r6
 8005980:	d11a      	bne.n	80059b8 <_printf_common+0xc8>
 8005982:	2000      	movs	r0, #0
 8005984:	e008      	b.n	8005998 <_printf_common+0xa8>
 8005986:	2301      	movs	r3, #1
 8005988:	4652      	mov	r2, sl
 800598a:	4649      	mov	r1, r9
 800598c:	4638      	mov	r0, r7
 800598e:	47c0      	blx	r8
 8005990:	3001      	adds	r0, #1
 8005992:	d103      	bne.n	800599c <_printf_common+0xac>
 8005994:	f04f 30ff 	mov.w	r0, #4294967295
 8005998:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800599c:	3501      	adds	r5, #1
 800599e:	e7c6      	b.n	800592e <_printf_common+0x3e>
 80059a0:	18e1      	adds	r1, r4, r3
 80059a2:	1c5a      	adds	r2, r3, #1
 80059a4:	2030      	movs	r0, #48	; 0x30
 80059a6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80059aa:	4422      	add	r2, r4
 80059ac:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80059b0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80059b4:	3302      	adds	r3, #2
 80059b6:	e7c7      	b.n	8005948 <_printf_common+0x58>
 80059b8:	2301      	movs	r3, #1
 80059ba:	4622      	mov	r2, r4
 80059bc:	4649      	mov	r1, r9
 80059be:	4638      	mov	r0, r7
 80059c0:	47c0      	blx	r8
 80059c2:	3001      	adds	r0, #1
 80059c4:	d0e6      	beq.n	8005994 <_printf_common+0xa4>
 80059c6:	3601      	adds	r6, #1
 80059c8:	e7d9      	b.n	800597e <_printf_common+0x8e>
	...

080059cc <_printf_i>:
 80059cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80059d0:	7e0f      	ldrb	r7, [r1, #24]
 80059d2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80059d4:	2f78      	cmp	r7, #120	; 0x78
 80059d6:	4691      	mov	r9, r2
 80059d8:	4680      	mov	r8, r0
 80059da:	460c      	mov	r4, r1
 80059dc:	469a      	mov	sl, r3
 80059de:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80059e2:	d807      	bhi.n	80059f4 <_printf_i+0x28>
 80059e4:	2f62      	cmp	r7, #98	; 0x62
 80059e6:	d80a      	bhi.n	80059fe <_printf_i+0x32>
 80059e8:	2f00      	cmp	r7, #0
 80059ea:	f000 80d8 	beq.w	8005b9e <_printf_i+0x1d2>
 80059ee:	2f58      	cmp	r7, #88	; 0x58
 80059f0:	f000 80a3 	beq.w	8005b3a <_printf_i+0x16e>
 80059f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80059f8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80059fc:	e03a      	b.n	8005a74 <_printf_i+0xa8>
 80059fe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005a02:	2b15      	cmp	r3, #21
 8005a04:	d8f6      	bhi.n	80059f4 <_printf_i+0x28>
 8005a06:	a101      	add	r1, pc, #4	; (adr r1, 8005a0c <_printf_i+0x40>)
 8005a08:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005a0c:	08005a65 	.word	0x08005a65
 8005a10:	08005a79 	.word	0x08005a79
 8005a14:	080059f5 	.word	0x080059f5
 8005a18:	080059f5 	.word	0x080059f5
 8005a1c:	080059f5 	.word	0x080059f5
 8005a20:	080059f5 	.word	0x080059f5
 8005a24:	08005a79 	.word	0x08005a79
 8005a28:	080059f5 	.word	0x080059f5
 8005a2c:	080059f5 	.word	0x080059f5
 8005a30:	080059f5 	.word	0x080059f5
 8005a34:	080059f5 	.word	0x080059f5
 8005a38:	08005b85 	.word	0x08005b85
 8005a3c:	08005aa9 	.word	0x08005aa9
 8005a40:	08005b67 	.word	0x08005b67
 8005a44:	080059f5 	.word	0x080059f5
 8005a48:	080059f5 	.word	0x080059f5
 8005a4c:	08005ba7 	.word	0x08005ba7
 8005a50:	080059f5 	.word	0x080059f5
 8005a54:	08005aa9 	.word	0x08005aa9
 8005a58:	080059f5 	.word	0x080059f5
 8005a5c:	080059f5 	.word	0x080059f5
 8005a60:	08005b6f 	.word	0x08005b6f
 8005a64:	682b      	ldr	r3, [r5, #0]
 8005a66:	1d1a      	adds	r2, r3, #4
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	602a      	str	r2, [r5, #0]
 8005a6c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005a70:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005a74:	2301      	movs	r3, #1
 8005a76:	e0a3      	b.n	8005bc0 <_printf_i+0x1f4>
 8005a78:	6820      	ldr	r0, [r4, #0]
 8005a7a:	6829      	ldr	r1, [r5, #0]
 8005a7c:	0606      	lsls	r6, r0, #24
 8005a7e:	f101 0304 	add.w	r3, r1, #4
 8005a82:	d50a      	bpl.n	8005a9a <_printf_i+0xce>
 8005a84:	680e      	ldr	r6, [r1, #0]
 8005a86:	602b      	str	r3, [r5, #0]
 8005a88:	2e00      	cmp	r6, #0
 8005a8a:	da03      	bge.n	8005a94 <_printf_i+0xc8>
 8005a8c:	232d      	movs	r3, #45	; 0x2d
 8005a8e:	4276      	negs	r6, r6
 8005a90:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005a94:	485e      	ldr	r0, [pc, #376]	; (8005c10 <_printf_i+0x244>)
 8005a96:	230a      	movs	r3, #10
 8005a98:	e019      	b.n	8005ace <_printf_i+0x102>
 8005a9a:	680e      	ldr	r6, [r1, #0]
 8005a9c:	602b      	str	r3, [r5, #0]
 8005a9e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005aa2:	bf18      	it	ne
 8005aa4:	b236      	sxthne	r6, r6
 8005aa6:	e7ef      	b.n	8005a88 <_printf_i+0xbc>
 8005aa8:	682b      	ldr	r3, [r5, #0]
 8005aaa:	6820      	ldr	r0, [r4, #0]
 8005aac:	1d19      	adds	r1, r3, #4
 8005aae:	6029      	str	r1, [r5, #0]
 8005ab0:	0601      	lsls	r1, r0, #24
 8005ab2:	d501      	bpl.n	8005ab8 <_printf_i+0xec>
 8005ab4:	681e      	ldr	r6, [r3, #0]
 8005ab6:	e002      	b.n	8005abe <_printf_i+0xf2>
 8005ab8:	0646      	lsls	r6, r0, #25
 8005aba:	d5fb      	bpl.n	8005ab4 <_printf_i+0xe8>
 8005abc:	881e      	ldrh	r6, [r3, #0]
 8005abe:	4854      	ldr	r0, [pc, #336]	; (8005c10 <_printf_i+0x244>)
 8005ac0:	2f6f      	cmp	r7, #111	; 0x6f
 8005ac2:	bf0c      	ite	eq
 8005ac4:	2308      	moveq	r3, #8
 8005ac6:	230a      	movne	r3, #10
 8005ac8:	2100      	movs	r1, #0
 8005aca:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005ace:	6865      	ldr	r5, [r4, #4]
 8005ad0:	60a5      	str	r5, [r4, #8]
 8005ad2:	2d00      	cmp	r5, #0
 8005ad4:	bfa2      	ittt	ge
 8005ad6:	6821      	ldrge	r1, [r4, #0]
 8005ad8:	f021 0104 	bicge.w	r1, r1, #4
 8005adc:	6021      	strge	r1, [r4, #0]
 8005ade:	b90e      	cbnz	r6, 8005ae4 <_printf_i+0x118>
 8005ae0:	2d00      	cmp	r5, #0
 8005ae2:	d04d      	beq.n	8005b80 <_printf_i+0x1b4>
 8005ae4:	4615      	mov	r5, r2
 8005ae6:	fbb6 f1f3 	udiv	r1, r6, r3
 8005aea:	fb03 6711 	mls	r7, r3, r1, r6
 8005aee:	5dc7      	ldrb	r7, [r0, r7]
 8005af0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005af4:	4637      	mov	r7, r6
 8005af6:	42bb      	cmp	r3, r7
 8005af8:	460e      	mov	r6, r1
 8005afa:	d9f4      	bls.n	8005ae6 <_printf_i+0x11a>
 8005afc:	2b08      	cmp	r3, #8
 8005afe:	d10b      	bne.n	8005b18 <_printf_i+0x14c>
 8005b00:	6823      	ldr	r3, [r4, #0]
 8005b02:	07de      	lsls	r6, r3, #31
 8005b04:	d508      	bpl.n	8005b18 <_printf_i+0x14c>
 8005b06:	6923      	ldr	r3, [r4, #16]
 8005b08:	6861      	ldr	r1, [r4, #4]
 8005b0a:	4299      	cmp	r1, r3
 8005b0c:	bfde      	ittt	le
 8005b0e:	2330      	movle	r3, #48	; 0x30
 8005b10:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005b14:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005b18:	1b52      	subs	r2, r2, r5
 8005b1a:	6122      	str	r2, [r4, #16]
 8005b1c:	f8cd a000 	str.w	sl, [sp]
 8005b20:	464b      	mov	r3, r9
 8005b22:	aa03      	add	r2, sp, #12
 8005b24:	4621      	mov	r1, r4
 8005b26:	4640      	mov	r0, r8
 8005b28:	f7ff fee2 	bl	80058f0 <_printf_common>
 8005b2c:	3001      	adds	r0, #1
 8005b2e:	d14c      	bne.n	8005bca <_printf_i+0x1fe>
 8005b30:	f04f 30ff 	mov.w	r0, #4294967295
 8005b34:	b004      	add	sp, #16
 8005b36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b3a:	4835      	ldr	r0, [pc, #212]	; (8005c10 <_printf_i+0x244>)
 8005b3c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005b40:	6829      	ldr	r1, [r5, #0]
 8005b42:	6823      	ldr	r3, [r4, #0]
 8005b44:	f851 6b04 	ldr.w	r6, [r1], #4
 8005b48:	6029      	str	r1, [r5, #0]
 8005b4a:	061d      	lsls	r5, r3, #24
 8005b4c:	d514      	bpl.n	8005b78 <_printf_i+0x1ac>
 8005b4e:	07df      	lsls	r7, r3, #31
 8005b50:	bf44      	itt	mi
 8005b52:	f043 0320 	orrmi.w	r3, r3, #32
 8005b56:	6023      	strmi	r3, [r4, #0]
 8005b58:	b91e      	cbnz	r6, 8005b62 <_printf_i+0x196>
 8005b5a:	6823      	ldr	r3, [r4, #0]
 8005b5c:	f023 0320 	bic.w	r3, r3, #32
 8005b60:	6023      	str	r3, [r4, #0]
 8005b62:	2310      	movs	r3, #16
 8005b64:	e7b0      	b.n	8005ac8 <_printf_i+0xfc>
 8005b66:	6823      	ldr	r3, [r4, #0]
 8005b68:	f043 0320 	orr.w	r3, r3, #32
 8005b6c:	6023      	str	r3, [r4, #0]
 8005b6e:	2378      	movs	r3, #120	; 0x78
 8005b70:	4828      	ldr	r0, [pc, #160]	; (8005c14 <_printf_i+0x248>)
 8005b72:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005b76:	e7e3      	b.n	8005b40 <_printf_i+0x174>
 8005b78:	0659      	lsls	r1, r3, #25
 8005b7a:	bf48      	it	mi
 8005b7c:	b2b6      	uxthmi	r6, r6
 8005b7e:	e7e6      	b.n	8005b4e <_printf_i+0x182>
 8005b80:	4615      	mov	r5, r2
 8005b82:	e7bb      	b.n	8005afc <_printf_i+0x130>
 8005b84:	682b      	ldr	r3, [r5, #0]
 8005b86:	6826      	ldr	r6, [r4, #0]
 8005b88:	6961      	ldr	r1, [r4, #20]
 8005b8a:	1d18      	adds	r0, r3, #4
 8005b8c:	6028      	str	r0, [r5, #0]
 8005b8e:	0635      	lsls	r5, r6, #24
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	d501      	bpl.n	8005b98 <_printf_i+0x1cc>
 8005b94:	6019      	str	r1, [r3, #0]
 8005b96:	e002      	b.n	8005b9e <_printf_i+0x1d2>
 8005b98:	0670      	lsls	r0, r6, #25
 8005b9a:	d5fb      	bpl.n	8005b94 <_printf_i+0x1c8>
 8005b9c:	8019      	strh	r1, [r3, #0]
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	6123      	str	r3, [r4, #16]
 8005ba2:	4615      	mov	r5, r2
 8005ba4:	e7ba      	b.n	8005b1c <_printf_i+0x150>
 8005ba6:	682b      	ldr	r3, [r5, #0]
 8005ba8:	1d1a      	adds	r2, r3, #4
 8005baa:	602a      	str	r2, [r5, #0]
 8005bac:	681d      	ldr	r5, [r3, #0]
 8005bae:	6862      	ldr	r2, [r4, #4]
 8005bb0:	2100      	movs	r1, #0
 8005bb2:	4628      	mov	r0, r5
 8005bb4:	f7fa fb34 	bl	8000220 <memchr>
 8005bb8:	b108      	cbz	r0, 8005bbe <_printf_i+0x1f2>
 8005bba:	1b40      	subs	r0, r0, r5
 8005bbc:	6060      	str	r0, [r4, #4]
 8005bbe:	6863      	ldr	r3, [r4, #4]
 8005bc0:	6123      	str	r3, [r4, #16]
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005bc8:	e7a8      	b.n	8005b1c <_printf_i+0x150>
 8005bca:	6923      	ldr	r3, [r4, #16]
 8005bcc:	462a      	mov	r2, r5
 8005bce:	4649      	mov	r1, r9
 8005bd0:	4640      	mov	r0, r8
 8005bd2:	47d0      	blx	sl
 8005bd4:	3001      	adds	r0, #1
 8005bd6:	d0ab      	beq.n	8005b30 <_printf_i+0x164>
 8005bd8:	6823      	ldr	r3, [r4, #0]
 8005bda:	079b      	lsls	r3, r3, #30
 8005bdc:	d413      	bmi.n	8005c06 <_printf_i+0x23a>
 8005bde:	68e0      	ldr	r0, [r4, #12]
 8005be0:	9b03      	ldr	r3, [sp, #12]
 8005be2:	4298      	cmp	r0, r3
 8005be4:	bfb8      	it	lt
 8005be6:	4618      	movlt	r0, r3
 8005be8:	e7a4      	b.n	8005b34 <_printf_i+0x168>
 8005bea:	2301      	movs	r3, #1
 8005bec:	4632      	mov	r2, r6
 8005bee:	4649      	mov	r1, r9
 8005bf0:	4640      	mov	r0, r8
 8005bf2:	47d0      	blx	sl
 8005bf4:	3001      	adds	r0, #1
 8005bf6:	d09b      	beq.n	8005b30 <_printf_i+0x164>
 8005bf8:	3501      	adds	r5, #1
 8005bfa:	68e3      	ldr	r3, [r4, #12]
 8005bfc:	9903      	ldr	r1, [sp, #12]
 8005bfe:	1a5b      	subs	r3, r3, r1
 8005c00:	42ab      	cmp	r3, r5
 8005c02:	dcf2      	bgt.n	8005bea <_printf_i+0x21e>
 8005c04:	e7eb      	b.n	8005bde <_printf_i+0x212>
 8005c06:	2500      	movs	r5, #0
 8005c08:	f104 0619 	add.w	r6, r4, #25
 8005c0c:	e7f5      	b.n	8005bfa <_printf_i+0x22e>
 8005c0e:	bf00      	nop
 8005c10:	08006419 	.word	0x08006419
 8005c14:	0800642a 	.word	0x0800642a

08005c18 <_scanf_chars>:
 8005c18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005c1c:	4615      	mov	r5, r2
 8005c1e:	688a      	ldr	r2, [r1, #8]
 8005c20:	4680      	mov	r8, r0
 8005c22:	460c      	mov	r4, r1
 8005c24:	b932      	cbnz	r2, 8005c34 <_scanf_chars+0x1c>
 8005c26:	698a      	ldr	r2, [r1, #24]
 8005c28:	2a00      	cmp	r2, #0
 8005c2a:	bf0c      	ite	eq
 8005c2c:	2201      	moveq	r2, #1
 8005c2e:	f04f 32ff 	movne.w	r2, #4294967295
 8005c32:	608a      	str	r2, [r1, #8]
 8005c34:	6822      	ldr	r2, [r4, #0]
 8005c36:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8005cc8 <_scanf_chars+0xb0>
 8005c3a:	06d1      	lsls	r1, r2, #27
 8005c3c:	bf5f      	itttt	pl
 8005c3e:	681a      	ldrpl	r2, [r3, #0]
 8005c40:	1d11      	addpl	r1, r2, #4
 8005c42:	6019      	strpl	r1, [r3, #0]
 8005c44:	6816      	ldrpl	r6, [r2, #0]
 8005c46:	2700      	movs	r7, #0
 8005c48:	69a0      	ldr	r0, [r4, #24]
 8005c4a:	b188      	cbz	r0, 8005c70 <_scanf_chars+0x58>
 8005c4c:	2801      	cmp	r0, #1
 8005c4e:	d107      	bne.n	8005c60 <_scanf_chars+0x48>
 8005c50:	682a      	ldr	r2, [r5, #0]
 8005c52:	7811      	ldrb	r1, [r2, #0]
 8005c54:	6962      	ldr	r2, [r4, #20]
 8005c56:	5c52      	ldrb	r2, [r2, r1]
 8005c58:	b952      	cbnz	r2, 8005c70 <_scanf_chars+0x58>
 8005c5a:	2f00      	cmp	r7, #0
 8005c5c:	d031      	beq.n	8005cc2 <_scanf_chars+0xaa>
 8005c5e:	e022      	b.n	8005ca6 <_scanf_chars+0x8e>
 8005c60:	2802      	cmp	r0, #2
 8005c62:	d120      	bne.n	8005ca6 <_scanf_chars+0x8e>
 8005c64:	682b      	ldr	r3, [r5, #0]
 8005c66:	781b      	ldrb	r3, [r3, #0]
 8005c68:	f813 3009 	ldrb.w	r3, [r3, r9]
 8005c6c:	071b      	lsls	r3, r3, #28
 8005c6e:	d41a      	bmi.n	8005ca6 <_scanf_chars+0x8e>
 8005c70:	6823      	ldr	r3, [r4, #0]
 8005c72:	06da      	lsls	r2, r3, #27
 8005c74:	bf5e      	ittt	pl
 8005c76:	682b      	ldrpl	r3, [r5, #0]
 8005c78:	781b      	ldrbpl	r3, [r3, #0]
 8005c7a:	f806 3b01 	strbpl.w	r3, [r6], #1
 8005c7e:	682a      	ldr	r2, [r5, #0]
 8005c80:	686b      	ldr	r3, [r5, #4]
 8005c82:	3201      	adds	r2, #1
 8005c84:	602a      	str	r2, [r5, #0]
 8005c86:	68a2      	ldr	r2, [r4, #8]
 8005c88:	3b01      	subs	r3, #1
 8005c8a:	3a01      	subs	r2, #1
 8005c8c:	606b      	str	r3, [r5, #4]
 8005c8e:	3701      	adds	r7, #1
 8005c90:	60a2      	str	r2, [r4, #8]
 8005c92:	b142      	cbz	r2, 8005ca6 <_scanf_chars+0x8e>
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	dcd7      	bgt.n	8005c48 <_scanf_chars+0x30>
 8005c98:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8005c9c:	4629      	mov	r1, r5
 8005c9e:	4640      	mov	r0, r8
 8005ca0:	4798      	blx	r3
 8005ca2:	2800      	cmp	r0, #0
 8005ca4:	d0d0      	beq.n	8005c48 <_scanf_chars+0x30>
 8005ca6:	6823      	ldr	r3, [r4, #0]
 8005ca8:	f013 0310 	ands.w	r3, r3, #16
 8005cac:	d105      	bne.n	8005cba <_scanf_chars+0xa2>
 8005cae:	68e2      	ldr	r2, [r4, #12]
 8005cb0:	3201      	adds	r2, #1
 8005cb2:	60e2      	str	r2, [r4, #12]
 8005cb4:	69a2      	ldr	r2, [r4, #24]
 8005cb6:	b102      	cbz	r2, 8005cba <_scanf_chars+0xa2>
 8005cb8:	7033      	strb	r3, [r6, #0]
 8005cba:	6923      	ldr	r3, [r4, #16]
 8005cbc:	443b      	add	r3, r7
 8005cbe:	6123      	str	r3, [r4, #16]
 8005cc0:	2000      	movs	r0, #0
 8005cc2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005cc6:	bf00      	nop
 8005cc8:	08006457 	.word	0x08006457

08005ccc <_scanf_i>:
 8005ccc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cd0:	4698      	mov	r8, r3
 8005cd2:	4b76      	ldr	r3, [pc, #472]	; (8005eac <_scanf_i+0x1e0>)
 8005cd4:	460c      	mov	r4, r1
 8005cd6:	4682      	mov	sl, r0
 8005cd8:	4616      	mov	r6, r2
 8005cda:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005cde:	b087      	sub	sp, #28
 8005ce0:	ab03      	add	r3, sp, #12
 8005ce2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8005ce6:	4b72      	ldr	r3, [pc, #456]	; (8005eb0 <_scanf_i+0x1e4>)
 8005ce8:	69a1      	ldr	r1, [r4, #24]
 8005cea:	4a72      	ldr	r2, [pc, #456]	; (8005eb4 <_scanf_i+0x1e8>)
 8005cec:	2903      	cmp	r1, #3
 8005cee:	bf18      	it	ne
 8005cf0:	461a      	movne	r2, r3
 8005cf2:	68a3      	ldr	r3, [r4, #8]
 8005cf4:	9201      	str	r2, [sp, #4]
 8005cf6:	1e5a      	subs	r2, r3, #1
 8005cf8:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8005cfc:	bf88      	it	hi
 8005cfe:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8005d02:	4627      	mov	r7, r4
 8005d04:	bf82      	ittt	hi
 8005d06:	eb03 0905 	addhi.w	r9, r3, r5
 8005d0a:	f240 135d 	movwhi	r3, #349	; 0x15d
 8005d0e:	60a3      	strhi	r3, [r4, #8]
 8005d10:	f857 3b1c 	ldr.w	r3, [r7], #28
 8005d14:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8005d18:	bf98      	it	ls
 8005d1a:	f04f 0900 	movls.w	r9, #0
 8005d1e:	6023      	str	r3, [r4, #0]
 8005d20:	463d      	mov	r5, r7
 8005d22:	f04f 0b00 	mov.w	fp, #0
 8005d26:	6831      	ldr	r1, [r6, #0]
 8005d28:	ab03      	add	r3, sp, #12
 8005d2a:	7809      	ldrb	r1, [r1, #0]
 8005d2c:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8005d30:	2202      	movs	r2, #2
 8005d32:	f7fa fa75 	bl	8000220 <memchr>
 8005d36:	b328      	cbz	r0, 8005d84 <_scanf_i+0xb8>
 8005d38:	f1bb 0f01 	cmp.w	fp, #1
 8005d3c:	d159      	bne.n	8005df2 <_scanf_i+0x126>
 8005d3e:	6862      	ldr	r2, [r4, #4]
 8005d40:	b92a      	cbnz	r2, 8005d4e <_scanf_i+0x82>
 8005d42:	6822      	ldr	r2, [r4, #0]
 8005d44:	2308      	movs	r3, #8
 8005d46:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d4a:	6063      	str	r3, [r4, #4]
 8005d4c:	6022      	str	r2, [r4, #0]
 8005d4e:	6822      	ldr	r2, [r4, #0]
 8005d50:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8005d54:	6022      	str	r2, [r4, #0]
 8005d56:	68a2      	ldr	r2, [r4, #8]
 8005d58:	1e51      	subs	r1, r2, #1
 8005d5a:	60a1      	str	r1, [r4, #8]
 8005d5c:	b192      	cbz	r2, 8005d84 <_scanf_i+0xb8>
 8005d5e:	6832      	ldr	r2, [r6, #0]
 8005d60:	1c51      	adds	r1, r2, #1
 8005d62:	6031      	str	r1, [r6, #0]
 8005d64:	7812      	ldrb	r2, [r2, #0]
 8005d66:	f805 2b01 	strb.w	r2, [r5], #1
 8005d6a:	6872      	ldr	r2, [r6, #4]
 8005d6c:	3a01      	subs	r2, #1
 8005d6e:	2a00      	cmp	r2, #0
 8005d70:	6072      	str	r2, [r6, #4]
 8005d72:	dc07      	bgt.n	8005d84 <_scanf_i+0xb8>
 8005d74:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8005d78:	4631      	mov	r1, r6
 8005d7a:	4650      	mov	r0, sl
 8005d7c:	4790      	blx	r2
 8005d7e:	2800      	cmp	r0, #0
 8005d80:	f040 8085 	bne.w	8005e8e <_scanf_i+0x1c2>
 8005d84:	f10b 0b01 	add.w	fp, fp, #1
 8005d88:	f1bb 0f03 	cmp.w	fp, #3
 8005d8c:	d1cb      	bne.n	8005d26 <_scanf_i+0x5a>
 8005d8e:	6863      	ldr	r3, [r4, #4]
 8005d90:	b90b      	cbnz	r3, 8005d96 <_scanf_i+0xca>
 8005d92:	230a      	movs	r3, #10
 8005d94:	6063      	str	r3, [r4, #4]
 8005d96:	6863      	ldr	r3, [r4, #4]
 8005d98:	4947      	ldr	r1, [pc, #284]	; (8005eb8 <_scanf_i+0x1ec>)
 8005d9a:	6960      	ldr	r0, [r4, #20]
 8005d9c:	1ac9      	subs	r1, r1, r3
 8005d9e:	f000 f89f 	bl	8005ee0 <__sccl>
 8005da2:	f04f 0b00 	mov.w	fp, #0
 8005da6:	68a3      	ldr	r3, [r4, #8]
 8005da8:	6822      	ldr	r2, [r4, #0]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d03d      	beq.n	8005e2a <_scanf_i+0x15e>
 8005dae:	6831      	ldr	r1, [r6, #0]
 8005db0:	6960      	ldr	r0, [r4, #20]
 8005db2:	f891 c000 	ldrb.w	ip, [r1]
 8005db6:	f810 000c 	ldrb.w	r0, [r0, ip]
 8005dba:	2800      	cmp	r0, #0
 8005dbc:	d035      	beq.n	8005e2a <_scanf_i+0x15e>
 8005dbe:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8005dc2:	d124      	bne.n	8005e0e <_scanf_i+0x142>
 8005dc4:	0510      	lsls	r0, r2, #20
 8005dc6:	d522      	bpl.n	8005e0e <_scanf_i+0x142>
 8005dc8:	f10b 0b01 	add.w	fp, fp, #1
 8005dcc:	f1b9 0f00 	cmp.w	r9, #0
 8005dd0:	d003      	beq.n	8005dda <_scanf_i+0x10e>
 8005dd2:	3301      	adds	r3, #1
 8005dd4:	f109 39ff 	add.w	r9, r9, #4294967295
 8005dd8:	60a3      	str	r3, [r4, #8]
 8005dda:	6873      	ldr	r3, [r6, #4]
 8005ddc:	3b01      	subs	r3, #1
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	6073      	str	r3, [r6, #4]
 8005de2:	dd1b      	ble.n	8005e1c <_scanf_i+0x150>
 8005de4:	6833      	ldr	r3, [r6, #0]
 8005de6:	3301      	adds	r3, #1
 8005de8:	6033      	str	r3, [r6, #0]
 8005dea:	68a3      	ldr	r3, [r4, #8]
 8005dec:	3b01      	subs	r3, #1
 8005dee:	60a3      	str	r3, [r4, #8]
 8005df0:	e7d9      	b.n	8005da6 <_scanf_i+0xda>
 8005df2:	f1bb 0f02 	cmp.w	fp, #2
 8005df6:	d1ae      	bne.n	8005d56 <_scanf_i+0x8a>
 8005df8:	6822      	ldr	r2, [r4, #0]
 8005dfa:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8005dfe:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8005e02:	d1bf      	bne.n	8005d84 <_scanf_i+0xb8>
 8005e04:	2310      	movs	r3, #16
 8005e06:	6063      	str	r3, [r4, #4]
 8005e08:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005e0c:	e7a2      	b.n	8005d54 <_scanf_i+0x88>
 8005e0e:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8005e12:	6022      	str	r2, [r4, #0]
 8005e14:	780b      	ldrb	r3, [r1, #0]
 8005e16:	f805 3b01 	strb.w	r3, [r5], #1
 8005e1a:	e7de      	b.n	8005dda <_scanf_i+0x10e>
 8005e1c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8005e20:	4631      	mov	r1, r6
 8005e22:	4650      	mov	r0, sl
 8005e24:	4798      	blx	r3
 8005e26:	2800      	cmp	r0, #0
 8005e28:	d0df      	beq.n	8005dea <_scanf_i+0x11e>
 8005e2a:	6823      	ldr	r3, [r4, #0]
 8005e2c:	05db      	lsls	r3, r3, #23
 8005e2e:	d50d      	bpl.n	8005e4c <_scanf_i+0x180>
 8005e30:	42bd      	cmp	r5, r7
 8005e32:	d909      	bls.n	8005e48 <_scanf_i+0x17c>
 8005e34:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8005e38:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005e3c:	4632      	mov	r2, r6
 8005e3e:	4650      	mov	r0, sl
 8005e40:	4798      	blx	r3
 8005e42:	f105 39ff 	add.w	r9, r5, #4294967295
 8005e46:	464d      	mov	r5, r9
 8005e48:	42bd      	cmp	r5, r7
 8005e4a:	d02d      	beq.n	8005ea8 <_scanf_i+0x1dc>
 8005e4c:	6822      	ldr	r2, [r4, #0]
 8005e4e:	f012 0210 	ands.w	r2, r2, #16
 8005e52:	d113      	bne.n	8005e7c <_scanf_i+0x1b0>
 8005e54:	702a      	strb	r2, [r5, #0]
 8005e56:	6863      	ldr	r3, [r4, #4]
 8005e58:	9e01      	ldr	r6, [sp, #4]
 8005e5a:	4639      	mov	r1, r7
 8005e5c:	4650      	mov	r0, sl
 8005e5e:	47b0      	blx	r6
 8005e60:	6821      	ldr	r1, [r4, #0]
 8005e62:	f8d8 3000 	ldr.w	r3, [r8]
 8005e66:	f011 0f20 	tst.w	r1, #32
 8005e6a:	d013      	beq.n	8005e94 <_scanf_i+0x1c8>
 8005e6c:	1d1a      	adds	r2, r3, #4
 8005e6e:	f8c8 2000 	str.w	r2, [r8]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	6018      	str	r0, [r3, #0]
 8005e76:	68e3      	ldr	r3, [r4, #12]
 8005e78:	3301      	adds	r3, #1
 8005e7a:	60e3      	str	r3, [r4, #12]
 8005e7c:	1bed      	subs	r5, r5, r7
 8005e7e:	44ab      	add	fp, r5
 8005e80:	6925      	ldr	r5, [r4, #16]
 8005e82:	445d      	add	r5, fp
 8005e84:	6125      	str	r5, [r4, #16]
 8005e86:	2000      	movs	r0, #0
 8005e88:	b007      	add	sp, #28
 8005e8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e8e:	f04f 0b00 	mov.w	fp, #0
 8005e92:	e7ca      	b.n	8005e2a <_scanf_i+0x15e>
 8005e94:	1d1a      	adds	r2, r3, #4
 8005e96:	f8c8 2000 	str.w	r2, [r8]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f011 0f01 	tst.w	r1, #1
 8005ea0:	bf14      	ite	ne
 8005ea2:	8018      	strhne	r0, [r3, #0]
 8005ea4:	6018      	streq	r0, [r3, #0]
 8005ea6:	e7e6      	b.n	8005e76 <_scanf_i+0x1aa>
 8005ea8:	2001      	movs	r0, #1
 8005eaa:	e7ed      	b.n	8005e88 <_scanf_i+0x1bc>
 8005eac:	08006364 	.word	0x08006364
 8005eb0:	0800613d 	.word	0x0800613d
 8005eb4:	08006055 	.word	0x08006055
 8005eb8:	08006454 	.word	0x08006454

08005ebc <_read_r>:
 8005ebc:	b538      	push	{r3, r4, r5, lr}
 8005ebe:	4d07      	ldr	r5, [pc, #28]	; (8005edc <_read_r+0x20>)
 8005ec0:	4604      	mov	r4, r0
 8005ec2:	4608      	mov	r0, r1
 8005ec4:	4611      	mov	r1, r2
 8005ec6:	2200      	movs	r2, #0
 8005ec8:	602a      	str	r2, [r5, #0]
 8005eca:	461a      	mov	r2, r3
 8005ecc:	f7fe f895 	bl	8003ffa <_read>
 8005ed0:	1c43      	adds	r3, r0, #1
 8005ed2:	d102      	bne.n	8005eda <_read_r+0x1e>
 8005ed4:	682b      	ldr	r3, [r5, #0]
 8005ed6:	b103      	cbz	r3, 8005eda <_read_r+0x1e>
 8005ed8:	6023      	str	r3, [r4, #0]
 8005eda:	bd38      	pop	{r3, r4, r5, pc}
 8005edc:	20000d40 	.word	0x20000d40

08005ee0 <__sccl>:
 8005ee0:	b570      	push	{r4, r5, r6, lr}
 8005ee2:	780b      	ldrb	r3, [r1, #0]
 8005ee4:	4604      	mov	r4, r0
 8005ee6:	2b5e      	cmp	r3, #94	; 0x5e
 8005ee8:	bf0b      	itete	eq
 8005eea:	784b      	ldrbeq	r3, [r1, #1]
 8005eec:	1c48      	addne	r0, r1, #1
 8005eee:	1c88      	addeq	r0, r1, #2
 8005ef0:	2200      	movne	r2, #0
 8005ef2:	bf08      	it	eq
 8005ef4:	2201      	moveq	r2, #1
 8005ef6:	1e61      	subs	r1, r4, #1
 8005ef8:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8005efc:	f801 2f01 	strb.w	r2, [r1, #1]!
 8005f00:	42a9      	cmp	r1, r5
 8005f02:	d1fb      	bne.n	8005efc <__sccl+0x1c>
 8005f04:	b90b      	cbnz	r3, 8005f0a <__sccl+0x2a>
 8005f06:	3801      	subs	r0, #1
 8005f08:	bd70      	pop	{r4, r5, r6, pc}
 8005f0a:	f082 0201 	eor.w	r2, r2, #1
 8005f0e:	54e2      	strb	r2, [r4, r3]
 8005f10:	4605      	mov	r5, r0
 8005f12:	4628      	mov	r0, r5
 8005f14:	f810 1b01 	ldrb.w	r1, [r0], #1
 8005f18:	292d      	cmp	r1, #45	; 0x2d
 8005f1a:	d006      	beq.n	8005f2a <__sccl+0x4a>
 8005f1c:	295d      	cmp	r1, #93	; 0x5d
 8005f1e:	d0f3      	beq.n	8005f08 <__sccl+0x28>
 8005f20:	b909      	cbnz	r1, 8005f26 <__sccl+0x46>
 8005f22:	4628      	mov	r0, r5
 8005f24:	e7f0      	b.n	8005f08 <__sccl+0x28>
 8005f26:	460b      	mov	r3, r1
 8005f28:	e7f1      	b.n	8005f0e <__sccl+0x2e>
 8005f2a:	786e      	ldrb	r6, [r5, #1]
 8005f2c:	2e5d      	cmp	r6, #93	; 0x5d
 8005f2e:	d0fa      	beq.n	8005f26 <__sccl+0x46>
 8005f30:	42b3      	cmp	r3, r6
 8005f32:	dcf8      	bgt.n	8005f26 <__sccl+0x46>
 8005f34:	3502      	adds	r5, #2
 8005f36:	4619      	mov	r1, r3
 8005f38:	3101      	adds	r1, #1
 8005f3a:	428e      	cmp	r6, r1
 8005f3c:	5462      	strb	r2, [r4, r1]
 8005f3e:	dcfb      	bgt.n	8005f38 <__sccl+0x58>
 8005f40:	1af1      	subs	r1, r6, r3
 8005f42:	3901      	subs	r1, #1
 8005f44:	1c58      	adds	r0, r3, #1
 8005f46:	42b3      	cmp	r3, r6
 8005f48:	bfa8      	it	ge
 8005f4a:	2100      	movge	r1, #0
 8005f4c:	1843      	adds	r3, r0, r1
 8005f4e:	e7e0      	b.n	8005f12 <__sccl+0x32>

08005f50 <_strtol_l.constprop.0>:
 8005f50:	2b01      	cmp	r3, #1
 8005f52:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f56:	d001      	beq.n	8005f5c <_strtol_l.constprop.0+0xc>
 8005f58:	2b24      	cmp	r3, #36	; 0x24
 8005f5a:	d906      	bls.n	8005f6a <_strtol_l.constprop.0+0x1a>
 8005f5c:	f7fe fab2 	bl	80044c4 <__errno>
 8005f60:	2316      	movs	r3, #22
 8005f62:	6003      	str	r3, [r0, #0]
 8005f64:	2000      	movs	r0, #0
 8005f66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f6a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8006050 <_strtol_l.constprop.0+0x100>
 8005f6e:	460d      	mov	r5, r1
 8005f70:	462e      	mov	r6, r5
 8005f72:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005f76:	f814 700c 	ldrb.w	r7, [r4, ip]
 8005f7a:	f017 0708 	ands.w	r7, r7, #8
 8005f7e:	d1f7      	bne.n	8005f70 <_strtol_l.constprop.0+0x20>
 8005f80:	2c2d      	cmp	r4, #45	; 0x2d
 8005f82:	d132      	bne.n	8005fea <_strtol_l.constprop.0+0x9a>
 8005f84:	782c      	ldrb	r4, [r5, #0]
 8005f86:	2701      	movs	r7, #1
 8005f88:	1cb5      	adds	r5, r6, #2
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d05b      	beq.n	8006046 <_strtol_l.constprop.0+0xf6>
 8005f8e:	2b10      	cmp	r3, #16
 8005f90:	d109      	bne.n	8005fa6 <_strtol_l.constprop.0+0x56>
 8005f92:	2c30      	cmp	r4, #48	; 0x30
 8005f94:	d107      	bne.n	8005fa6 <_strtol_l.constprop.0+0x56>
 8005f96:	782c      	ldrb	r4, [r5, #0]
 8005f98:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8005f9c:	2c58      	cmp	r4, #88	; 0x58
 8005f9e:	d14d      	bne.n	800603c <_strtol_l.constprop.0+0xec>
 8005fa0:	786c      	ldrb	r4, [r5, #1]
 8005fa2:	2310      	movs	r3, #16
 8005fa4:	3502      	adds	r5, #2
 8005fa6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8005faa:	f108 38ff 	add.w	r8, r8, #4294967295
 8005fae:	f04f 0c00 	mov.w	ip, #0
 8005fb2:	fbb8 f9f3 	udiv	r9, r8, r3
 8005fb6:	4666      	mov	r6, ip
 8005fb8:	fb03 8a19 	mls	sl, r3, r9, r8
 8005fbc:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8005fc0:	f1be 0f09 	cmp.w	lr, #9
 8005fc4:	d816      	bhi.n	8005ff4 <_strtol_l.constprop.0+0xa4>
 8005fc6:	4674      	mov	r4, lr
 8005fc8:	42a3      	cmp	r3, r4
 8005fca:	dd24      	ble.n	8006016 <_strtol_l.constprop.0+0xc6>
 8005fcc:	f1bc 0f00 	cmp.w	ip, #0
 8005fd0:	db1e      	blt.n	8006010 <_strtol_l.constprop.0+0xc0>
 8005fd2:	45b1      	cmp	r9, r6
 8005fd4:	d31c      	bcc.n	8006010 <_strtol_l.constprop.0+0xc0>
 8005fd6:	d101      	bne.n	8005fdc <_strtol_l.constprop.0+0x8c>
 8005fd8:	45a2      	cmp	sl, r4
 8005fda:	db19      	blt.n	8006010 <_strtol_l.constprop.0+0xc0>
 8005fdc:	fb06 4603 	mla	r6, r6, r3, r4
 8005fe0:	f04f 0c01 	mov.w	ip, #1
 8005fe4:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005fe8:	e7e8      	b.n	8005fbc <_strtol_l.constprop.0+0x6c>
 8005fea:	2c2b      	cmp	r4, #43	; 0x2b
 8005fec:	bf04      	itt	eq
 8005fee:	782c      	ldrbeq	r4, [r5, #0]
 8005ff0:	1cb5      	addeq	r5, r6, #2
 8005ff2:	e7ca      	b.n	8005f8a <_strtol_l.constprop.0+0x3a>
 8005ff4:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8005ff8:	f1be 0f19 	cmp.w	lr, #25
 8005ffc:	d801      	bhi.n	8006002 <_strtol_l.constprop.0+0xb2>
 8005ffe:	3c37      	subs	r4, #55	; 0x37
 8006000:	e7e2      	b.n	8005fc8 <_strtol_l.constprop.0+0x78>
 8006002:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8006006:	f1be 0f19 	cmp.w	lr, #25
 800600a:	d804      	bhi.n	8006016 <_strtol_l.constprop.0+0xc6>
 800600c:	3c57      	subs	r4, #87	; 0x57
 800600e:	e7db      	b.n	8005fc8 <_strtol_l.constprop.0+0x78>
 8006010:	f04f 3cff 	mov.w	ip, #4294967295
 8006014:	e7e6      	b.n	8005fe4 <_strtol_l.constprop.0+0x94>
 8006016:	f1bc 0f00 	cmp.w	ip, #0
 800601a:	da05      	bge.n	8006028 <_strtol_l.constprop.0+0xd8>
 800601c:	2322      	movs	r3, #34	; 0x22
 800601e:	6003      	str	r3, [r0, #0]
 8006020:	4646      	mov	r6, r8
 8006022:	b942      	cbnz	r2, 8006036 <_strtol_l.constprop.0+0xe6>
 8006024:	4630      	mov	r0, r6
 8006026:	e79e      	b.n	8005f66 <_strtol_l.constprop.0+0x16>
 8006028:	b107      	cbz	r7, 800602c <_strtol_l.constprop.0+0xdc>
 800602a:	4276      	negs	r6, r6
 800602c:	2a00      	cmp	r2, #0
 800602e:	d0f9      	beq.n	8006024 <_strtol_l.constprop.0+0xd4>
 8006030:	f1bc 0f00 	cmp.w	ip, #0
 8006034:	d000      	beq.n	8006038 <_strtol_l.constprop.0+0xe8>
 8006036:	1e69      	subs	r1, r5, #1
 8006038:	6011      	str	r1, [r2, #0]
 800603a:	e7f3      	b.n	8006024 <_strtol_l.constprop.0+0xd4>
 800603c:	2430      	movs	r4, #48	; 0x30
 800603e:	2b00      	cmp	r3, #0
 8006040:	d1b1      	bne.n	8005fa6 <_strtol_l.constprop.0+0x56>
 8006042:	2308      	movs	r3, #8
 8006044:	e7af      	b.n	8005fa6 <_strtol_l.constprop.0+0x56>
 8006046:	2c30      	cmp	r4, #48	; 0x30
 8006048:	d0a5      	beq.n	8005f96 <_strtol_l.constprop.0+0x46>
 800604a:	230a      	movs	r3, #10
 800604c:	e7ab      	b.n	8005fa6 <_strtol_l.constprop.0+0x56>
 800604e:	bf00      	nop
 8006050:	08006457 	.word	0x08006457

08006054 <_strtol_r>:
 8006054:	f7ff bf7c 	b.w	8005f50 <_strtol_l.constprop.0>

08006058 <_strtoul_l.constprop.0>:
 8006058:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800605c:	4f36      	ldr	r7, [pc, #216]	; (8006138 <_strtoul_l.constprop.0+0xe0>)
 800605e:	4686      	mov	lr, r0
 8006060:	460d      	mov	r5, r1
 8006062:	4628      	mov	r0, r5
 8006064:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006068:	5de6      	ldrb	r6, [r4, r7]
 800606a:	f016 0608 	ands.w	r6, r6, #8
 800606e:	d1f8      	bne.n	8006062 <_strtoul_l.constprop.0+0xa>
 8006070:	2c2d      	cmp	r4, #45	; 0x2d
 8006072:	d12f      	bne.n	80060d4 <_strtoul_l.constprop.0+0x7c>
 8006074:	782c      	ldrb	r4, [r5, #0]
 8006076:	2601      	movs	r6, #1
 8006078:	1c85      	adds	r5, r0, #2
 800607a:	2b00      	cmp	r3, #0
 800607c:	d057      	beq.n	800612e <_strtoul_l.constprop.0+0xd6>
 800607e:	2b10      	cmp	r3, #16
 8006080:	d109      	bne.n	8006096 <_strtoul_l.constprop.0+0x3e>
 8006082:	2c30      	cmp	r4, #48	; 0x30
 8006084:	d107      	bne.n	8006096 <_strtoul_l.constprop.0+0x3e>
 8006086:	7828      	ldrb	r0, [r5, #0]
 8006088:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800608c:	2858      	cmp	r0, #88	; 0x58
 800608e:	d149      	bne.n	8006124 <_strtoul_l.constprop.0+0xcc>
 8006090:	786c      	ldrb	r4, [r5, #1]
 8006092:	2310      	movs	r3, #16
 8006094:	3502      	adds	r5, #2
 8006096:	f04f 38ff 	mov.w	r8, #4294967295
 800609a:	2700      	movs	r7, #0
 800609c:	fbb8 f8f3 	udiv	r8, r8, r3
 80060a0:	fb03 f908 	mul.w	r9, r3, r8
 80060a4:	ea6f 0909 	mvn.w	r9, r9
 80060a8:	4638      	mov	r0, r7
 80060aa:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80060ae:	f1bc 0f09 	cmp.w	ip, #9
 80060b2:	d814      	bhi.n	80060de <_strtoul_l.constprop.0+0x86>
 80060b4:	4664      	mov	r4, ip
 80060b6:	42a3      	cmp	r3, r4
 80060b8:	dd22      	ble.n	8006100 <_strtoul_l.constprop.0+0xa8>
 80060ba:	2f00      	cmp	r7, #0
 80060bc:	db1d      	blt.n	80060fa <_strtoul_l.constprop.0+0xa2>
 80060be:	4580      	cmp	r8, r0
 80060c0:	d31b      	bcc.n	80060fa <_strtoul_l.constprop.0+0xa2>
 80060c2:	d101      	bne.n	80060c8 <_strtoul_l.constprop.0+0x70>
 80060c4:	45a1      	cmp	r9, r4
 80060c6:	db18      	blt.n	80060fa <_strtoul_l.constprop.0+0xa2>
 80060c8:	fb00 4003 	mla	r0, r0, r3, r4
 80060cc:	2701      	movs	r7, #1
 80060ce:	f815 4b01 	ldrb.w	r4, [r5], #1
 80060d2:	e7ea      	b.n	80060aa <_strtoul_l.constprop.0+0x52>
 80060d4:	2c2b      	cmp	r4, #43	; 0x2b
 80060d6:	bf04      	itt	eq
 80060d8:	782c      	ldrbeq	r4, [r5, #0]
 80060da:	1c85      	addeq	r5, r0, #2
 80060dc:	e7cd      	b.n	800607a <_strtoul_l.constprop.0+0x22>
 80060de:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80060e2:	f1bc 0f19 	cmp.w	ip, #25
 80060e6:	d801      	bhi.n	80060ec <_strtoul_l.constprop.0+0x94>
 80060e8:	3c37      	subs	r4, #55	; 0x37
 80060ea:	e7e4      	b.n	80060b6 <_strtoul_l.constprop.0+0x5e>
 80060ec:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80060f0:	f1bc 0f19 	cmp.w	ip, #25
 80060f4:	d804      	bhi.n	8006100 <_strtoul_l.constprop.0+0xa8>
 80060f6:	3c57      	subs	r4, #87	; 0x57
 80060f8:	e7dd      	b.n	80060b6 <_strtoul_l.constprop.0+0x5e>
 80060fa:	f04f 37ff 	mov.w	r7, #4294967295
 80060fe:	e7e6      	b.n	80060ce <_strtoul_l.constprop.0+0x76>
 8006100:	2f00      	cmp	r7, #0
 8006102:	da07      	bge.n	8006114 <_strtoul_l.constprop.0+0xbc>
 8006104:	2322      	movs	r3, #34	; 0x22
 8006106:	f8ce 3000 	str.w	r3, [lr]
 800610a:	f04f 30ff 	mov.w	r0, #4294967295
 800610e:	b932      	cbnz	r2, 800611e <_strtoul_l.constprop.0+0xc6>
 8006110:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006114:	b106      	cbz	r6, 8006118 <_strtoul_l.constprop.0+0xc0>
 8006116:	4240      	negs	r0, r0
 8006118:	2a00      	cmp	r2, #0
 800611a:	d0f9      	beq.n	8006110 <_strtoul_l.constprop.0+0xb8>
 800611c:	b107      	cbz	r7, 8006120 <_strtoul_l.constprop.0+0xc8>
 800611e:	1e69      	subs	r1, r5, #1
 8006120:	6011      	str	r1, [r2, #0]
 8006122:	e7f5      	b.n	8006110 <_strtoul_l.constprop.0+0xb8>
 8006124:	2430      	movs	r4, #48	; 0x30
 8006126:	2b00      	cmp	r3, #0
 8006128:	d1b5      	bne.n	8006096 <_strtoul_l.constprop.0+0x3e>
 800612a:	2308      	movs	r3, #8
 800612c:	e7b3      	b.n	8006096 <_strtoul_l.constprop.0+0x3e>
 800612e:	2c30      	cmp	r4, #48	; 0x30
 8006130:	d0a9      	beq.n	8006086 <_strtoul_l.constprop.0+0x2e>
 8006132:	230a      	movs	r3, #10
 8006134:	e7af      	b.n	8006096 <_strtoul_l.constprop.0+0x3e>
 8006136:	bf00      	nop
 8006138:	08006457 	.word	0x08006457

0800613c <_strtoul_r>:
 800613c:	f7ff bf8c 	b.w	8006058 <_strtoul_l.constprop.0>

08006140 <__submore>:
 8006140:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006144:	460c      	mov	r4, r1
 8006146:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8006148:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800614c:	4299      	cmp	r1, r3
 800614e:	d11d      	bne.n	800618c <__submore+0x4c>
 8006150:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006154:	f7fe fb10 	bl	8004778 <_malloc_r>
 8006158:	b918      	cbnz	r0, 8006162 <__submore+0x22>
 800615a:	f04f 30ff 	mov.w	r0, #4294967295
 800615e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006162:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006166:	63a3      	str	r3, [r4, #56]	; 0x38
 8006168:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800616c:	6360      	str	r0, [r4, #52]	; 0x34
 800616e:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8006172:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8006176:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800617a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800617e:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8006182:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8006186:	6020      	str	r0, [r4, #0]
 8006188:	2000      	movs	r0, #0
 800618a:	e7e8      	b.n	800615e <__submore+0x1e>
 800618c:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800618e:	0077      	lsls	r7, r6, #1
 8006190:	463a      	mov	r2, r7
 8006192:	f000 f84b 	bl	800622c <_realloc_r>
 8006196:	4605      	mov	r5, r0
 8006198:	2800      	cmp	r0, #0
 800619a:	d0de      	beq.n	800615a <__submore+0x1a>
 800619c:	eb00 0806 	add.w	r8, r0, r6
 80061a0:	4601      	mov	r1, r0
 80061a2:	4632      	mov	r2, r6
 80061a4:	4640      	mov	r0, r8
 80061a6:	f7fe fab0 	bl	800470a <memcpy>
 80061aa:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 80061ae:	f8c4 8000 	str.w	r8, [r4]
 80061b2:	e7e9      	b.n	8006188 <__submore+0x48>

080061b4 <_fstat_r>:
 80061b4:	b538      	push	{r3, r4, r5, lr}
 80061b6:	4d07      	ldr	r5, [pc, #28]	; (80061d4 <_fstat_r+0x20>)
 80061b8:	2300      	movs	r3, #0
 80061ba:	4604      	mov	r4, r0
 80061bc:	4608      	mov	r0, r1
 80061be:	4611      	mov	r1, r2
 80061c0:	602b      	str	r3, [r5, #0]
 80061c2:	f7fd fffc 	bl	80041be <_fstat>
 80061c6:	1c43      	adds	r3, r0, #1
 80061c8:	d102      	bne.n	80061d0 <_fstat_r+0x1c>
 80061ca:	682b      	ldr	r3, [r5, #0]
 80061cc:	b103      	cbz	r3, 80061d0 <_fstat_r+0x1c>
 80061ce:	6023      	str	r3, [r4, #0]
 80061d0:	bd38      	pop	{r3, r4, r5, pc}
 80061d2:	bf00      	nop
 80061d4:	20000d40 	.word	0x20000d40

080061d8 <_isatty_r>:
 80061d8:	b538      	push	{r3, r4, r5, lr}
 80061da:	4d06      	ldr	r5, [pc, #24]	; (80061f4 <_isatty_r+0x1c>)
 80061dc:	2300      	movs	r3, #0
 80061de:	4604      	mov	r4, r0
 80061e0:	4608      	mov	r0, r1
 80061e2:	602b      	str	r3, [r5, #0]
 80061e4:	f7fe f952 	bl	800448c <_isatty>
 80061e8:	1c43      	adds	r3, r0, #1
 80061ea:	d102      	bne.n	80061f2 <_isatty_r+0x1a>
 80061ec:	682b      	ldr	r3, [r5, #0]
 80061ee:	b103      	cbz	r3, 80061f2 <_isatty_r+0x1a>
 80061f0:	6023      	str	r3, [r4, #0]
 80061f2:	bd38      	pop	{r3, r4, r5, pc}
 80061f4:	20000d40 	.word	0x20000d40

080061f8 <memmove>:
 80061f8:	4288      	cmp	r0, r1
 80061fa:	b510      	push	{r4, lr}
 80061fc:	eb01 0402 	add.w	r4, r1, r2
 8006200:	d902      	bls.n	8006208 <memmove+0x10>
 8006202:	4284      	cmp	r4, r0
 8006204:	4623      	mov	r3, r4
 8006206:	d807      	bhi.n	8006218 <memmove+0x20>
 8006208:	1e43      	subs	r3, r0, #1
 800620a:	42a1      	cmp	r1, r4
 800620c:	d008      	beq.n	8006220 <memmove+0x28>
 800620e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006212:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006216:	e7f8      	b.n	800620a <memmove+0x12>
 8006218:	4402      	add	r2, r0
 800621a:	4601      	mov	r1, r0
 800621c:	428a      	cmp	r2, r1
 800621e:	d100      	bne.n	8006222 <memmove+0x2a>
 8006220:	bd10      	pop	{r4, pc}
 8006222:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006226:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800622a:	e7f7      	b.n	800621c <memmove+0x24>

0800622c <_realloc_r>:
 800622c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006230:	4680      	mov	r8, r0
 8006232:	4614      	mov	r4, r2
 8006234:	460e      	mov	r6, r1
 8006236:	b921      	cbnz	r1, 8006242 <_realloc_r+0x16>
 8006238:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800623c:	4611      	mov	r1, r2
 800623e:	f7fe ba9b 	b.w	8004778 <_malloc_r>
 8006242:	b92a      	cbnz	r2, 8006250 <_realloc_r+0x24>
 8006244:	f7fe fe80 	bl	8004f48 <_free_r>
 8006248:	4625      	mov	r5, r4
 800624a:	4628      	mov	r0, r5
 800624c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006250:	f000 f81b 	bl	800628a <_malloc_usable_size_r>
 8006254:	4284      	cmp	r4, r0
 8006256:	4607      	mov	r7, r0
 8006258:	d802      	bhi.n	8006260 <_realloc_r+0x34>
 800625a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800625e:	d812      	bhi.n	8006286 <_realloc_r+0x5a>
 8006260:	4621      	mov	r1, r4
 8006262:	4640      	mov	r0, r8
 8006264:	f7fe fa88 	bl	8004778 <_malloc_r>
 8006268:	4605      	mov	r5, r0
 800626a:	2800      	cmp	r0, #0
 800626c:	d0ed      	beq.n	800624a <_realloc_r+0x1e>
 800626e:	42bc      	cmp	r4, r7
 8006270:	4622      	mov	r2, r4
 8006272:	4631      	mov	r1, r6
 8006274:	bf28      	it	cs
 8006276:	463a      	movcs	r2, r7
 8006278:	f7fe fa47 	bl	800470a <memcpy>
 800627c:	4631      	mov	r1, r6
 800627e:	4640      	mov	r0, r8
 8006280:	f7fe fe62 	bl	8004f48 <_free_r>
 8006284:	e7e1      	b.n	800624a <_realloc_r+0x1e>
 8006286:	4635      	mov	r5, r6
 8006288:	e7df      	b.n	800624a <_realloc_r+0x1e>

0800628a <_malloc_usable_size_r>:
 800628a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800628e:	1f18      	subs	r0, r3, #4
 8006290:	2b00      	cmp	r3, #0
 8006292:	bfbc      	itt	lt
 8006294:	580b      	ldrlt	r3, [r1, r0]
 8006296:	18c0      	addlt	r0, r0, r3
 8006298:	4770      	bx	lr
	...

0800629c <_init>:
 800629c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800629e:	bf00      	nop
 80062a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80062a2:	bc08      	pop	{r3}
 80062a4:	469e      	mov	lr, r3
 80062a6:	4770      	bx	lr

080062a8 <_fini>:
 80062a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062aa:	bf00      	nop
 80062ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80062ae:	bc08      	pop	{r3}
 80062b0:	469e      	mov	lr, r3
 80062b2:	4770      	bx	lr
